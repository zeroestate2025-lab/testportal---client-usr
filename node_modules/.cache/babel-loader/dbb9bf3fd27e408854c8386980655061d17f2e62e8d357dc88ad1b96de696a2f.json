{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Downloads\\\\INTERVIEW PROCESS\\\\INTERVIEW PROCESS\\\\client\\\\src\\\\pages\\\\AdminDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport API from \"../services/api\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"../styles/AdminDashboard.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function AdminDashboard() {\n  _s();\n  const navigate = useNavigate();\n  const [questions, setQuestions] = useState([]);\n  const [results, setResults] = useState([]);\n  const [activeTab, setActiveTab] = useState(\"questions\");\n  const [form, setForm] = useState({\n    questionText: \"\",\n    optionsText: \"\",\n    correctAnswer: \"\"\n  });\n  const [questionType, setQuestionType] = useState(\"MCQ\");\n  const [file, setFile] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [loadingResults, setLoadingResults] = useState(false);\n  const [editingId, setEditingId] = useState(null);\n\n  // 🟢 Check admin login\n  useEffect(() => {\n    const token = localStorage.getItem(\"adminToken\");\n    if (!token) navigate(\"/admin/login\");\n  }, [navigate]);\n\n  // 🟢 Initial fetch\n  useEffect(() => {\n    fetchQuestions();\n    fetchResults();\n  }, []);\n  const fetchQuestions = async () => {\n    try {\n      const res = await API.get(\"/questions\");\n      setQuestions(res.data || []);\n    } catch (err) {\n      console.error(err);\n      alert(\"❌ Failed to load questions.\");\n    }\n  };\n  const fetchResults = async () => {\n    setLoadingResults(true);\n    try {\n      const res = await API.get(\"/tests\");\n      setResults(res.data || []);\n    } catch (err) {\n      console.error(err);\n      alert(\"❌ Failed to load test results.\");\n    } finally {\n      setLoadingResults(false);\n    }\n  };\n\n  // 🟢 Add or Update Question\n  const handleAddOrUpdate = async e => {\n    e.preventDefault();\n    const opts = questionType === \"MCQ\" ? form.optionsText.split(\"|\").map(s => s.trim()).filter(Boolean) : [];\n    if (!form.questionText.trim()) {\n      return alert(\"Please enter question text.\");\n    }\n    setLoading(true);\n    try {\n      if (editingId) {\n        await API.put(`/questions/${editingId}`, {\n          questionType,\n          questionText: form.questionText,\n          options: opts,\n          correctAnswer: questionType === \"MCQ\" ? form.correctAnswer : \"\"\n        });\n        alert(\"✅ Question updated successfully!\");\n      } else {\n        await API.post(\"/questions\", {\n          questionType,\n          questionText: form.questionText,\n          options: opts,\n          correctAnswer: questionType === \"MCQ\" ? form.correctAnswer : \"\"\n        });\n        alert(\"✅ Question added successfully!\");\n      }\n      setForm({\n        questionText: \"\",\n        optionsText: \"\",\n        correctAnswer: \"\"\n      });\n      setEditingId(null);\n      await fetchQuestions();\n    } catch (err) {\n      var _err$response, _err$response$data;\n      console.error(err);\n      alert(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || \"❌ Operation failed.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 🟢 Delete Question\n  const handleDelete = async id => {\n    if (!window.confirm(\"Are you sure you want to delete this question?\")) return;\n    try {\n      await API.delete(`/questions/${id}`);\n      alert(\"🗑️ Question deleted successfully!\");\n      await fetchQuestions();\n    } catch (err) {\n      console.error(err);\n      alert(\"❌ Failed to delete question.\");\n    }\n  };\n\n  // 🟢 Edit Question\n  const handleEdit = q => {\n    setEditingId(q._id);\n    setQuestionType(q.questionType);\n    setForm({\n      questionText: q.questionText,\n      optionsText: q.options ? q.options.join(\" | \") : \"\",\n      correctAnswer: q.correctAnswer || \"\"\n    });\n    window.scrollTo({\n      top: 0,\n      behavior: \"smooth\"\n    });\n  };\n\n  // 🟢 Upload File\n  const handleUpload = async () => {\n    if (!file) return alert(\"Please select a file to upload.\");\n    const fd = new FormData();\n    fd.append(\"file\", file);\n    try {\n      const res = await API.post(\"/questions/upload\", fd, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      alert(res.data.message || \"✅ File uploaded successfully!\");\n      await fetchQuestions();\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      console.error(err);\n      alert(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.error) || \"❌ File upload failed.\");\n    }\n  };\n  const handleLogout = () => {\n    localStorage.removeItem(\"adminToken\");\n    navigate(\"/admin/login\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"admin-dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"admin-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Admin Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"logout-btn\",\n        onClick: handleLogout,\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tab-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `tab-btn ${activeTab === \"questions\" ? \"active\" : \"\"}`,\n        onClick: () => setActiveTab(\"questions\"),\n        children: \"\\uD83E\\uDDE9 Questions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `tab-btn ${activeTab === \"results\" ? \"active\" : \"\"}`,\n        onClick: () => setActiveTab(\"results\"),\n        children: \"\\uD83D\\uDCCA Test Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), activeTab === \"questions\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tab-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card form-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: editingId ? \"✏️ Edit Question\" : \"➕ Add or Upload Questions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleAddOrUpdate,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"form-label\",\n              children: \"Question Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              className: \"form-select\",\n              value: questionType,\n              onChange: e => setQuestionType(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"MCQ\",\n                children: \"MCQ\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Theory\",\n                children: \"Theory\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"form-label\",\n              children: \"Question Text\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              className: \"form-control\",\n              rows: questionType === \"Theory\" ? 3 : 2,\n              value: form.questionText,\n              onChange: e => setForm({\n                ...form,\n                questionText: e.target.value\n              }),\n              placeholder: \"Enter your question here...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 15\n          }, this), questionType === \"MCQ\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mb-3\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"form-label\",\n                children: \"Options (separate by |)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"form-control\",\n                value: form.optionsText,\n                onChange: e => setForm({\n                  ...form,\n                  optionsText: e.target.value\n                }),\n                placeholder: \"Option A | Option B | Option C | Option D\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mb-3\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"form-label\",\n                children: \"Correct Answer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 222,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"form-control\",\n                value: form.correctAnswer,\n                onChange: e => setForm({\n                  ...form,\n                  correctAnswer: e.target.value\n                }),\n                placeholder: \"Enter correct answer text\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 223,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex gap-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-success\",\n              type: \"submit\",\n              disabled: loading,\n              children: loading ? \"Saving...\" : editingId ? \"Update Question\" : \"Add Question\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn btn-secondary\",\n              onClick: () => {\n                setForm({\n                  questionText: \"\",\n                  optionsText: \"\",\n                  correctAnswer: \"\"\n                });\n                setEditingId(null);\n              },\n              children: \"Clear\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n          className: \"my-4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"upload-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label\",\n            children: \"Upload Document (.docx)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            className: \"form-control\",\n            accept: \".docx\",\n            onChange: e => setFile(e.target.files[0])\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-2\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-primary\",\n              onClick: handleUpload,\n              children: \"Upload\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card available-questions\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Available Questions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n          className: \"mt-3 text-primary\",\n          children: \"MCQ Questions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 13\n        }, this), questions.filter(q => q.questionType === \"MCQ\").length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-muted\",\n          children: \"No MCQs yet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 15\n        }, this), questions.filter(q => q.questionType === \"MCQ\").map((q, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [\"Q\", idx + 1, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 19\n          }, this), \" \", q.questionText, /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"small text-muted\",\n            children: [\"Options: \", q.options.join(\" | \")]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"small text-success\",\n            children: [\"Correct: \", q.correctAnswer]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"action-buttons\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-sm btn-warning\",\n              onClick: () => handleEdit(q),\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-sm btn-danger\",\n              onClick: () => handleDelete(q._id),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 19\n          }, this)]\n        }, q._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 17\n        }, this)), /*#__PURE__*/_jsxDEV(\"h6\", {\n          className: \"mt-4 text-primary\",\n          children: \"Theory Questions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 13\n        }, this), questions.filter(q => q.questionType === \"Theory\").length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-muted\",\n          children: \"No theory questions yet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 15\n        }, this), questions.filter(q => q.questionType === \"Theory\").map((q, idx) => {\n          const relatedAnswers = results.flatMap(r => r.answers || []).filter(a => a.question.trim().toLowerCase() === q.questionText.trim().toLowerCase());\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"question-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [\"Q\", idx + 1, \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 333,\n              columnNumber: 21\n            }, this), \" \", q.questionText, relatedAnswers.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"theory-answers\",\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Answers:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 336,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: relatedAnswers.map((a, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: a.userAnswer\n                }, i, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 339,\n                  columnNumber: 29\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 337,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 23\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-muted small\",\n              children: \"No answers yet\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 344,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"action-buttons\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-sm btn-warning\",\n                onClick: () => handleEdit(q),\n                children: \"Edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 347,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-sm btn-danger\",\n                onClick: () => handleDelete(q._id),\n                children: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 353,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 21\n            }, this)]\n          }, q._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 19\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }, this) :\n    /*#__PURE__*/\n    // 📊 TEST RESULTS TAB\n    _jsxDEV(\"div\", {\n      className: \"tab-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card results-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Candidate Test Results\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 13\n        }, this), loadingResults ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading test results...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 15\n        }, this) : results.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-muted\",\n          children: \"No test results yet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"results-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 378,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Email\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 379,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Total\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 380,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Correct\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 381,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Score %\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 382,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Submitted At\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 383,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 377,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: results.map((res, idx) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: res.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 389,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: res.email\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 390,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: res.totalQuestions\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 391,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: res.correctAnswers\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 392,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [res.scorePercent, \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 393,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: new Date(res.submittedAt).toLocaleString()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 394,\n                columnNumber: 23\n              }, this)]\n            }, idx, true, {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n}\n\n// import React, { useEffect, useState } from \"react\";\n// import API from \"../services/api\";\n// import { useNavigate } from \"react-router-dom\";\n// import \"../styles/AdminDashboard.css\";\n\n// export default function AdminDashboard() {\n//   const navigate = useNavigate();\n//   const [questions, setQuestions] = useState([]);\n//   const [results, setResults] = useState([]);\n//   const [activeTab, setActiveTab] = useState(\"questions\"); // 🔹 Switch tab\n//   const [form, setForm] = useState({\n//     questionText: \"\",\n//     optionsText: \"\",\n//     correctAnswer: \"\",\n//   });\n//   const [questionType, setQuestionType] = useState(\"MCQ\");\n//   const [file, setFile] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [loadingResults, setLoadingResults] = useState(false);\n\n//   // 🟢 Check admin login\n//   useEffect(() => {\n//     const token = localStorage.getItem(\"adminToken\");\n//     if (!token) navigate(\"/admin/login\");\n//   }, [navigate]);\n\n//   // 🟢 Fetch initial data\n//   useEffect(() => {\n//     fetchQuestions();\n//     fetchResults();\n//   }, []);\n\n//   const fetchQuestions = async () => {\n//     try {\n//       const res = await API.get(\"/questions\");\n//       setQuestions(res.data || []);\n//     } catch (err) {\n//       console.error(err);\n//       alert(\"❌ Failed to load questions.\");\n//     }\n//   };\n\n//   const fetchResults = async () => {\n//     setLoadingResults(true);\n//     try {\n//       const res = await API.get(\"/tests\");\n//       setResults(res.data || []);\n//     } catch (err) {\n//       console.error(err);\n//       alert(\"❌ Failed to load test results.\");\n//     } finally {\n//       setLoadingResults(false);\n//     }\n//   };\n\n//   // 🟢 Add Question\n//   const handleAddQuestion = async (e) => {\n//     e.preventDefault();\n//     const opts =\n//       questionType === \"MCQ\"\n//         ? form.optionsText.split(\"|\").map((s) => s.trim()).filter(Boolean)\n//         : [];\n\n//     if (!form.questionText.trim()) {\n//       return alert(\"Please enter question text.\");\n//     }\n//     if (questionType === \"MCQ\" && (opts.length < 2 || !form.correctAnswer.trim())) {\n//       return alert(\"Please enter at least 2 options and a correct answer.\");\n//     }\n\n//     setLoading(true);\n//     try {\n//       await API.post(\"/questions\", {\n//         questionType,\n//         questionText: form.questionText,\n//         options: opts,\n//         correctAnswer: questionType === \"MCQ\" ? form.correctAnswer : \"\",\n//       });\n\n//       setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" });\n//       await fetchQuestions();\n//       alert(\"✅ Question added successfully!\");\n//     } catch (err) {\n//       console.error(err);\n//       alert(err.response?.data?.error || \"Failed to add question.\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // 🟢 Upload File\n//   const handleUpload = async () => {\n//     if (!file) return alert(\"Please select a file to upload.\");\n//     const fd = new FormData();\n//     fd.append(\"file\", file);\n\n//     try {\n//       const res = await API.post(\"/questions/upload\", fd, {\n//         headers: { \"Content-Type\": \"multipart/form-data\" },\n//       });\n//       alert(res.data.message || \"✅ File uploaded successfully!\");\n//       await fetchQuestions();\n//     } catch (err) {\n//       console.error(err);\n//       alert(err.response?.data?.error || \"❌ File upload failed.\");\n//     }\n//   };\n\n//   const handleLogout = () => {\n//     localStorage.removeItem(\"adminToken\");\n//     navigate(\"/admin/login\");\n//   };\n\n//   return (\n//     <div className=\"admin-dashboard\">\n//       {/* Header */}\n//       <div className=\"admin-header\">\n//         <h2>Admin Dashboard</h2>\n//         <button className=\"logout-btn\" onClick={handleLogout}>\n//           Logout\n//         </button>\n//       </div>\n\n//       {/* Tabs */}\n//       <div className=\"tab-buttons\">\n//         <button\n//           className={`tab-btn ${activeTab === \"questions\" ? \"active\" : \"\"}`}\n//           onClick={() => setActiveTab(\"questions\")}\n//         >\n//           🧩 Questions\n//         </button>\n//         <button\n//           className={`tab-btn ${activeTab === \"results\" ? \"active\" : \"\"}`}\n//           onClick={() => setActiveTab(\"results\")}\n//         >\n//           📊 Test Results\n//         </button>\n//       </div>\n\n//       {/* Content based on active tab */}\n//       {activeTab === \"questions\" ? (\n//         <div className=\"tab-content\">\n//           {/* Add Question / Upload Section */}\n//           <div className=\"card form-section\">\n//             <h5>Add or Upload Questions</h5>\n\n//             <form onSubmit={handleAddQuestion}>\n//               <div className=\"mb-3\">\n//                 <label className=\"form-label\">Question Type</label>\n//                 <select\n//                   className=\"form-select\"\n//                   value={questionType}\n//                   onChange={(e) => setQuestionType(e.target.value)}\n//                 >\n//                   <option value=\"MCQ\">MCQ</option>\n//                   <option value=\"Theory\">Theory</option>\n//                 </select>\n//               </div>\n\n//               <div className=\"mb-3\">\n//                 <label className=\"form-label\">Question Text</label>\n//                 <textarea\n//                   className=\"form-control\"\n//                   rows={questionType === \"Theory\" ? 3 : 2}\n//                   value={form.questionText}\n//                   onChange={(e) =>\n//                     setForm({ ...form, questionText: e.target.value })\n//                   }\n//                   placeholder=\"Enter your question here...\"\n//                 />\n//               </div>\n\n//               {questionType === \"MCQ\" && (\n//                 <>\n//                   <div className=\"mb-3\">\n//                     <label className=\"form-label\">Options (separate by |)</label>\n//                     <input\n//                       className=\"form-control\"\n//                       value={form.optionsText}\n//                       onChange={(e) =>\n//                         setForm({ ...form, optionsText: e.target.value })\n//                       }\n//                       placeholder=\"Option A | Option B | Option C | Option D\"\n//                     />\n//                   </div>\n\n//                   <div className=\"mb-3\">\n//                     <label className=\"form-label\">Correct Answer</label>\n//                     <input\n//                       className=\"form-control\"\n//                       value={form.correctAnswer}\n//                       onChange={(e) =>\n//                         setForm({ ...form, correctAnswer: e.target.value })\n//                       }\n//                       placeholder=\"Enter correct answer text\"\n//                     />\n//                   </div>\n//                 </>\n//               )}\n\n//               <div className=\"d-flex gap-2\">\n//                 <button className=\"btn btn-success\" type=\"submit\" disabled={loading}>\n//                   {loading ? \"Adding...\" : \"Add Question\"}\n//                 </button>\n//                 <button\n//                   type=\"button\"\n//                   className=\"btn btn-secondary\"\n//                   onClick={() =>\n//                     setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" })\n//                   }\n//                 >\n//                   Clear\n//                 </button>\n//               </div>\n//             </form>\n\n//             <hr className=\"my-4\" />\n\n//             {/* Upload Document Section */}\n//             <div className=\"upload-section\">\n//               <label className=\"form-label\">Upload Document (.docx)</label>\n//               <input\n//                 type=\"file\"\n//                 className=\"form-control\"\n//                 accept=\".docx\"\n//                 onChange={(e) => setFile(e.target.files[0])}\n//               />\n//               <div className=\"mt-2\">\n//                 <button className=\"btn btn-primary\" onClick={handleUpload}>\n//                   Upload\n//                 </button>\n//               </div>\n//             </div>\n//           </div>\n\n//           {/* Display Available Questions */}\n//           <div className=\"card available-questions\">\n//             <h5>Available Questions</h5>\n\n//             <h6 className=\"mt-3 text-primary\">MCQ Questions</h6>\n//             {questions.filter((q) => q.questionType === \"MCQ\").length === 0 && (\n//               <div className=\"text-muted\">No MCQs yet</div>\n//             )}\n//             {questions\n//               .filter((q) => q.questionType === \"MCQ\")\n//               .map((q, idx) => (\n//                 <div key={q._id} className=\"question-item\">\n//                   <strong>Q{idx + 1}:</strong> {q.questionText}\n//                   <div className=\"small text-muted\">\n//                     Options: {q.options.join(\" | \")}\n//                   </div>\n//                   <div className=\"small text-success\">\n//                     Correct: {q.correctAnswer}\n//                   </div>\n//                 </div>\n//               ))}\n\n//             <h6 className=\"mt-4 text-primary\">Theory Questions</h6>\n//             {questions.filter((q) => q.questionType === \"Theory\").length === 0 && (\n//               <div className=\"text-muted\">No theory questions yet</div>\n//             )}\n//             {questions\n//               .filter((q) => q.questionType === \"Theory\")\n//               .map((q, idx) => (\n//                 <div key={q._id} className=\"question-item\">\n//                   <strong>Q{idx + 1}:</strong> {q.questionText}\n//                 </div>\n//               ))}\n//           </div>\n//         </div>\n//       ) : (\n//         <div className=\"tab-content\">\n//           {/* Test Results Section */}\n//           <div className=\"card results-section\">\n//             <h5>Candidate Test Results</h5>\n\n//             {loadingResults ? (\n//               <div>Loading test results...</div>\n//             ) : results.length === 0 ? (\n//               <div className=\"text-muted\">No test results yet</div>\n//             ) : (\n//               <table className=\"results-table\">\n//                 <thead>\n//                   <tr>\n//                     <th>Name</th>\n//                     <th>Email</th>\n//                     <th>Total Questions</th>\n//                     <th>Correct</th>\n//                     <th>Score %</th>\n//                     <th>Submitted At</th>\n//                   </tr>\n//                 </thead>\n//                 <tbody>\n//                   {results.map((res, idx) => (\n//                     <tr key={idx}>\n//                       <td>{res.name}</td>\n//                       <td>{res.email}</td>\n//                       <td>{res.totalQuestions}</td>\n//                       <td>{res.correctAnswers}</td>\n//                       <td>{res.scorePercent}%</td>\n//                       <td>{new Date(res.submittedAt).toLocaleString()}</td>\n//                     </tr>\n//                   ))}\n//                 </tbody>\n//               </table>\n//             )}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// // import React, { useEffect, useState } from \"react\";\n// // import API from \"../services/api\";\n// // import { useNavigate } from \"react-router-dom\";\n// // import \"../styles/AdminDashboard.css\";\n\n// // export default function AdminDashboard() {\n// //   const navigate = useNavigate();\n// //   const [questions, setQuestions] = useState([]);\n// //   const [results, setResults] = useState([]);\n// //   const [form, setForm] = useState({\n// //     questionText: \"\",\n// //     optionsText: \"\",\n// //     correctAnswer: \"\",\n// //   });\n// //   const [questionType, setQuestionType] = useState(\"MCQ\");\n// //   const [file, setFile] = useState(null);\n// //   const [loading, setLoading] = useState(false);\n// //   const [loadingResults, setLoadingResults] = useState(false);\n\n// //   // 🟢 Check admin login (token validation)\n// //   useEffect(() => {\n// //     const token = localStorage.getItem(\"adminToken\");\n// //     if (!token) navigate(\"/admin/login\");\n// //   }, [navigate]);\n\n// //   // 🟢 Fetch questions and test results on load\n// //   useEffect(() => {\n// //     fetchQuestions();\n// //     fetchResults();\n// //   }, []);\n\n// //   const fetchQuestions = async () => {\n// //     try {\n// //       const res = await API.get(\"/questions\");\n// //       setQuestions(res.data || []);\n// //     } catch (err) {\n// //       console.error(err);\n// //       alert(\"❌ Failed to load questions.\");\n// //     }\n// //   };\n\n// //   const fetchResults = async () => {\n// //     setLoadingResults(true);\n// //     try {\n// //       const res = await API.get(\"/tests\");\n// //       setResults(res.data || []);\n// //     } catch (err) {\n// //       console.error(err);\n// //       alert(\"❌ Failed to load test results.\");\n// //     } finally {\n// //       setLoadingResults(false);\n// //     }\n// //   };\n\n// //   // 🟢 Add Question Manually\n// //   const handleAddQuestion = async (e) => {\n// //     e.preventDefault();\n// //     const opts =\n// //       questionType === \"MCQ\"\n// //         ? form.optionsText.split(\"|\").map((s) => s.trim()).filter(Boolean)\n// //         : [];\n\n// //     if (!form.questionText.trim()) {\n// //       return alert(\"Please enter question text.\");\n// //     }\n// //     if (questionType === \"MCQ\" && (opts.length < 2 || !form.correctAnswer.trim())) {\n// //       return alert(\"Please enter at least 2 options and a correct answer.\");\n// //     }\n\n// //     setLoading(true);\n// //     try {\n// //       await API.post(\"/questions\", {\n// //         questionType,\n// //         questionText: form.questionText,\n// //         options: opts,\n// //         correctAnswer: questionType === \"MCQ\" ? form.correctAnswer : \"\",\n// //       });\n\n// //       setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" });\n// //       await fetchQuestions();\n// //       alert(\"✅ Question added successfully!\");\n// //     } catch (err) {\n// //       console.error(err);\n// //       alert(err.response?.data?.error || \"Failed to add question.\");\n// //     } finally {\n// //       setLoading(false);\n// //     }\n// //   };\n\n// //   // 🟢 Upload .docx question file\n// //   const handleUpload = async () => {\n// //     if (!file) return alert(\"Please select a file to upload.\");\n// //     const fd = new FormData();\n// //     fd.append(\"file\", file);\n\n// //     try {\n// //       const res = await API.post(\"/questions/upload\", fd, {\n// //         headers: { \"Content-Type\": \"multipart/form-data\" },\n// //       });\n// //       alert(res.data.message || \"✅ File uploaded successfully!\");\n// //       await fetchQuestions();\n// //     } catch (err) {\n// //       console.error(err);\n// //       alert(err.response?.data?.error || \"❌ File upload failed.\");\n// //     }\n// //   };\n\n// //   // 🟢 Logout\n// //   const handleLogout = () => {\n// //     localStorage.removeItem(\"adminToken\");\n// //     navigate(\"/admin/login\");\n// //   };\n\n// //   return (\n// //     <div className=\"container container-center py-4 admin-dashboard\">\n// //       {/* Header */}\n// //       <div className=\"d-flex justify-content-between align-items-center mb-3 admin-header\">\n// //         <h2>Admin Dashboard</h2>\n// //         <button className=\"btn btn-outline-danger btn-sm\" onClick={handleLogout}>\n// //           Logout\n// //         </button>\n// //       </div>\n\n// //       {/* Add Question / Upload Section */}\n// //       <div className=\"card card-clean p-4 mb-4 form-section\">\n// //         <h5>Add questions or upload documents that will be shown to candidates.</h5>\n\n// //         {/* Add Question Form */}\n// //         <form onSubmit={handleAddQuestion} className=\"mt-3\">\n// //           <div className=\"mb-3\">\n// //             <label className=\"form-label\">Question Type</label>\n// //             <select\n// //               className=\"form-select\"\n// //               value={questionType}\n// //               onChange={(e) => setQuestionType(e.target.value)}\n// //             >\n// //               <option value=\"MCQ\">MCQ</option>\n// //               <option value=\"Theory\">Theory</option>\n// //             </select>\n// //           </div>\n\n// //           <div className=\"mb-3\">\n// //             <label className=\"form-label\">Question Text</label>\n// //             <textarea\n// //               className=\"form-control\"\n// //               rows={questionType === \"Theory\" ? 3 : 2}\n// //               value={form.questionText}\n// //               onChange={(e) => setForm({ ...form, questionText: e.target.value })}\n// //               placeholder=\"Enter your question here...\"\n// //             />\n// //           </div>\n\n// //           {questionType === \"MCQ\" && (\n// //             <>\n// //               <div className=\"mb-3\">\n// //                 <label className=\"form-label\">Options (separate by |)</label>\n// //                 <input\n// //                   className=\"form-control\"\n// //                   value={form.optionsText}\n// //                   onChange={(e) =>\n// //                     setForm({ ...form, optionsText: e.target.value })\n// //                   }\n// //                   placeholder=\"Option A | Option B | Option C | Option D\"\n// //                 />\n// //               </div>\n\n// //               <div className=\"mb-3\">\n// //                 <label className=\"form-label\">\n// //                   Correct Answer (exact text of one option)\n// //                 </label>\n// //                 <input\n// //                   className=\"form-control\"\n// //                   value={form.correctAnswer}\n// //                   onChange={(e) =>\n// //                     setForm({ ...form, correctAnswer: e.target.value })\n// //                   }\n// //                   placeholder=\"Enter correct answer text\"\n// //                 />\n// //               </div>\n// //             </>\n// //           )}\n\n// //           <div className=\"mb-3 d-flex gap-2\">\n// //             <button\n// //               className=\"btn btn-success\"\n// //               type=\"submit\"\n// //               disabled={loading}\n// //             >\n// //               {loading ? \"Adding...\" : \"Add Question\"}\n// //             </button>\n// //             <button\n// //               type=\"button\"\n// //               className=\"btn btn-secondary\"\n// //               onClick={() =>\n// //                 setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" })\n// //               }\n// //             >\n// //               Clear\n// //             </button>\n// //           </div>\n// //         </form>\n\n// //         <hr className=\"my-4\" />\n\n// //         {/* Upload Document Section */}\n// //         <div className=\"mb-3 upload-section\">\n// //           <label className=\"form-label\">Upload Document (.docx)</label>\n// //           <input\n// //             type=\"file\"\n// //             className=\"form-control\"\n// //             accept=\".docx\"\n// //             onChange={(e) => setFile(e.target.files[0])}\n// //           />\n// //           <div className=\"mt-2\">\n// //             <button className=\"btn btn-primary\" onClick={handleUpload}>\n// //               Upload\n// //             </button>\n// //           </div>\n// //         </div>\n// //       </div>\n\n// //       {/* Available Questions */}\n// //       <div className=\"card card-clean p-4 mb-4 available-questions\">\n// //         <h5>Available Questions</h5>\n\n// //         {/* MCQ Section */}\n// //         <h6 className=\"mt-3 text-primary\">MCQ Questions</h6>\n// //         {questions.filter((q) => q.questionType === \"MCQ\").length === 0 && (\n// //           <div className=\"text-muted\">No MCQs yet</div>\n// //         )}\n// //         {questions\n// //           .filter((q) => q.questionType === \"MCQ\")\n// //           .map((q, idx) => (\n// //             <div key={q._id} className=\"mb-3 border-bottom pb-2\">\n// //               <strong>Q{idx + 1}:</strong> {q.questionText}\n// //               <div className=\"small text-muted\">\n// //                 Options: {q.options.join(\" | \")}\n// //               </div>\n// //               <div className=\"small text-success\">\n// //                 Correct: {q.correctAnswer}\n// //               </div>\n// //             </div>\n// //           ))}\n\n// //         {/* Theory Section */}\n// //         <h6 className=\"mt-4 text-primary\">Theory Questions</h6>\n// //         {questions.filter((q) => q.questionType === \"Theory\").length === 0 && (\n// //           <div className=\"text-muted\">No theory questions yet</div>\n// //         )}\n// //         {questions\n// //           .filter((q) => q.questionType === \"Theory\")\n// //           .map((q, idx) => (\n// //             <div key={q._id} className=\"mb-3 border-bottom pb-2\">\n// //               <strong>Q{idx + 1}:</strong> {q.questionText}\n// //             </div>\n// //           ))}\n// //       </div>\n\n// //       {/* Test Results Section */}\n// //       <div className=\"card card-clean p-4 mb-4 results-section\">\n// //         <h5>Candidate Test Results</h5>\n\n// //         {loadingResults ? (\n// //           <div>Loading test results...</div>\n// //         ) : results.length === 0 ? (\n// //           <div className=\"text-muted\">No test results yet</div>\n// //         ) : (\n// //           <table className=\"results-table\">\n// //             <thead>\n// //               <tr>\n// //                 <th>Name</th>\n// //                 <th>Email</th>\n// //                 <th>Total Questions</th>\n// //                 <th>Correct</th>\n// //                 <th>Score %</th>\n// //                 <th>Submitted At</th>\n// //               </tr>\n// //             </thead>\n// //             <tbody>\n// //               {results.map((res, idx) => (\n// //                 <tr key={idx}>\n// //                   <td>{res.name}</td>\n// //                   <td>{res.email}</td>\n// //                   <td>{res.totalQuestions}</td>\n// //                   <td>{res.correctAnswers}</td>\n// //                   <td>{res.scorePercent}%</td>\n// //                   <td>{new Date(res.submittedAt).toLocaleString()}</td>\n// //                 </tr>\n// //               ))}\n// //             </tbody>\n// //           </table>\n// //         )}\n// //       </div>\n// //     </div>\n// //   );\n// // }\n\n// // // import React, { useEffect, useState } from \"react\";\n// // // import API from \"../services/api\";\n// // // import { useNavigate } from \"react-router-dom\";\n// // // import \"../styles/AdminDashboard.css\";\n\n// // // export default function AdminDashboard() {\n// // //   const navigate = useNavigate();\n// // //   const [questions, setQuestions] = useState([]);\n// // //   const [form, setForm] = useState({\n// // //     questionText: \"\",\n// // //     optionsText: \"\",\n// // //     correctAnswer: \"\",\n// // //   });\n// // //   const [questionType, setQuestionType] = useState(\"MCQ\");\n// // //   const [file, setFile] = useState(null);\n// // //   const [loading, setLoading] = useState(false);\n\n// // //   // 🟢 Check admin login (token validation)\n// // //   useEffect(() => {\n// // //     const token = localStorage.getItem(\"adminToken\");\n// // //     if (!token) navigate(\"/admin/login\");\n// // //   }, [navigate]);\n\n// // //   // 🟢 Fetch questions from DB\n// // //   useEffect(() => {\n// // //     fetchQuestions();\n// // //   }, []);\n\n// // //   const fetchQuestions = async () => {\n// // //     try {\n// // //       const res = await API.get(\"/questions\");\n// // //       setQuestions(res.data || []);\n// // //     } catch (err) {\n// // //       console.error(err);\n// // //       alert(\"Failed to load questions.\");\n// // //     }\n// // //   };\n\n// // //   // 🟢 Add Question Manually\n// // //   const handleAddQuestion = async (e) => {\n// // //     e.preventDefault();\n// // //     const opts =\n// // //       questionType === \"MCQ\"\n// // //         ? form.optionsText.split(\"|\").map((s) => s.trim()).filter(Boolean)\n// // //         : [];\n\n// // //     if (!form.questionText.trim()) {\n// // //       return alert(\"Please enter question text.\");\n// // //     }\n// // //     if (questionType === \"MCQ\" && (opts.length < 2 || !form.correctAnswer.trim())) {\n// // //       return alert(\"Please enter at least 2 options and a correct answer.\");\n// // //     }\n\n// // //     setLoading(true);\n// // //     try {\n// // //       await API.post(\"/questions\", {\n// // //         questionType,\n// // //         questionText: form.questionText,\n// // //         options: opts,\n// // //         correctAnswer: questionType === \"MCQ\" ? form.correctAnswer : \"\",\n// // //       });\n\n// // //       setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" });\n// // //       await fetchQuestions();\n// // //       alert(\"✅ Question added successfully!\");\n// // //     } catch (err) {\n// // //       console.error(err);\n// // //       alert(err.response?.data?.error || \"Failed to add question.\");\n// // //     } finally {\n// // //       setLoading(false);\n// // //     }\n// // //   };\n\n// // //   // 🟢 Upload .docx question file\n// // //   const handleUpload = async () => {\n// // //     if (!file) return alert(\"Please select a file to upload.\");\n// // //     const fd = new FormData();\n// // //     fd.append(\"file\", file);\n\n// // //     try {\n// // //       const res = await API.post(\"/questions/upload\", fd, {\n// // //         headers: { \"Content-Type\": \"multipart/form-data\" },\n// // //       });\n// // //       alert(res.data.message || \"File uploaded successfully!\");\n// // //       await fetchQuestions();\n// // //     } catch (err) {\n// // //       console.error(err);\n// // //       alert(err.response?.data?.error || \"File upload failed.\");\n// // //     }\n// // //   };\n\n// // //   // 🟢 Logout\n// // //   const handleLogout = () => {\n// // //     localStorage.removeItem(\"adminToken\");\n// // //     navigate(\"/admin/login\");\n// // //   };\n\n// // //   return (\n// // //     <div className=\"container container-center py-4\">\n// // //       <div className=\"d-flex justify-content-between align-items-center mb-3\">\n// // //         <h2>Admin Dashboard</h2>\n// // //         <button className=\"btn btn-outline-danger btn-sm\" onClick={handleLogout}>\n// // //           Logout\n// // //         </button>\n// // //       </div>\n\n// // //       <div className=\"card card-clean p-4 mb-4\">\n// // //         <h5>Add questions or upload documents that will be shown to candidates.</h5>\n\n// // //         {/* Add Question Form */}\n// // //         <form onSubmit={handleAddQuestion} className=\"mt-3\">\n// // //           <div className=\"mb-3\">\n// // //             <label className=\"form-label\">Question Type</label>\n// // //             <select\n// // //               className=\"form-select\"\n// // //               value={questionType}\n// // //               onChange={(e) => setQuestionType(e.target.value)}\n// // //             >\n// // //               <option value=\"MCQ\">MCQ</option>\n// // //               <option value=\"Theory\">Theory</option>\n// // //             </select>\n// // //           </div>\n\n// // //           <div className=\"mb-3\">\n// // //             <label className=\"form-label\">Question Text</label>\n// // //             <textarea\n// // //               className=\"form-control\"\n// // //               rows={questionType === \"Theory\" ? 3 : 2}\n// // //               value={form.questionText}\n// // //               onChange={(e) => setForm({ ...form, questionText: e.target.value })}\n// // //               placeholder=\"Enter your question here...\"\n// // //             />\n// // //           </div>\n\n// // //           {questionType === \"MCQ\" && (\n// // //             <>\n// // //               <div className=\"mb-3\">\n// // //                 <label className=\"form-label\">Options (separate by |)</label>\n// // //                 <input\n// // //                   className=\"form-control\"\n// // //                   value={form.optionsText}\n// // //                   onChange={(e) =>\n// // //                     setForm({ ...form, optionsText: e.target.value })\n// // //                   }\n// // //                   placeholder=\"Option A | Option B | Option C | Option D\"\n// // //                 />\n// // //               </div>\n\n// // //               <div className=\"mb-3\">\n// // //                 <label className=\"form-label\">\n// // //                   Correct Answer (exact text of one option)\n// // //                 </label>\n// // //                 <input\n// // //                   className=\"form-control\"\n// // //                   value={form.correctAnswer}\n// // //                   onChange={(e) =>\n// // //                     setForm({ ...form, correctAnswer: e.target.value })\n// // //                   }\n// // //                   placeholder=\"Enter correct answer text\"\n// // //                 />\n// // //               </div>\n// // //             </>\n// // //           )}\n\n// // //           <div className=\"mb-3 d-flex gap-2\">\n// // //             <button\n// // //               className=\"btn btn-success\"\n// // //               type=\"submit\"\n// // //               disabled={loading}\n// // //             >\n// // //               {loading ? \"Adding...\" : \"Add Question\"}\n// // //             </button>\n// // //             <button\n// // //               type=\"button\"\n// // //               className=\"btn btn-secondary\"\n// // //               onClick={() =>\n// // //                 setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" })\n// // //               }\n// // //             >\n// // //               Clear\n// // //             </button>\n// // //           </div>\n// // //         </form>\n\n// // //         <hr className=\"my-4\" />\n\n// // //         {/* Upload Document Section */}\n// // //         <div className=\"mb-3\">\n// // //           <label className=\"form-label\">Upload Document (.docx)</label>\n// // //           <input\n// // //             type=\"file\"\n// // //             className=\"form-control\"\n// // //             accept=\".docx\"\n// // //             onChange={(e) => setFile(e.target.files[0])}\n// // //           />\n// // //           <div className=\"mt-2\">\n// // //             <button className=\"btn btn-primary\" onClick={handleUpload}>\n// // //               Upload\n// // //             </button>\n// // //           </div>\n// // //         </div>\n// // //       </div>\n\n// // //       {/* Display All Questions */}\n// // //       <div className=\"card card-clean p-4\">\n// // //         <h5>Available Questions</h5>\n\n// // //         {/* MCQ Section */}\n// // //         <h6 className=\"mt-3 text-primary\">MCQ Questions</h6>\n// // //         {questions.filter((q) => q.questionType === \"MCQ\").length === 0 && (\n// // //           <div className=\"text-muted\">No MCQs yet</div>\n// // //         )}\n// // //         {questions\n// // //           .filter((q) => q.questionType === \"MCQ\")\n// // //           .map((q, idx) => (\n// // //             <div key={q._id} className=\"mb-3 border-bottom pb-2\">\n// // //               <strong>Q{idx + 1}:</strong> {q.questionText}\n// // //               <div className=\"small text-muted\">\n// // //                 Options: {q.options.join(\" | \")}\n// // //               </div>\n// // //               <div className=\"small text-success\">\n// // //                 Correct: {q.correctAnswer}\n// // //               </div>\n// // //             </div>\n// // //           ))}\n\n// // //         {/* Theory Section */}\n// // //         <h6 className=\"mt-4 text-primary\">Theory Questions</h6>\n// // //         {questions.filter((q) => q.questionType === \"Theory\").length === 0 && (\n// // //           <div className=\"text-muted\">No theory questions yet</div>\n// // //         )}\n// // //         {questions\n// // //           .filter((q) => q.questionType === \"Theory\")\n// // //           .map((q, idx) => (\n// // //             <div key={q._id} className=\"mb-3 border-bottom pb-2\">\n// // //               <strong>Q{idx + 1}:</strong> {q.questionText}\n// // //             </div>\n// // //           ))}\n// // //       </div>\n// // //     </div>\n// // //   );\n// // // }\n_s(AdminDashboard, \"OrBC7Bt6EFAaR4vPA4xT5AOsU0w=\", false, function () {\n  return [useNavigate];\n});\n_c = AdminDashboard;\nvar _c;\n$RefreshReg$(_c, \"AdminDashboard\");","map":{"version":3,"names":["React","useEffect","useState","API","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","AdminDashboard","_s","navigate","questions","setQuestions","results","setResults","activeTab","setActiveTab","form","setForm","questionText","optionsText","correctAnswer","questionType","setQuestionType","file","setFile","loading","setLoading","loadingResults","setLoadingResults","editingId","setEditingId","token","localStorage","getItem","fetchQuestions","fetchResults","res","get","data","err","console","error","alert","handleAddOrUpdate","e","preventDefault","opts","split","map","s","trim","filter","Boolean","put","options","post","_err$response","_err$response$data","response","handleDelete","id","window","confirm","delete","handleEdit","q","_id","join","scrollTo","top","behavior","handleUpload","fd","FormData","append","headers","message","_err$response2","_err$response2$data","handleLogout","removeItem","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onSubmit","value","onChange","target","rows","placeholder","type","disabled","accept","files","length","idx","relatedAnswers","flatMap","r","answers","a","question","toLowerCase","i","userAnswer","name","email","totalQuestions","correctAnswers","scorePercent","Date","submittedAt","toLocaleString","_c","$RefreshReg$"],"sources":["C:/Users/HP/Downloads/INTERVIEW PROCESS/INTERVIEW PROCESS/client/src/pages/AdminDashboard.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport API from \"../services/api\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"../styles/AdminDashboard.css\";\r\n\r\nexport default function AdminDashboard() {\r\n  const navigate = useNavigate();\r\n  const [questions, setQuestions] = useState([]);\r\n  const [results, setResults] = useState([]);\r\n  const [activeTab, setActiveTab] = useState(\"questions\");\r\n  const [form, setForm] = useState({\r\n    questionText: \"\",\r\n    optionsText: \"\",\r\n    correctAnswer: \"\",\r\n  });\r\n  const [questionType, setQuestionType] = useState(\"MCQ\");\r\n  const [file, setFile] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingResults, setLoadingResults] = useState(false);\r\n  const [editingId, setEditingId] = useState(null);\r\n\r\n  // 🟢 Check admin login\r\n  useEffect(() => {\r\n    const token = localStorage.getItem(\"adminToken\");\r\n    if (!token) navigate(\"/admin/login\");\r\n  }, [navigate]);\r\n\r\n  // 🟢 Initial fetch\r\n  useEffect(() => {\r\n    fetchQuestions();\r\n    fetchResults();\r\n  }, []);\r\n\r\n  const fetchQuestions = async () => {\r\n    try {\r\n      const res = await API.get(\"/questions\");\r\n      setQuestions(res.data || []);\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(\"❌ Failed to load questions.\");\r\n    }\r\n  };\r\n\r\n  const fetchResults = async () => {\r\n    setLoadingResults(true);\r\n    try {\r\n      const res = await API.get(\"/tests\");\r\n      setResults(res.data || []);\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(\"❌ Failed to load test results.\");\r\n    } finally {\r\n      setLoadingResults(false);\r\n    }\r\n  };\r\n\r\n  // 🟢 Add or Update Question\r\n  const handleAddOrUpdate = async (e) => {\r\n    e.preventDefault();\r\n    const opts =\r\n      questionType === \"MCQ\"\r\n        ? form.optionsText.split(\"|\").map((s) => s.trim()).filter(Boolean)\r\n        : [];\r\n\r\n    if (!form.questionText.trim()) {\r\n      return alert(\"Please enter question text.\");\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      if (editingId) {\r\n        await API.put(`/questions/${editingId}`, {\r\n          questionType,\r\n          questionText: form.questionText,\r\n          options: opts,\r\n          correctAnswer: questionType === \"MCQ\" ? form.correctAnswer : \"\",\r\n        });\r\n        alert(\"✅ Question updated successfully!\");\r\n      } else {\r\n        await API.post(\"/questions\", {\r\n          questionType,\r\n          questionText: form.questionText,\r\n          options: opts,\r\n          correctAnswer: questionType === \"MCQ\" ? form.correctAnswer : \"\",\r\n        });\r\n        alert(\"✅ Question added successfully!\");\r\n      }\r\n\r\n      setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" });\r\n      setEditingId(null);\r\n      await fetchQuestions();\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(err.response?.data?.error || \"❌ Operation failed.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // 🟢 Delete Question\r\n  const handleDelete = async (id) => {\r\n    if (!window.confirm(\"Are you sure you want to delete this question?\")) return;\r\n\r\n    try {\r\n      await API.delete(`/questions/${id}`);\r\n      alert(\"🗑️ Question deleted successfully!\");\r\n      await fetchQuestions();\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(\"❌ Failed to delete question.\");\r\n    }\r\n  };\r\n\r\n  // 🟢 Edit Question\r\n  const handleEdit = (q) => {\r\n    setEditingId(q._id);\r\n    setQuestionType(q.questionType);\r\n    setForm({\r\n      questionText: q.questionText,\r\n      optionsText: q.options ? q.options.join(\" | \") : \"\",\r\n      correctAnswer: q.correctAnswer || \"\",\r\n    });\r\n    window.scrollTo({ top: 0, behavior: \"smooth\" });\r\n  };\r\n\r\n  // 🟢 Upload File\r\n  const handleUpload = async () => {\r\n    if (!file) return alert(\"Please select a file to upload.\");\r\n    const fd = new FormData();\r\n    fd.append(\"file\", file);\r\n\r\n    try {\r\n      const res = await API.post(\"/questions/upload\", fd, {\r\n        headers: { \"Content-Type\": \"multipart/form-data\" },\r\n      });\r\n      alert(res.data.message || \"✅ File uploaded successfully!\");\r\n      await fetchQuestions();\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(err.response?.data?.error || \"❌ File upload failed.\");\r\n    }\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem(\"adminToken\");\r\n    navigate(\"/admin/login\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"admin-dashboard\">\r\n      {/* Header */}\r\n      <div className=\"admin-header\">\r\n        <h2>Admin Dashboard</h2>\r\n        <button className=\"logout-btn\" onClick={handleLogout}>\r\n          Logout\r\n        </button>\r\n      </div>\r\n\r\n      {/* Tabs */}\r\n      <div className=\"tab-buttons\">\r\n        <button\r\n          className={`tab-btn ${activeTab === \"questions\" ? \"active\" : \"\"}`}\r\n          onClick={() => setActiveTab(\"questions\")}\r\n        >\r\n          🧩 Questions\r\n        </button>\r\n        <button\r\n          className={`tab-btn ${activeTab === \"results\" ? \"active\" : \"\"}`}\r\n          onClick={() => setActiveTab(\"results\")}\r\n        >\r\n          📊 Test Results\r\n        </button>\r\n      </div>\r\n\r\n      {/* 🧩 QUESTIONS TAB */}\r\n      {activeTab === \"questions\" ? (\r\n        <div className=\"tab-content\">\r\n          <div className=\"card form-section\">\r\n            <h5>{editingId ? \"✏️ Edit Question\" : \"➕ Add or Upload Questions\"}</h5>\r\n\r\n            <form onSubmit={handleAddOrUpdate}>\r\n              <div className=\"mb-3\">\r\n                <label className=\"form-label\">Question Type</label>\r\n                <select\r\n                  className=\"form-select\"\r\n                  value={questionType}\r\n                  onChange={(e) => setQuestionType(e.target.value)}\r\n                >\r\n                  <option value=\"MCQ\">MCQ</option>\r\n                  <option value=\"Theory\">Theory</option>\r\n                </select>\r\n              </div>\r\n\r\n              <div className=\"mb-3\">\r\n                <label className=\"form-label\">Question Text</label>\r\n                <textarea\r\n                  className=\"form-control\"\r\n                  rows={questionType === \"Theory\" ? 3 : 2}\r\n                  value={form.questionText}\r\n                  onChange={(e) =>\r\n                    setForm({ ...form, questionText: e.target.value })\r\n                  }\r\n                  placeholder=\"Enter your question here...\"\r\n                />\r\n              </div>\r\n\r\n              {questionType === \"MCQ\" && (\r\n                <>\r\n                  <div className=\"mb-3\">\r\n                    <label className=\"form-label\">Options (separate by |)</label>\r\n                    <input\r\n                      className=\"form-control\"\r\n                      value={form.optionsText}\r\n                      onChange={(e) =>\r\n                        setForm({ ...form, optionsText: e.target.value })\r\n                      }\r\n                      placeholder=\"Option A | Option B | Option C | Option D\"\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"mb-3\">\r\n                    <label className=\"form-label\">Correct Answer</label>\r\n                    <input\r\n                      className=\"form-control\"\r\n                      value={form.correctAnswer}\r\n                      onChange={(e) =>\r\n                        setForm({ ...form, correctAnswer: e.target.value })\r\n                      }\r\n                      placeholder=\"Enter correct answer text\"\r\n                    />\r\n                  </div>\r\n                </>\r\n              )}\r\n\r\n              <div className=\"d-flex gap-2\">\r\n                <button className=\"btn btn-success\" type=\"submit\" disabled={loading}>\r\n                  {loading\r\n                    ? \"Saving...\"\r\n                    : editingId\r\n                    ? \"Update Question\"\r\n                    : \"Add Question\"}\r\n                </button>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-secondary\"\r\n                  onClick={() => {\r\n                    setForm({\r\n                      questionText: \"\",\r\n                      optionsText: \"\",\r\n                      correctAnswer: \"\",\r\n                    });\r\n                    setEditingId(null);\r\n                  }}\r\n                >\r\n                  Clear\r\n                </button>\r\n              </div>\r\n            </form>\r\n\r\n            <hr className=\"my-4\" />\r\n\r\n            {/* Upload Section */}\r\n            <div className=\"upload-section\">\r\n              <label className=\"form-label\">Upload Document (.docx)</label>\r\n              <input\r\n                type=\"file\"\r\n                className=\"form-control\"\r\n                accept=\".docx\"\r\n                onChange={(e) => setFile(e.target.files[0])}\r\n              />\r\n              <div className=\"mt-2\">\r\n                <button className=\"btn btn-primary\" onClick={handleUpload}>\r\n                  Upload\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Display Questions */}\r\n          <div className=\"card available-questions\">\r\n            <h5>Available Questions</h5>\r\n\r\n            {/* MCQ Section */}\r\n            <h6 className=\"mt-3 text-primary\">MCQ Questions</h6>\r\n            {questions.filter((q) => q.questionType === \"MCQ\").length === 0 && (\r\n              <div className=\"text-muted\">No MCQs yet</div>\r\n            )}\r\n            {questions\r\n              .filter((q) => q.questionType === \"MCQ\")\r\n              .map((q, idx) => (\r\n                <div key={q._id} className=\"question-item\">\r\n                  <strong>Q{idx + 1}:</strong> {q.questionText}\r\n                  <div className=\"small text-muted\">\r\n                    Options: {q.options.join(\" | \")}\r\n                  </div>\r\n                  <div className=\"small text-success\">\r\n                    Correct: {q.correctAnswer}\r\n                  </div>\r\n                  <div className=\"action-buttons\">\r\n                    <button\r\n                      className=\"btn btn-sm btn-warning\"\r\n                      onClick={() => handleEdit(q)}\r\n                    >\r\n                      Edit\r\n                    </button>\r\n                    <button\r\n                      className=\"btn btn-sm btn-danger\"\r\n                      onClick={() => handleDelete(q._id)}\r\n                    >\r\n                      Delete\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n\r\n            {/* Theory Section */}\r\n            <h6 className=\"mt-4 text-primary\">Theory Questions</h6>\r\n            {questions.filter((q) => q.questionType === \"Theory\").length === 0 && (\r\n              <div className=\"text-muted\">No theory questions yet</div>\r\n            )}\r\n            {questions\r\n              .filter((q) => q.questionType === \"Theory\")\r\n              .map((q, idx) => {\r\n                const relatedAnswers = results\r\n                  .flatMap((r) => r.answers || [])\r\n                  .filter(\r\n                    (a) =>\r\n                      a.question.trim().toLowerCase() ===\r\n                      q.questionText.trim().toLowerCase()\r\n                  );\r\n                return (\r\n                  <div key={q._id} className=\"question-item\">\r\n                    <strong>Q{idx + 1}:</strong> {q.questionText}\r\n                    {relatedAnswers.length > 0 ? (\r\n                      <div className=\"theory-answers\">\r\n                        <b>Answers:</b>\r\n                        <ul>\r\n                          {relatedAnswers.map((a, i) => (\r\n                            <li key={i}>{a.userAnswer}</li>\r\n                          ))}\r\n                        </ul>\r\n                      </div>\r\n                    ) : (\r\n                      <div className=\"text-muted small\">No answers yet</div>\r\n                    )}\r\n                    <div className=\"action-buttons\">\r\n                      <button\r\n                        className=\"btn btn-sm btn-warning\"\r\n                        onClick={() => handleEdit(q)}\r\n                      >\r\n                        Edit\r\n                      </button>\r\n                      <button\r\n                        className=\"btn btn-sm btn-danger\"\r\n                        onClick={() => handleDelete(q._id)}\r\n                      >\r\n                        Delete\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        // 📊 TEST RESULTS TAB\r\n        <div className=\"tab-content\">\r\n          <div className=\"card results-section\">\r\n            <h5>Candidate Test Results</h5>\r\n            {loadingResults ? (\r\n              <div>Loading test results...</div>\r\n            ) : results.length === 0 ? (\r\n              <div className=\"text-muted\">No test results yet</div>\r\n            ) : (\r\n              <table className=\"results-table\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Name</th>\r\n                    <th>Email</th>\r\n                    <th>Total</th>\r\n                    <th>Correct</th>\r\n                    <th>Score %</th>\r\n                    <th>Submitted At</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {results.map((res, idx) => (\r\n                    <tr key={idx}>\r\n                      <td>{res.name}</td>\r\n                      <td>{res.email}</td>\r\n                      <td>{res.totalQuestions}</td>\r\n                      <td>{res.correctAnswers}</td>\r\n                      <td>{res.scorePercent}%</td>\r\n                      <td>{new Date(res.submittedAt).toLocaleString()}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import API from \"../services/api\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import \"../styles/AdminDashboard.css\";\r\n\r\n// export default function AdminDashboard() {\r\n//   const navigate = useNavigate();\r\n//   const [questions, setQuestions] = useState([]);\r\n//   const [results, setResults] = useState([]);\r\n//   const [activeTab, setActiveTab] = useState(\"questions\"); // 🔹 Switch tab\r\n//   const [form, setForm] = useState({\r\n//     questionText: \"\",\r\n//     optionsText: \"\",\r\n//     correctAnswer: \"\",\r\n//   });\r\n//   const [questionType, setQuestionType] = useState(\"MCQ\");\r\n//   const [file, setFile] = useState(null);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [loadingResults, setLoadingResults] = useState(false);\r\n\r\n//   // 🟢 Check admin login\r\n//   useEffect(() => {\r\n//     const token = localStorage.getItem(\"adminToken\");\r\n//     if (!token) navigate(\"/admin/login\");\r\n//   }, [navigate]);\r\n\r\n//   // 🟢 Fetch initial data\r\n//   useEffect(() => {\r\n//     fetchQuestions();\r\n//     fetchResults();\r\n//   }, []);\r\n\r\n//   const fetchQuestions = async () => {\r\n//     try {\r\n//       const res = await API.get(\"/questions\");\r\n//       setQuestions(res.data || []);\r\n//     } catch (err) {\r\n//       console.error(err);\r\n//       alert(\"❌ Failed to load questions.\");\r\n//     }\r\n//   };\r\n\r\n//   const fetchResults = async () => {\r\n//     setLoadingResults(true);\r\n//     try {\r\n//       const res = await API.get(\"/tests\");\r\n//       setResults(res.data || []);\r\n//     } catch (err) {\r\n//       console.error(err);\r\n//       alert(\"❌ Failed to load test results.\");\r\n//     } finally {\r\n//       setLoadingResults(false);\r\n//     }\r\n//   };\r\n\r\n//   // 🟢 Add Question\r\n//   const handleAddQuestion = async (e) => {\r\n//     e.preventDefault();\r\n//     const opts =\r\n//       questionType === \"MCQ\"\r\n//         ? form.optionsText.split(\"|\").map((s) => s.trim()).filter(Boolean)\r\n//         : [];\r\n\r\n//     if (!form.questionText.trim()) {\r\n//       return alert(\"Please enter question text.\");\r\n//     }\r\n//     if (questionType === \"MCQ\" && (opts.length < 2 || !form.correctAnswer.trim())) {\r\n//       return alert(\"Please enter at least 2 options and a correct answer.\");\r\n//     }\r\n\r\n//     setLoading(true);\r\n//     try {\r\n//       await API.post(\"/questions\", {\r\n//         questionType,\r\n//         questionText: form.questionText,\r\n//         options: opts,\r\n//         correctAnswer: questionType === \"MCQ\" ? form.correctAnswer : \"\",\r\n//       });\r\n\r\n//       setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" });\r\n//       await fetchQuestions();\r\n//       alert(\"✅ Question added successfully!\");\r\n//     } catch (err) {\r\n//       console.error(err);\r\n//       alert(err.response?.data?.error || \"Failed to add question.\");\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   // 🟢 Upload File\r\n//   const handleUpload = async () => {\r\n//     if (!file) return alert(\"Please select a file to upload.\");\r\n//     const fd = new FormData();\r\n//     fd.append(\"file\", file);\r\n\r\n//     try {\r\n//       const res = await API.post(\"/questions/upload\", fd, {\r\n//         headers: { \"Content-Type\": \"multipart/form-data\" },\r\n//       });\r\n//       alert(res.data.message || \"✅ File uploaded successfully!\");\r\n//       await fetchQuestions();\r\n//     } catch (err) {\r\n//       console.error(err);\r\n//       alert(err.response?.data?.error || \"❌ File upload failed.\");\r\n//     }\r\n//   };\r\n\r\n//   const handleLogout = () => {\r\n//     localStorage.removeItem(\"adminToken\");\r\n//     navigate(\"/admin/login\");\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"admin-dashboard\">\r\n//       {/* Header */}\r\n//       <div className=\"admin-header\">\r\n//         <h2>Admin Dashboard</h2>\r\n//         <button className=\"logout-btn\" onClick={handleLogout}>\r\n//           Logout\r\n//         </button>\r\n//       </div>\r\n\r\n//       {/* Tabs */}\r\n//       <div className=\"tab-buttons\">\r\n//         <button\r\n//           className={`tab-btn ${activeTab === \"questions\" ? \"active\" : \"\"}`}\r\n//           onClick={() => setActiveTab(\"questions\")}\r\n//         >\r\n//           🧩 Questions\r\n//         </button>\r\n//         <button\r\n//           className={`tab-btn ${activeTab === \"results\" ? \"active\" : \"\"}`}\r\n//           onClick={() => setActiveTab(\"results\")}\r\n//         >\r\n//           📊 Test Results\r\n//         </button>\r\n//       </div>\r\n\r\n//       {/* Content based on active tab */}\r\n//       {activeTab === \"questions\" ? (\r\n//         <div className=\"tab-content\">\r\n//           {/* Add Question / Upload Section */}\r\n//           <div className=\"card form-section\">\r\n//             <h5>Add or Upload Questions</h5>\r\n\r\n//             <form onSubmit={handleAddQuestion}>\r\n//               <div className=\"mb-3\">\r\n//                 <label className=\"form-label\">Question Type</label>\r\n//                 <select\r\n//                   className=\"form-select\"\r\n//                   value={questionType}\r\n//                   onChange={(e) => setQuestionType(e.target.value)}\r\n//                 >\r\n//                   <option value=\"MCQ\">MCQ</option>\r\n//                   <option value=\"Theory\">Theory</option>\r\n//                 </select>\r\n//               </div>\r\n\r\n//               <div className=\"mb-3\">\r\n//                 <label className=\"form-label\">Question Text</label>\r\n//                 <textarea\r\n//                   className=\"form-control\"\r\n//                   rows={questionType === \"Theory\" ? 3 : 2}\r\n//                   value={form.questionText}\r\n//                   onChange={(e) =>\r\n//                     setForm({ ...form, questionText: e.target.value })\r\n//                   }\r\n//                   placeholder=\"Enter your question here...\"\r\n//                 />\r\n//               </div>\r\n\r\n//               {questionType === \"MCQ\" && (\r\n//                 <>\r\n//                   <div className=\"mb-3\">\r\n//                     <label className=\"form-label\">Options (separate by |)</label>\r\n//                     <input\r\n//                       className=\"form-control\"\r\n//                       value={form.optionsText}\r\n//                       onChange={(e) =>\r\n//                         setForm({ ...form, optionsText: e.target.value })\r\n//                       }\r\n//                       placeholder=\"Option A | Option B | Option C | Option D\"\r\n//                     />\r\n//                   </div>\r\n\r\n//                   <div className=\"mb-3\">\r\n//                     <label className=\"form-label\">Correct Answer</label>\r\n//                     <input\r\n//                       className=\"form-control\"\r\n//                       value={form.correctAnswer}\r\n//                       onChange={(e) =>\r\n//                         setForm({ ...form, correctAnswer: e.target.value })\r\n//                       }\r\n//                       placeholder=\"Enter correct answer text\"\r\n//                     />\r\n//                   </div>\r\n//                 </>\r\n//               )}\r\n\r\n//               <div className=\"d-flex gap-2\">\r\n//                 <button className=\"btn btn-success\" type=\"submit\" disabled={loading}>\r\n//                   {loading ? \"Adding...\" : \"Add Question\"}\r\n//                 </button>\r\n//                 <button\r\n//                   type=\"button\"\r\n//                   className=\"btn btn-secondary\"\r\n//                   onClick={() =>\r\n//                     setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" })\r\n//                   }\r\n//                 >\r\n//                   Clear\r\n//                 </button>\r\n//               </div>\r\n//             </form>\r\n\r\n//             <hr className=\"my-4\" />\r\n\r\n//             {/* Upload Document Section */}\r\n//             <div className=\"upload-section\">\r\n//               <label className=\"form-label\">Upload Document (.docx)</label>\r\n//               <input\r\n//                 type=\"file\"\r\n//                 className=\"form-control\"\r\n//                 accept=\".docx\"\r\n//                 onChange={(e) => setFile(e.target.files[0])}\r\n//               />\r\n//               <div className=\"mt-2\">\r\n//                 <button className=\"btn btn-primary\" onClick={handleUpload}>\r\n//                   Upload\r\n//                 </button>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n\r\n//           {/* Display Available Questions */}\r\n//           <div className=\"card available-questions\">\r\n//             <h5>Available Questions</h5>\r\n\r\n//             <h6 className=\"mt-3 text-primary\">MCQ Questions</h6>\r\n//             {questions.filter((q) => q.questionType === \"MCQ\").length === 0 && (\r\n//               <div className=\"text-muted\">No MCQs yet</div>\r\n//             )}\r\n//             {questions\r\n//               .filter((q) => q.questionType === \"MCQ\")\r\n//               .map((q, idx) => (\r\n//                 <div key={q._id} className=\"question-item\">\r\n//                   <strong>Q{idx + 1}:</strong> {q.questionText}\r\n//                   <div className=\"small text-muted\">\r\n//                     Options: {q.options.join(\" | \")}\r\n//                   </div>\r\n//                   <div className=\"small text-success\">\r\n//                     Correct: {q.correctAnswer}\r\n//                   </div>\r\n//                 </div>\r\n//               ))}\r\n\r\n//             <h6 className=\"mt-4 text-primary\">Theory Questions</h6>\r\n//             {questions.filter((q) => q.questionType === \"Theory\").length === 0 && (\r\n//               <div className=\"text-muted\">No theory questions yet</div>\r\n//             )}\r\n//             {questions\r\n//               .filter((q) => q.questionType === \"Theory\")\r\n//               .map((q, idx) => (\r\n//                 <div key={q._id} className=\"question-item\">\r\n//                   <strong>Q{idx + 1}:</strong> {q.questionText}\r\n//                 </div>\r\n//               ))}\r\n//           </div>\r\n//         </div>\r\n//       ) : (\r\n//         <div className=\"tab-content\">\r\n//           {/* Test Results Section */}\r\n//           <div className=\"card results-section\">\r\n//             <h5>Candidate Test Results</h5>\r\n\r\n//             {loadingResults ? (\r\n//               <div>Loading test results...</div>\r\n//             ) : results.length === 0 ? (\r\n//               <div className=\"text-muted\">No test results yet</div>\r\n//             ) : (\r\n//               <table className=\"results-table\">\r\n//                 <thead>\r\n//                   <tr>\r\n//                     <th>Name</th>\r\n//                     <th>Email</th>\r\n//                     <th>Total Questions</th>\r\n//                     <th>Correct</th>\r\n//                     <th>Score %</th>\r\n//                     <th>Submitted At</th>\r\n//                   </tr>\r\n//                 </thead>\r\n//                 <tbody>\r\n//                   {results.map((res, idx) => (\r\n//                     <tr key={idx}>\r\n//                       <td>{res.name}</td>\r\n//                       <td>{res.email}</td>\r\n//                       <td>{res.totalQuestions}</td>\r\n//                       <td>{res.correctAnswers}</td>\r\n//                       <td>{res.scorePercent}%</td>\r\n//                       <td>{new Date(res.submittedAt).toLocaleString()}</td>\r\n//                     </tr>\r\n//                   ))}\r\n//                 </tbody>\r\n//               </table>\r\n//             )}\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// // import React, { useEffect, useState } from \"react\";\r\n// // import API from \"../services/api\";\r\n// // import { useNavigate } from \"react-router-dom\";\r\n// // import \"../styles/AdminDashboard.css\";\r\n\r\n// // export default function AdminDashboard() {\r\n// //   const navigate = useNavigate();\r\n// //   const [questions, setQuestions] = useState([]);\r\n// //   const [results, setResults] = useState([]);\r\n// //   const [form, setForm] = useState({\r\n// //     questionText: \"\",\r\n// //     optionsText: \"\",\r\n// //     correctAnswer: \"\",\r\n// //   });\r\n// //   const [questionType, setQuestionType] = useState(\"MCQ\");\r\n// //   const [file, setFile] = useState(null);\r\n// //   const [loading, setLoading] = useState(false);\r\n// //   const [loadingResults, setLoadingResults] = useState(false);\r\n\r\n// //   // 🟢 Check admin login (token validation)\r\n// //   useEffect(() => {\r\n// //     const token = localStorage.getItem(\"adminToken\");\r\n// //     if (!token) navigate(\"/admin/login\");\r\n// //   }, [navigate]);\r\n\r\n// //   // 🟢 Fetch questions and test results on load\r\n// //   useEffect(() => {\r\n// //     fetchQuestions();\r\n// //     fetchResults();\r\n// //   }, []);\r\n\r\n// //   const fetchQuestions = async () => {\r\n// //     try {\r\n// //       const res = await API.get(\"/questions\");\r\n// //       setQuestions(res.data || []);\r\n// //     } catch (err) {\r\n// //       console.error(err);\r\n// //       alert(\"❌ Failed to load questions.\");\r\n// //     }\r\n// //   };\r\n\r\n// //   const fetchResults = async () => {\r\n// //     setLoadingResults(true);\r\n// //     try {\r\n// //       const res = await API.get(\"/tests\");\r\n// //       setResults(res.data || []);\r\n// //     } catch (err) {\r\n// //       console.error(err);\r\n// //       alert(\"❌ Failed to load test results.\");\r\n// //     } finally {\r\n// //       setLoadingResults(false);\r\n// //     }\r\n// //   };\r\n\r\n// //   // 🟢 Add Question Manually\r\n// //   const handleAddQuestion = async (e) => {\r\n// //     e.preventDefault();\r\n// //     const opts =\r\n// //       questionType === \"MCQ\"\r\n// //         ? form.optionsText.split(\"|\").map((s) => s.trim()).filter(Boolean)\r\n// //         : [];\r\n\r\n// //     if (!form.questionText.trim()) {\r\n// //       return alert(\"Please enter question text.\");\r\n// //     }\r\n// //     if (questionType === \"MCQ\" && (opts.length < 2 || !form.correctAnswer.trim())) {\r\n// //       return alert(\"Please enter at least 2 options and a correct answer.\");\r\n// //     }\r\n\r\n// //     setLoading(true);\r\n// //     try {\r\n// //       await API.post(\"/questions\", {\r\n// //         questionType,\r\n// //         questionText: form.questionText,\r\n// //         options: opts,\r\n// //         correctAnswer: questionType === \"MCQ\" ? form.correctAnswer : \"\",\r\n// //       });\r\n\r\n// //       setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" });\r\n// //       await fetchQuestions();\r\n// //       alert(\"✅ Question added successfully!\");\r\n// //     } catch (err) {\r\n// //       console.error(err);\r\n// //       alert(err.response?.data?.error || \"Failed to add question.\");\r\n// //     } finally {\r\n// //       setLoading(false);\r\n// //     }\r\n// //   };\r\n\r\n// //   // 🟢 Upload .docx question file\r\n// //   const handleUpload = async () => {\r\n// //     if (!file) return alert(\"Please select a file to upload.\");\r\n// //     const fd = new FormData();\r\n// //     fd.append(\"file\", file);\r\n\r\n// //     try {\r\n// //       const res = await API.post(\"/questions/upload\", fd, {\r\n// //         headers: { \"Content-Type\": \"multipart/form-data\" },\r\n// //       });\r\n// //       alert(res.data.message || \"✅ File uploaded successfully!\");\r\n// //       await fetchQuestions();\r\n// //     } catch (err) {\r\n// //       console.error(err);\r\n// //       alert(err.response?.data?.error || \"❌ File upload failed.\");\r\n// //     }\r\n// //   };\r\n\r\n// //   // 🟢 Logout\r\n// //   const handleLogout = () => {\r\n// //     localStorage.removeItem(\"adminToken\");\r\n// //     navigate(\"/admin/login\");\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div className=\"container container-center py-4 admin-dashboard\">\r\n// //       {/* Header */}\r\n// //       <div className=\"d-flex justify-content-between align-items-center mb-3 admin-header\">\r\n// //         <h2>Admin Dashboard</h2>\r\n// //         <button className=\"btn btn-outline-danger btn-sm\" onClick={handleLogout}>\r\n// //           Logout\r\n// //         </button>\r\n// //       </div>\r\n\r\n// //       {/* Add Question / Upload Section */}\r\n// //       <div className=\"card card-clean p-4 mb-4 form-section\">\r\n// //         <h5>Add questions or upload documents that will be shown to candidates.</h5>\r\n\r\n// //         {/* Add Question Form */}\r\n// //         <form onSubmit={handleAddQuestion} className=\"mt-3\">\r\n// //           <div className=\"mb-3\">\r\n// //             <label className=\"form-label\">Question Type</label>\r\n// //             <select\r\n// //               className=\"form-select\"\r\n// //               value={questionType}\r\n// //               onChange={(e) => setQuestionType(e.target.value)}\r\n// //             >\r\n// //               <option value=\"MCQ\">MCQ</option>\r\n// //               <option value=\"Theory\">Theory</option>\r\n// //             </select>\r\n// //           </div>\r\n\r\n// //           <div className=\"mb-3\">\r\n// //             <label className=\"form-label\">Question Text</label>\r\n// //             <textarea\r\n// //               className=\"form-control\"\r\n// //               rows={questionType === \"Theory\" ? 3 : 2}\r\n// //               value={form.questionText}\r\n// //               onChange={(e) => setForm({ ...form, questionText: e.target.value })}\r\n// //               placeholder=\"Enter your question here...\"\r\n// //             />\r\n// //           </div>\r\n\r\n// //           {questionType === \"MCQ\" && (\r\n// //             <>\r\n// //               <div className=\"mb-3\">\r\n// //                 <label className=\"form-label\">Options (separate by |)</label>\r\n// //                 <input\r\n// //                   className=\"form-control\"\r\n// //                   value={form.optionsText}\r\n// //                   onChange={(e) =>\r\n// //                     setForm({ ...form, optionsText: e.target.value })\r\n// //                   }\r\n// //                   placeholder=\"Option A | Option B | Option C | Option D\"\r\n// //                 />\r\n// //               </div>\r\n\r\n// //               <div className=\"mb-3\">\r\n// //                 <label className=\"form-label\">\r\n// //                   Correct Answer (exact text of one option)\r\n// //                 </label>\r\n// //                 <input\r\n// //                   className=\"form-control\"\r\n// //                   value={form.correctAnswer}\r\n// //                   onChange={(e) =>\r\n// //                     setForm({ ...form, correctAnswer: e.target.value })\r\n// //                   }\r\n// //                   placeholder=\"Enter correct answer text\"\r\n// //                 />\r\n// //               </div>\r\n// //             </>\r\n// //           )}\r\n\r\n// //           <div className=\"mb-3 d-flex gap-2\">\r\n// //             <button\r\n// //               className=\"btn btn-success\"\r\n// //               type=\"submit\"\r\n// //               disabled={loading}\r\n// //             >\r\n// //               {loading ? \"Adding...\" : \"Add Question\"}\r\n// //             </button>\r\n// //             <button\r\n// //               type=\"button\"\r\n// //               className=\"btn btn-secondary\"\r\n// //               onClick={() =>\r\n// //                 setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" })\r\n// //               }\r\n// //             >\r\n// //               Clear\r\n// //             </button>\r\n// //           </div>\r\n// //         </form>\r\n\r\n// //         <hr className=\"my-4\" />\r\n\r\n// //         {/* Upload Document Section */}\r\n// //         <div className=\"mb-3 upload-section\">\r\n// //           <label className=\"form-label\">Upload Document (.docx)</label>\r\n// //           <input\r\n// //             type=\"file\"\r\n// //             className=\"form-control\"\r\n// //             accept=\".docx\"\r\n// //             onChange={(e) => setFile(e.target.files[0])}\r\n// //           />\r\n// //           <div className=\"mt-2\">\r\n// //             <button className=\"btn btn-primary\" onClick={handleUpload}>\r\n// //               Upload\r\n// //             </button>\r\n// //           </div>\r\n// //         </div>\r\n// //       </div>\r\n\r\n// //       {/* Available Questions */}\r\n// //       <div className=\"card card-clean p-4 mb-4 available-questions\">\r\n// //         <h5>Available Questions</h5>\r\n\r\n// //         {/* MCQ Section */}\r\n// //         <h6 className=\"mt-3 text-primary\">MCQ Questions</h6>\r\n// //         {questions.filter((q) => q.questionType === \"MCQ\").length === 0 && (\r\n// //           <div className=\"text-muted\">No MCQs yet</div>\r\n// //         )}\r\n// //         {questions\r\n// //           .filter((q) => q.questionType === \"MCQ\")\r\n// //           .map((q, idx) => (\r\n// //             <div key={q._id} className=\"mb-3 border-bottom pb-2\">\r\n// //               <strong>Q{idx + 1}:</strong> {q.questionText}\r\n// //               <div className=\"small text-muted\">\r\n// //                 Options: {q.options.join(\" | \")}\r\n// //               </div>\r\n// //               <div className=\"small text-success\">\r\n// //                 Correct: {q.correctAnswer}\r\n// //               </div>\r\n// //             </div>\r\n// //           ))}\r\n\r\n// //         {/* Theory Section */}\r\n// //         <h6 className=\"mt-4 text-primary\">Theory Questions</h6>\r\n// //         {questions.filter((q) => q.questionType === \"Theory\").length === 0 && (\r\n// //           <div className=\"text-muted\">No theory questions yet</div>\r\n// //         )}\r\n// //         {questions\r\n// //           .filter((q) => q.questionType === \"Theory\")\r\n// //           .map((q, idx) => (\r\n// //             <div key={q._id} className=\"mb-3 border-bottom pb-2\">\r\n// //               <strong>Q{idx + 1}:</strong> {q.questionText}\r\n// //             </div>\r\n// //           ))}\r\n// //       </div>\r\n\r\n// //       {/* Test Results Section */}\r\n// //       <div className=\"card card-clean p-4 mb-4 results-section\">\r\n// //         <h5>Candidate Test Results</h5>\r\n\r\n// //         {loadingResults ? (\r\n// //           <div>Loading test results...</div>\r\n// //         ) : results.length === 0 ? (\r\n// //           <div className=\"text-muted\">No test results yet</div>\r\n// //         ) : (\r\n// //           <table className=\"results-table\">\r\n// //             <thead>\r\n// //               <tr>\r\n// //                 <th>Name</th>\r\n// //                 <th>Email</th>\r\n// //                 <th>Total Questions</th>\r\n// //                 <th>Correct</th>\r\n// //                 <th>Score %</th>\r\n// //                 <th>Submitted At</th>\r\n// //               </tr>\r\n// //             </thead>\r\n// //             <tbody>\r\n// //               {results.map((res, idx) => (\r\n// //                 <tr key={idx}>\r\n// //                   <td>{res.name}</td>\r\n// //                   <td>{res.email}</td>\r\n// //                   <td>{res.totalQuestions}</td>\r\n// //                   <td>{res.correctAnswers}</td>\r\n// //                   <td>{res.scorePercent}%</td>\r\n// //                   <td>{new Date(res.submittedAt).toLocaleString()}</td>\r\n// //                 </tr>\r\n// //               ))}\r\n// //             </tbody>\r\n// //           </table>\r\n// //         )}\r\n// //       </div>\r\n// //     </div>\r\n// //   );\r\n// // }\r\n\r\n// // // import React, { useEffect, useState } from \"react\";\r\n// // // import API from \"../services/api\";\r\n// // // import { useNavigate } from \"react-router-dom\";\r\n// // // import \"../styles/AdminDashboard.css\";\r\n\r\n// // // export default function AdminDashboard() {\r\n// // //   const navigate = useNavigate();\r\n// // //   const [questions, setQuestions] = useState([]);\r\n// // //   const [form, setForm] = useState({\r\n// // //     questionText: \"\",\r\n// // //     optionsText: \"\",\r\n// // //     correctAnswer: \"\",\r\n// // //   });\r\n// // //   const [questionType, setQuestionType] = useState(\"MCQ\");\r\n// // //   const [file, setFile] = useState(null);\r\n// // //   const [loading, setLoading] = useState(false);\r\n\r\n// // //   // 🟢 Check admin login (token validation)\r\n// // //   useEffect(() => {\r\n// // //     const token = localStorage.getItem(\"adminToken\");\r\n// // //     if (!token) navigate(\"/admin/login\");\r\n// // //   }, [navigate]);\r\n\r\n// // //   // 🟢 Fetch questions from DB\r\n// // //   useEffect(() => {\r\n// // //     fetchQuestions();\r\n// // //   }, []);\r\n\r\n// // //   const fetchQuestions = async () => {\r\n// // //     try {\r\n// // //       const res = await API.get(\"/questions\");\r\n// // //       setQuestions(res.data || []);\r\n// // //     } catch (err) {\r\n// // //       console.error(err);\r\n// // //       alert(\"Failed to load questions.\");\r\n// // //     }\r\n// // //   };\r\n\r\n// // //   // 🟢 Add Question Manually\r\n// // //   const handleAddQuestion = async (e) => {\r\n// // //     e.preventDefault();\r\n// // //     const opts =\r\n// // //       questionType === \"MCQ\"\r\n// // //         ? form.optionsText.split(\"|\").map((s) => s.trim()).filter(Boolean)\r\n// // //         : [];\r\n\r\n// // //     if (!form.questionText.trim()) {\r\n// // //       return alert(\"Please enter question text.\");\r\n// // //     }\r\n// // //     if (questionType === \"MCQ\" && (opts.length < 2 || !form.correctAnswer.trim())) {\r\n// // //       return alert(\"Please enter at least 2 options and a correct answer.\");\r\n// // //     }\r\n\r\n// // //     setLoading(true);\r\n// // //     try {\r\n// // //       await API.post(\"/questions\", {\r\n// // //         questionType,\r\n// // //         questionText: form.questionText,\r\n// // //         options: opts,\r\n// // //         correctAnswer: questionType === \"MCQ\" ? form.correctAnswer : \"\",\r\n// // //       });\r\n\r\n// // //       setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" });\r\n// // //       await fetchQuestions();\r\n// // //       alert(\"✅ Question added successfully!\");\r\n// // //     } catch (err) {\r\n// // //       console.error(err);\r\n// // //       alert(err.response?.data?.error || \"Failed to add question.\");\r\n// // //     } finally {\r\n// // //       setLoading(false);\r\n// // //     }\r\n// // //   };\r\n\r\n// // //   // 🟢 Upload .docx question file\r\n// // //   const handleUpload = async () => {\r\n// // //     if (!file) return alert(\"Please select a file to upload.\");\r\n// // //     const fd = new FormData();\r\n// // //     fd.append(\"file\", file);\r\n\r\n// // //     try {\r\n// // //       const res = await API.post(\"/questions/upload\", fd, {\r\n// // //         headers: { \"Content-Type\": \"multipart/form-data\" },\r\n// // //       });\r\n// // //       alert(res.data.message || \"File uploaded successfully!\");\r\n// // //       await fetchQuestions();\r\n// // //     } catch (err) {\r\n// // //       console.error(err);\r\n// // //       alert(err.response?.data?.error || \"File upload failed.\");\r\n// // //     }\r\n// // //   };\r\n\r\n// // //   // 🟢 Logout\r\n// // //   const handleLogout = () => {\r\n// // //     localStorage.removeItem(\"adminToken\");\r\n// // //     navigate(\"/admin/login\");\r\n// // //   };\r\n\r\n// // //   return (\r\n// // //     <div className=\"container container-center py-4\">\r\n// // //       <div className=\"d-flex justify-content-between align-items-center mb-3\">\r\n// // //         <h2>Admin Dashboard</h2>\r\n// // //         <button className=\"btn btn-outline-danger btn-sm\" onClick={handleLogout}>\r\n// // //           Logout\r\n// // //         </button>\r\n// // //       </div>\r\n\r\n// // //       <div className=\"card card-clean p-4 mb-4\">\r\n// // //         <h5>Add questions or upload documents that will be shown to candidates.</h5>\r\n\r\n// // //         {/* Add Question Form */}\r\n// // //         <form onSubmit={handleAddQuestion} className=\"mt-3\">\r\n// // //           <div className=\"mb-3\">\r\n// // //             <label className=\"form-label\">Question Type</label>\r\n// // //             <select\r\n// // //               className=\"form-select\"\r\n// // //               value={questionType}\r\n// // //               onChange={(e) => setQuestionType(e.target.value)}\r\n// // //             >\r\n// // //               <option value=\"MCQ\">MCQ</option>\r\n// // //               <option value=\"Theory\">Theory</option>\r\n// // //             </select>\r\n// // //           </div>\r\n\r\n// // //           <div className=\"mb-3\">\r\n// // //             <label className=\"form-label\">Question Text</label>\r\n// // //             <textarea\r\n// // //               className=\"form-control\"\r\n// // //               rows={questionType === \"Theory\" ? 3 : 2}\r\n// // //               value={form.questionText}\r\n// // //               onChange={(e) => setForm({ ...form, questionText: e.target.value })}\r\n// // //               placeholder=\"Enter your question here...\"\r\n// // //             />\r\n// // //           </div>\r\n\r\n// // //           {questionType === \"MCQ\" && (\r\n// // //             <>\r\n// // //               <div className=\"mb-3\">\r\n// // //                 <label className=\"form-label\">Options (separate by |)</label>\r\n// // //                 <input\r\n// // //                   className=\"form-control\"\r\n// // //                   value={form.optionsText}\r\n// // //                   onChange={(e) =>\r\n// // //                     setForm({ ...form, optionsText: e.target.value })\r\n// // //                   }\r\n// // //                   placeholder=\"Option A | Option B | Option C | Option D\"\r\n// // //                 />\r\n// // //               </div>\r\n\r\n// // //               <div className=\"mb-3\">\r\n// // //                 <label className=\"form-label\">\r\n// // //                   Correct Answer (exact text of one option)\r\n// // //                 </label>\r\n// // //                 <input\r\n// // //                   className=\"form-control\"\r\n// // //                   value={form.correctAnswer}\r\n// // //                   onChange={(e) =>\r\n// // //                     setForm({ ...form, correctAnswer: e.target.value })\r\n// // //                   }\r\n// // //                   placeholder=\"Enter correct answer text\"\r\n// // //                 />\r\n// // //               </div>\r\n// // //             </>\r\n// // //           )}\r\n\r\n// // //           <div className=\"mb-3 d-flex gap-2\">\r\n// // //             <button\r\n// // //               className=\"btn btn-success\"\r\n// // //               type=\"submit\"\r\n// // //               disabled={loading}\r\n// // //             >\r\n// // //               {loading ? \"Adding...\" : \"Add Question\"}\r\n// // //             </button>\r\n// // //             <button\r\n// // //               type=\"button\"\r\n// // //               className=\"btn btn-secondary\"\r\n// // //               onClick={() =>\r\n// // //                 setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" })\r\n// // //               }\r\n// // //             >\r\n// // //               Clear\r\n// // //             </button>\r\n// // //           </div>\r\n// // //         </form>\r\n\r\n// // //         <hr className=\"my-4\" />\r\n\r\n// // //         {/* Upload Document Section */}\r\n// // //         <div className=\"mb-3\">\r\n// // //           <label className=\"form-label\">Upload Document (.docx)</label>\r\n// // //           <input\r\n// // //             type=\"file\"\r\n// // //             className=\"form-control\"\r\n// // //             accept=\".docx\"\r\n// // //             onChange={(e) => setFile(e.target.files[0])}\r\n// // //           />\r\n// // //           <div className=\"mt-2\">\r\n// // //             <button className=\"btn btn-primary\" onClick={handleUpload}>\r\n// // //               Upload\r\n// // //             </button>\r\n// // //           </div>\r\n// // //         </div>\r\n// // //       </div>\r\n\r\n// // //       {/* Display All Questions */}\r\n// // //       <div className=\"card card-clean p-4\">\r\n// // //         <h5>Available Questions</h5>\r\n\r\n// // //         {/* MCQ Section */}\r\n// // //         <h6 className=\"mt-3 text-primary\">MCQ Questions</h6>\r\n// // //         {questions.filter((q) => q.questionType === \"MCQ\").length === 0 && (\r\n// // //           <div className=\"text-muted\">No MCQs yet</div>\r\n// // //         )}\r\n// // //         {questions\r\n// // //           .filter((q) => q.questionType === \"MCQ\")\r\n// // //           .map((q, idx) => (\r\n// // //             <div key={q._id} className=\"mb-3 border-bottom pb-2\">\r\n// // //               <strong>Q{idx + 1}:</strong> {q.questionText}\r\n// // //               <div className=\"small text-muted\">\r\n// // //                 Options: {q.options.join(\" | \")}\r\n// // //               </div>\r\n// // //               <div className=\"small text-success\">\r\n// // //                 Correct: {q.correctAnswer}\r\n// // //               </div>\r\n// // //             </div>\r\n// // //           ))}\r\n\r\n// // //         {/* Theory Section */}\r\n// // //         <h6 className=\"mt-4 text-primary\">Theory Questions</h6>\r\n// // //         {questions.filter((q) => q.questionType === \"Theory\").length === 0 && (\r\n// // //           <div className=\"text-muted\">No theory questions yet</div>\r\n// // //         )}\r\n// // //         {questions\r\n// // //           .filter((q) => q.questionType === \"Theory\")\r\n// // //           .map((q, idx) => (\r\n// // //             <div key={q._id} className=\"mb-3 border-bottom pb-2\">\r\n// // //               <strong>Q{idx + 1}:</strong> {q.questionText}\r\n// // //             </div>\r\n// // //           ))}\r\n// // //       </div>\r\n// // //     </div>\r\n// // //   );\r\n// // // }\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,GAAG,MAAM,iBAAiB;AACjC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAO,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEtC,eAAe,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACvC,MAAMC,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACc,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,WAAW,CAAC;EACvD,MAAM,CAACgB,IAAI,EAAEC,OAAO,CAAC,GAAGjB,QAAQ,CAAC;IAC/BkB,YAAY,EAAE,EAAE;IAChBC,WAAW,EAAE,EAAE;IACfC,aAAa,EAAE;EACjB,CAAC,CAAC;EACF,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACuB,IAAI,EAAEC,OAAO,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACyB,OAAO,EAAEC,UAAU,CAAC,GAAG1B,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAAC2B,cAAc,EAAEC,iBAAiB,CAAC,GAAG5B,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAAC6B,SAAS,EAAEC,YAAY,CAAC,GAAG9B,QAAQ,CAAC,IAAI,CAAC;;EAEhD;EACAD,SAAS,CAAC,MAAM;IACd,MAAMgC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IAChD,IAAI,CAACF,KAAK,EAAEtB,QAAQ,CAAC,cAAc,CAAC;EACtC,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;;EAEd;EACAV,SAAS,CAAC,MAAM;IACdmC,cAAc,CAAC,CAAC;IAChBC,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMD,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACF,MAAME,GAAG,GAAG,MAAMnC,GAAG,CAACoC,GAAG,CAAC,YAAY,CAAC;MACvC1B,YAAY,CAACyB,GAAG,CAACE,IAAI,IAAI,EAAE,CAAC;IAC9B,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;MAClBG,KAAK,CAAC,6BAA6B,CAAC;IACtC;EACF,CAAC;EAED,MAAMP,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/BP,iBAAiB,CAAC,IAAI,CAAC;IACvB,IAAI;MACF,MAAMQ,GAAG,GAAG,MAAMnC,GAAG,CAACoC,GAAG,CAAC,QAAQ,CAAC;MACnCxB,UAAU,CAACuB,GAAG,CAACE,IAAI,IAAI,EAAE,CAAC;IAC5B,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;MAClBG,KAAK,CAAC,gCAAgC,CAAC;IACzC,CAAC,SAAS;MACRd,iBAAiB,CAAC,KAAK,CAAC;IAC1B;EACF,CAAC;;EAED;EACA,MAAMe,iBAAiB,GAAG,MAAOC,CAAC,IAAK;IACrCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,MAAMC,IAAI,GACRzB,YAAY,KAAK,KAAK,GAClBL,IAAI,CAACG,WAAW,CAAC4B,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAACC,MAAM,CAACC,OAAO,CAAC,GAChE,EAAE;IAER,IAAI,CAACpC,IAAI,CAACE,YAAY,CAACgC,IAAI,CAAC,CAAC,EAAE;MAC7B,OAAOR,KAAK,CAAC,6BAA6B,CAAC;IAC7C;IAEAhB,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACF,IAAIG,SAAS,EAAE;QACb,MAAM5B,GAAG,CAACoD,GAAG,CAAC,cAAcxB,SAAS,EAAE,EAAE;UACvCR,YAAY;UACZH,YAAY,EAAEF,IAAI,CAACE,YAAY;UAC/BoC,OAAO,EAAER,IAAI;UACb1B,aAAa,EAAEC,YAAY,KAAK,KAAK,GAAGL,IAAI,CAACI,aAAa,GAAG;QAC/D,CAAC,CAAC;QACFsB,KAAK,CAAC,kCAAkC,CAAC;MAC3C,CAAC,MAAM;QACL,MAAMzC,GAAG,CAACsD,IAAI,CAAC,YAAY,EAAE;UAC3BlC,YAAY;UACZH,YAAY,EAAEF,IAAI,CAACE,YAAY;UAC/BoC,OAAO,EAAER,IAAI;UACb1B,aAAa,EAAEC,YAAY,KAAK,KAAK,GAAGL,IAAI,CAACI,aAAa,GAAG;QAC/D,CAAC,CAAC;QACFsB,KAAK,CAAC,gCAAgC,CAAC;MACzC;MAEAzB,OAAO,CAAC;QAAEC,YAAY,EAAE,EAAE;QAAEC,WAAW,EAAE,EAAE;QAAEC,aAAa,EAAE;MAAG,CAAC,CAAC;MACjEU,YAAY,CAAC,IAAI,CAAC;MAClB,MAAMI,cAAc,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOK,GAAG,EAAE;MAAA,IAAAiB,aAAA,EAAAC,kBAAA;MACZjB,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;MAClBG,KAAK,CAAC,EAAAc,aAAA,GAAAjB,GAAG,CAACmB,QAAQ,cAAAF,aAAA,wBAAAC,kBAAA,GAAZD,aAAA,CAAclB,IAAI,cAAAmB,kBAAA,uBAAlBA,kBAAA,CAAoBhB,KAAK,KAAI,qBAAqB,CAAC;IAC3D,CAAC,SAAS;MACRf,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;;EAED;EACA,MAAMiC,YAAY,GAAG,MAAOC,EAAE,IAAK;IACjC,IAAI,CAACC,MAAM,CAACC,OAAO,CAAC,gDAAgD,CAAC,EAAE;IAEvE,IAAI;MACF,MAAM7D,GAAG,CAAC8D,MAAM,CAAC,cAAcH,EAAE,EAAE,CAAC;MACpClB,KAAK,CAAC,oCAAoC,CAAC;MAC3C,MAAMR,cAAc,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOK,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;MAClBG,KAAK,CAAC,8BAA8B,CAAC;IACvC;EACF,CAAC;;EAED;EACA,MAAMsB,UAAU,GAAIC,CAAC,IAAK;IACxBnC,YAAY,CAACmC,CAAC,CAACC,GAAG,CAAC;IACnB5C,eAAe,CAAC2C,CAAC,CAAC5C,YAAY,CAAC;IAC/BJ,OAAO,CAAC;MACNC,YAAY,EAAE+C,CAAC,CAAC/C,YAAY;MAC5BC,WAAW,EAAE8C,CAAC,CAACX,OAAO,GAAGW,CAAC,CAACX,OAAO,CAACa,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE;MACnD/C,aAAa,EAAE6C,CAAC,CAAC7C,aAAa,IAAI;IACpC,CAAC,CAAC;IACFyC,MAAM,CAACO,QAAQ,CAAC;MAAEC,GAAG,EAAE,CAAC;MAAEC,QAAQ,EAAE;IAAS,CAAC,CAAC;EACjD,CAAC;;EAED;EACA,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI,CAAChD,IAAI,EAAE,OAAOmB,KAAK,CAAC,iCAAiC,CAAC;IAC1D,MAAM8B,EAAE,GAAG,IAAIC,QAAQ,CAAC,CAAC;IACzBD,EAAE,CAACE,MAAM,CAAC,MAAM,EAAEnD,IAAI,CAAC;IAEvB,IAAI;MACF,MAAMa,GAAG,GAAG,MAAMnC,GAAG,CAACsD,IAAI,CAAC,mBAAmB,EAAEiB,EAAE,EAAE;QAClDG,OAAO,EAAE;UAAE,cAAc,EAAE;QAAsB;MACnD,CAAC,CAAC;MACFjC,KAAK,CAACN,GAAG,CAACE,IAAI,CAACsC,OAAO,IAAI,+BAA+B,CAAC;MAC1D,MAAM1C,cAAc,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOK,GAAG,EAAE;MAAA,IAAAsC,cAAA,EAAAC,mBAAA;MACZtC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;MAClBG,KAAK,CAAC,EAAAmC,cAAA,GAAAtC,GAAG,CAACmB,QAAQ,cAAAmB,cAAA,wBAAAC,mBAAA,GAAZD,cAAA,CAAcvC,IAAI,cAAAwC,mBAAA,uBAAlBA,mBAAA,CAAoBrC,KAAK,KAAI,uBAAuB,CAAC;IAC7D;EACF,CAAC;EAED,MAAMsC,YAAY,GAAGA,CAAA,KAAM;IACzB/C,YAAY,CAACgD,UAAU,CAAC,YAAY,CAAC;IACrCvE,QAAQ,CAAC,cAAc,CAAC;EAC1B,CAAC;EAED,oBACEL,OAAA;IAAK6E,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAE9B9E,OAAA;MAAK6E,SAAS,EAAC,cAAc;MAAAC,QAAA,gBAC3B9E,OAAA;QAAA8E,QAAA,EAAI;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxBlF,OAAA;QAAQ6E,SAAS,EAAC,YAAY;QAACM,OAAO,EAAER,YAAa;QAAAG,QAAA,EAAC;MAEtD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eAGNlF,OAAA;MAAK6E,SAAS,EAAC,aAAa;MAAAC,QAAA,gBAC1B9E,OAAA;QACE6E,SAAS,EAAE,WAAWnE,SAAS,KAAK,WAAW,GAAG,QAAQ,GAAG,EAAE,EAAG;QAClEyE,OAAO,EAAEA,CAAA,KAAMxE,YAAY,CAAC,WAAW,CAAE;QAAAmE,QAAA,EAC1C;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTlF,OAAA;QACE6E,SAAS,EAAE,WAAWnE,SAAS,KAAK,SAAS,GAAG,QAAQ,GAAG,EAAE,EAAG;QAChEyE,OAAO,EAAEA,CAAA,KAAMxE,YAAY,CAAC,SAAS,CAAE;QAAAmE,QAAA,EACxC;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,EAGLxE,SAAS,KAAK,WAAW,gBACxBV,OAAA;MAAK6E,SAAS,EAAC,aAAa;MAAAC,QAAA,gBAC1B9E,OAAA;QAAK6E,SAAS,EAAC,mBAAmB;QAAAC,QAAA,gBAChC9E,OAAA;UAAA8E,QAAA,EAAKrD,SAAS,GAAG,kBAAkB,GAAG;QAA2B;UAAAsD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAEvElF,OAAA;UAAMoF,QAAQ,EAAE7C,iBAAkB;UAAAuC,QAAA,gBAChC9E,OAAA;YAAK6E,SAAS,EAAC,MAAM;YAAAC,QAAA,gBACnB9E,OAAA;cAAO6E,SAAS,EAAC,YAAY;cAAAC,QAAA,EAAC;YAAa;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eACnDlF,OAAA;cACE6E,SAAS,EAAC,aAAa;cACvBQ,KAAK,EAAEpE,YAAa;cACpBqE,QAAQ,EAAG9C,CAAC,IAAKtB,eAAe,CAACsB,CAAC,CAAC+C,MAAM,CAACF,KAAK,CAAE;cAAAP,QAAA,gBAEjD9E,OAAA;gBAAQqF,KAAK,EAAC,KAAK;gBAAAP,QAAA,EAAC;cAAG;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eAChClF,OAAA;gBAAQqF,KAAK,EAAC,QAAQ;gBAAAP,QAAA,EAAC;cAAM;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAChC,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN,CAAC,eAENlF,OAAA;YAAK6E,SAAS,EAAC,MAAM;YAAAC,QAAA,gBACnB9E,OAAA;cAAO6E,SAAS,EAAC,YAAY;cAAAC,QAAA,EAAC;YAAa;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eACnDlF,OAAA;cACE6E,SAAS,EAAC,cAAc;cACxBW,IAAI,EAAEvE,YAAY,KAAK,QAAQ,GAAG,CAAC,GAAG,CAAE;cACxCoE,KAAK,EAAEzE,IAAI,CAACE,YAAa;cACzBwE,QAAQ,EAAG9C,CAAC,IACV3B,OAAO,CAAC;gBAAE,GAAGD,IAAI;gBAAEE,YAAY,EAAE0B,CAAC,CAAC+C,MAAM,CAACF;cAAM,CAAC,CAClD;cACDI,WAAW,EAAC;YAA6B;cAAAV,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC1C,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC,EAELjE,YAAY,KAAK,KAAK,iBACrBjB,OAAA,CAAAE,SAAA;YAAA4E,QAAA,gBACE9E,OAAA;cAAK6E,SAAS,EAAC,MAAM;cAAAC,QAAA,gBACnB9E,OAAA;gBAAO6E,SAAS,EAAC,YAAY;gBAAAC,QAAA,EAAC;cAAuB;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC,eAC7DlF,OAAA;gBACE6E,SAAS,EAAC,cAAc;gBACxBQ,KAAK,EAAEzE,IAAI,CAACG,WAAY;gBACxBuE,QAAQ,EAAG9C,CAAC,IACV3B,OAAO,CAAC;kBAAE,GAAGD,IAAI;kBAAEG,WAAW,EAAEyB,CAAC,CAAC+C,MAAM,CAACF;gBAAM,CAAC,CACjD;gBACDI,WAAW,EAAC;cAA2C;gBAAAV,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACxD,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACC,CAAC,eAENlF,OAAA;cAAK6E,SAAS,EAAC,MAAM;cAAAC,QAAA,gBACnB9E,OAAA;gBAAO6E,SAAS,EAAC,YAAY;gBAAAC,QAAA,EAAC;cAAc;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC,eACpDlF,OAAA;gBACE6E,SAAS,EAAC,cAAc;gBACxBQ,KAAK,EAAEzE,IAAI,CAACI,aAAc;gBAC1BsE,QAAQ,EAAG9C,CAAC,IACV3B,OAAO,CAAC;kBAAE,GAAGD,IAAI;kBAAEI,aAAa,EAAEwB,CAAC,CAAC+C,MAAM,CAACF;gBAAM,CAAC,CACnD;gBACDI,WAAW,EAAC;cAA2B;gBAAAV,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACxC,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACC,CAAC;UAAA,eACN,CACH,eAEDlF,OAAA;YAAK6E,SAAS,EAAC,cAAc;YAAAC,QAAA,gBAC3B9E,OAAA;cAAQ6E,SAAS,EAAC,iBAAiB;cAACa,IAAI,EAAC,QAAQ;cAACC,QAAQ,EAAEtE,OAAQ;cAAAyD,QAAA,EACjEzD,OAAO,GACJ,WAAW,GACXI,SAAS,GACT,iBAAiB,GACjB;YAAc;cAAAsD,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACZ,CAAC,eACTlF,OAAA;cACE0F,IAAI,EAAC,QAAQ;cACbb,SAAS,EAAC,mBAAmB;cAC7BM,OAAO,EAAEA,CAAA,KAAM;gBACbtE,OAAO,CAAC;kBACNC,YAAY,EAAE,EAAE;kBAChBC,WAAW,EAAE,EAAE;kBACfC,aAAa,EAAE;gBACjB,CAAC,CAAC;gBACFU,YAAY,CAAC,IAAI,CAAC;cACpB,CAAE;cAAAoD,QAAA,EACH;YAED;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF,CAAC,eAEPlF,OAAA;UAAI6E,SAAS,EAAC;QAAM;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAGvBlF,OAAA;UAAK6E,SAAS,EAAC,gBAAgB;UAAAC,QAAA,gBAC7B9E,OAAA;YAAO6E,SAAS,EAAC,YAAY;YAAAC,QAAA,EAAC;UAAuB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC7DlF,OAAA;YACE0F,IAAI,EAAC,MAAM;YACXb,SAAS,EAAC,cAAc;YACxBe,MAAM,EAAC,OAAO;YACdN,QAAQ,EAAG9C,CAAC,IAAKpB,OAAO,CAACoB,CAAC,CAAC+C,MAAM,CAACM,KAAK,CAAC,CAAC,CAAC;UAAE;YAAAd,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC7C,CAAC,eACFlF,OAAA;YAAK6E,SAAS,EAAC,MAAM;YAAAC,QAAA,eACnB9E,OAAA;cAAQ6E,SAAS,EAAC,iBAAiB;cAACM,OAAO,EAAEhB,YAAa;cAAAW,QAAA,EAAC;YAE3D;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eAGNlF,OAAA;QAAK6E,SAAS,EAAC,0BAA0B;QAAAC,QAAA,gBACvC9E,OAAA;UAAA8E,QAAA,EAAI;QAAmB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAG5BlF,OAAA;UAAI6E,SAAS,EAAC,mBAAmB;UAAAC,QAAA,EAAC;QAAa;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EACnD5E,SAAS,CAACyC,MAAM,CAAEc,CAAC,IAAKA,CAAC,CAAC5C,YAAY,KAAK,KAAK,CAAC,CAAC6E,MAAM,KAAK,CAAC,iBAC7D9F,OAAA;UAAK6E,SAAS,EAAC,YAAY;UAAAC,QAAA,EAAC;QAAW;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAC7C,EACA5E,SAAS,CACPyC,MAAM,CAAEc,CAAC,IAAKA,CAAC,CAAC5C,YAAY,KAAK,KAAK,CAAC,CACvC2B,GAAG,CAAC,CAACiB,CAAC,EAAEkC,GAAG,kBACV/F,OAAA;UAAiB6E,SAAS,EAAC,eAAe;UAAAC,QAAA,gBACxC9E,OAAA;YAAA8E,QAAA,GAAQ,GAAC,EAACiB,GAAG,GAAG,CAAC,EAAC,GAAC;UAAA;YAAAhB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAACrB,CAAC,CAAC/C,YAAY,eAC5Cd,OAAA;YAAK6E,SAAS,EAAC,kBAAkB;YAAAC,QAAA,GAAC,WACvB,EAACjB,CAAC,CAACX,OAAO,CAACa,IAAI,CAAC,KAAK,CAAC;UAAA;YAAAgB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC5B,CAAC,eACNlF,OAAA;YAAK6E,SAAS,EAAC,oBAAoB;YAAAC,QAAA,GAAC,WACzB,EAACjB,CAAC,CAAC7C,aAAa;UAAA;YAAA+D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACtB,CAAC,eACNlF,OAAA;YAAK6E,SAAS,EAAC,gBAAgB;YAAAC,QAAA,gBAC7B9E,OAAA;cACE6E,SAAS,EAAC,wBAAwB;cAClCM,OAAO,EAAEA,CAAA,KAAMvB,UAAU,CAACC,CAAC,CAAE;cAAAiB,QAAA,EAC9B;YAED;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACTlF,OAAA;cACE6E,SAAS,EAAC,uBAAuB;cACjCM,OAAO,EAAEA,CAAA,KAAM5B,YAAY,CAACM,CAAC,CAACC,GAAG,CAAE;cAAAgB,QAAA,EACpC;YAED;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN,CAAC;QAAA,GArBErB,CAAC,CAACC,GAAG;UAAAiB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAsBV,CACN,CAAC,eAGJlF,OAAA;UAAI6E,SAAS,EAAC,mBAAmB;UAAAC,QAAA,EAAC;QAAgB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EACtD5E,SAAS,CAACyC,MAAM,CAAEc,CAAC,IAAKA,CAAC,CAAC5C,YAAY,KAAK,QAAQ,CAAC,CAAC6E,MAAM,KAAK,CAAC,iBAChE9F,OAAA;UAAK6E,SAAS,EAAC,YAAY;UAAAC,QAAA,EAAC;QAAuB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CACzD,EACA5E,SAAS,CACPyC,MAAM,CAAEc,CAAC,IAAKA,CAAC,CAAC5C,YAAY,KAAK,QAAQ,CAAC,CAC1C2B,GAAG,CAAC,CAACiB,CAAC,EAAEkC,GAAG,KAAK;UACf,MAAMC,cAAc,GAAGxF,OAAO,CAC3ByF,OAAO,CAAEC,CAAC,IAAKA,CAAC,CAACC,OAAO,IAAI,EAAE,CAAC,CAC/BpD,MAAM,CACJqD,CAAC,IACAA,CAAC,CAACC,QAAQ,CAACvD,IAAI,CAAC,CAAC,CAACwD,WAAW,CAAC,CAAC,KAC/BzC,CAAC,CAAC/C,YAAY,CAACgC,IAAI,CAAC,CAAC,CAACwD,WAAW,CAAC,CACtC,CAAC;UACH,oBACEtG,OAAA;YAAiB6E,SAAS,EAAC,eAAe;YAAAC,QAAA,gBACxC9E,OAAA;cAAA8E,QAAA,GAAQ,GAAC,EAACiB,GAAG,GAAG,CAAC,EAAC,GAAC;YAAA;cAAAhB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,EAACrB,CAAC,CAAC/C,YAAY,EAC3CkF,cAAc,CAACF,MAAM,GAAG,CAAC,gBACxB9F,OAAA;cAAK6E,SAAS,EAAC,gBAAgB;cAAAC,QAAA,gBAC7B9E,OAAA;gBAAA8E,QAAA,EAAG;cAAQ;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAG,CAAC,eACflF,OAAA;gBAAA8E,QAAA,EACGkB,cAAc,CAACpD,GAAG,CAAC,CAACwD,CAAC,EAAEG,CAAC,kBACvBvG,OAAA;kBAAA8E,QAAA,EAAasB,CAAC,CAACI;gBAAU,GAAhBD,CAAC;kBAAAxB,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAoB,CAC/B;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACA,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACF,CAAC,gBAENlF,OAAA;cAAK6E,SAAS,EAAC,kBAAkB;cAAAC,QAAA,EAAC;YAAc;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CACtD,eACDlF,OAAA;cAAK6E,SAAS,EAAC,gBAAgB;cAAAC,QAAA,gBAC7B9E,OAAA;gBACE6E,SAAS,EAAC,wBAAwB;gBAClCM,OAAO,EAAEA,CAAA,KAAMvB,UAAU,CAACC,CAAC,CAAE;gBAAAiB,QAAA,EAC9B;cAED;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eACTlF,OAAA;gBACE6E,SAAS,EAAC,uBAAuB;gBACjCM,OAAO,EAAEA,CAAA,KAAM5B,YAAY,CAACM,CAAC,CAACC,GAAG,CAAE;gBAAAgB,QAAA,EACpC;cAED;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACN,CAAC;UAAA,GA3BErB,CAAC,CAACC,GAAG;YAAAiB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OA4BV,CAAC;QAEV,CAAC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;IAAA;IAEN;IACAlF,OAAA;MAAK6E,SAAS,EAAC,aAAa;MAAAC,QAAA,eAC1B9E,OAAA;QAAK6E,SAAS,EAAC,sBAAsB;QAAAC,QAAA,gBACnC9E,OAAA;UAAA8E,QAAA,EAAI;QAAsB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EAC9B3D,cAAc,gBACbvB,OAAA;UAAA8E,QAAA,EAAK;QAAuB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,GAChC1E,OAAO,CAACsF,MAAM,KAAK,CAAC,gBACtB9F,OAAA;UAAK6E,SAAS,EAAC,YAAY;UAAAC,QAAA,EAAC;QAAmB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,gBAErDlF,OAAA;UAAO6E,SAAS,EAAC,eAAe;UAAAC,QAAA,gBAC9B9E,OAAA;YAAA8E,QAAA,eACE9E,OAAA;cAAA8E,QAAA,gBACE9E,OAAA;gBAAA8E,QAAA,EAAI;cAAI;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACblF,OAAA;gBAAA8E,QAAA,EAAI;cAAK;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACdlF,OAAA;gBAAA8E,QAAA,EAAI;cAAK;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACdlF,OAAA;gBAAA8E,QAAA,EAAI;cAAO;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eAChBlF,OAAA;gBAAA8E,QAAA,EAAI;cAAO;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eAChBlF,OAAA;gBAAA8E,QAAA,EAAI;cAAY;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACnB;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC,eACRlF,OAAA;YAAA8E,QAAA,EACGtE,OAAO,CAACoC,GAAG,CAAC,CAACZ,GAAG,EAAE+D,GAAG,kBACpB/F,OAAA;cAAA8E,QAAA,gBACE9E,OAAA;gBAAA8E,QAAA,EAAK9C,GAAG,CAACyE;cAAI;gBAAA1B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACnBlF,OAAA;gBAAA8E,QAAA,EAAK9C,GAAG,CAAC0E;cAAK;gBAAA3B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACpBlF,OAAA;gBAAA8E,QAAA,EAAK9C,GAAG,CAAC2E;cAAc;gBAAA5B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC7BlF,OAAA;gBAAA8E,QAAA,EAAK9C,GAAG,CAAC4E;cAAc;gBAAA7B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC7BlF,OAAA;gBAAA8E,QAAA,GAAK9C,GAAG,CAAC6E,YAAY,EAAC,GAAC;cAAA;gBAAA9B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eAC5BlF,OAAA;gBAAA8E,QAAA,EAAK,IAAIgC,IAAI,CAAC9E,GAAG,CAAC+E,WAAW,CAAC,CAACC,cAAc,CAAC;cAAC;gBAAAjC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC;YAAA,GAN9Ca,GAAG;cAAAhB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAOR,CACL;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACG,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CACR;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA9E,EAAA,CApuCwBD,cAAc;EAAA,QACnBL,WAAW;AAAA;AAAAmH,EAAA,GADN9G,cAAc;AAAA,IAAA8G,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}