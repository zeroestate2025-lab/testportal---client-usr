{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Downloads\\\\INTERVIEW PROCESS\\\\INTERVIEW PROCESS\\\\client\\\\src\\\\pages\\\\AdminDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport API from \"../services/api\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"../styles/AdminDashboard.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function AdminDashboard() {\n  _s();\n  const navigate = useNavigate();\n  const [questions, setQuestions] = useState([]);\n  const [results, setResults] = useState([]);\n  const [activeTab, setActiveTab] = useState(\"questions\");\n  const [form, setForm] = useState({\n    questionText: \"\",\n    optionsText: \"\",\n    correctAnswer: \"\",\n    answerText: \"\" // admin-entered model answer for theory\n  });\n  const [questionType, setQuestionType] = useState(\"MCQ\");\n  const [file, setFile] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [loadingResults, setLoadingResults] = useState(false);\n  const [editingId, setEditingId] = useState(null);\n\n  // 🟢 Check admin login\n  useEffect(() => {\n    const token = localStorage.getItem(\"adminToken\");\n    if (!token) navigate(\"/admin/login\");\n  }, [navigate]);\n\n  // 🟢 Initial fetch\n  useEffect(() => {\n    fetchQuestions();\n    fetchResults();\n  }, []);\n  const fetchQuestions = async () => {\n    try {\n      const res = await API.questions.getAll();\n      setQuestions(res.data || []);\n    } catch (err) {\n      console.error(err);\n      alert(\"❌ Failed to load questions.\");\n    }\n  };\n  const fetchResults = async () => {\n    setLoadingResults(true);\n    try {\n      const res = await API.tests.getAll();\n      setResults(res.data || []);\n    } catch (err) {\n      console.error(err);\n      alert(\"❌ Failed to load test results.\");\n    } finally {\n      setLoadingResults(false);\n    }\n  };\n\n  // 🟢 Add or Update Question\n  const handleAddOrUpdate = async e => {\n    e.preventDefault();\n    const opts = questionType === \"MCQ\" ? form.optionsText.split(\"|\").map(s => s.trim()).filter(Boolean) : [];\n    if (!form.questionText.trim()) {\n      return alert(\"Please enter question text.\");\n    }\n    setLoading(true);\n    try {\n      const payload = {\n        questionType,\n        questionText: form.questionText,\n        options: opts,\n        correctAnswer: questionType === \"MCQ\" ? form.correctAnswer : form.answerText\n      };\n      console.log(\"Submitting payload ->\", payload);\n      if (editingId) {\n        await API.questions.update(editingId, payload);\n        alert(\"✅ Question updated successfully!\");\n      } else {\n        await API.questions.create(payload);\n        alert(\"✅ Question added successfully!\");\n      }\n      setForm({\n        questionText: \"\",\n        optionsText: \"\",\n        correctAnswer: \"\",\n        answerText: \"\"\n      });\n      setEditingId(null);\n      await fetchQuestions();\n    } catch (err) {\n      var _err$response, _err$response$data;\n      console.error(err);\n      alert(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || \"❌ Operation failed.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 🟢 Delete Question\n  const handleDelete = async id => {\n    if (!window.confirm(\"Are you sure you want to delete this question?\")) return;\n    try {\n      await API.delete(`/questions/${id}`);\n      alert(\"🗑️ Question deleted successfully!\");\n      await fetchQuestions();\n    } catch (err) {\n      console.error(err);\n      alert(\"❌ Failed to delete question.\");\n    }\n  };\n\n  // 🟢 Edit Question\n  const handleEdit = q => {\n    setEditingId(q._id);\n    setQuestionType(q.questionType);\n    setForm({\n      questionText: q.questionText,\n      optionsText: q.options ? q.options.join(\" | \") : \"\",\n      correctAnswer: q.correctAnswer || \"\",\n      answerText: q.questionType === \"Theory\" ? q.correctAnswer || \"\" : \"\"\n    });\n    window.scrollTo({\n      top: 0,\n      behavior: \"smooth\"\n    });\n  };\n\n  // 🟢 Upload File\n  const handleUpload = async () => {\n    if (!file) return alert(\"Please select a file to upload.\");\n    const fd = new FormData();\n    fd.append(\"file\", file);\n    try {\n      const res = await API.post(\"/questions/upload\", fd, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      alert(res.data.message || \"✅ File uploaded successfully!\");\n      await fetchQuestions();\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      console.error(err);\n      alert(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.error) || \"❌ File upload failed.\");\n    }\n  };\n  const handleLogout = () => {\n    localStorage.removeItem(\"adminToken\");\n    navigate(\"/admin/login\");\n  };\n\n  // 🟢 Navigate to validation page\n  const handleViewValidation = id => {\n    navigate(`/admin/result/${id}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"admin-dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"admin-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Admin Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"logout-btn\",\n        onClick: handleLogout,\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tab-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `tab-btn ${activeTab === \"questions\" ? \"active\" : \"\"}`,\n        onClick: () => setActiveTab(\"questions\"),\n        children: \"\\uD83E\\uDDE9 Questions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `tab-btn ${activeTab === \"results\" ? \"active\" : \"\"}`,\n        onClick: () => setActiveTab(\"results\"),\n        children: \"\\uD83D\\uDCCA Test Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), activeTab === \"questions\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tab-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card form-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: editingId ? \"✏️ Edit Question\" : \"➕ Add or Upload Questions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleAddOrUpdate,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"form-label\",\n              children: \"Question Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              className: \"form-select\",\n              value: questionType,\n              onChange: e => setQuestionType(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"MCQ\",\n                children: \"MCQ\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Theory\",\n                children: \"Theory\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"form-label\",\n              children: \"Question Text\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              className: \"form-control\",\n              rows: questionType === \"Theory\" ? 3 : 2,\n              value: form.questionText,\n              onChange: e => setForm({\n                ...form,\n                questionText: e.target.value\n              }),\n              placeholder: \"Enter your question here...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 15\n          }, this), questionType === \"Theory\" && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"form-label\",\n              children: \"Answer / Model Answer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              className: \"form-control\",\n              rows: 4,\n              value: form.answerText,\n              onChange: e => setForm({\n                ...form,\n                answerText: e.target.value\n              }),\n              placeholder: \"Enter the model answer for theory questions (this will be stored as the correct answer)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 17\n          }, this), questionType === \"MCQ\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mb-3\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"form-label\",\n                children: \"Options (separate by |)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"form-control\",\n                value: form.optionsText,\n                onChange: e => setForm({\n                  ...form,\n                  optionsText: e.target.value\n                }),\n                placeholder: \"Option A | Option B | Option C | Option D\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 230,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mb-3\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"form-label\",\n                children: \"Correct Answer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"form-control\",\n                value: form.correctAnswer,\n                onChange: e => setForm({\n                  ...form,\n                  correctAnswer: e.target.value\n                }),\n                placeholder: \"Enter correct answer text\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex gap-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-success\",\n              type: \"submit\",\n              disabled: loading,\n              children: loading ? \"Saving...\" : editingId ? \"Update Question\" : \"Add Question\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn btn-secondary\",\n              onClick: () => {\n                setForm({\n                  questionText: \"\",\n                  optionsText: \"\",\n                  correctAnswer: \"\",\n                  answerText: \"\"\n                });\n                setEditingId(null);\n              },\n              children: \"Clear\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n          className: \"my-4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"upload-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label\",\n            children: \"Upload Document (.docx)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            className: \"form-control\",\n            accept: \".docx\",\n            onChange: e => setFile(e.target.files[0])\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-2\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-primary\",\n              onClick: handleUpload,\n              children: \"Upload\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card available-questions\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Available Questions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n          className: \"mt-3 text-primary\",\n          children: \"MCQ Questions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 13\n        }, this), questions.filter(q => q.questionType === \"MCQ\").length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-muted\",\n          children: \"No MCQs yet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 15\n        }, this), questions.filter(q => q.questionType === \"MCQ\").map((q, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [\"Q\", idx + 1, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 19\n          }, this), \" \", q.questionText, /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"small text-muted\",\n            children: [\"Options: \", q.options.join(\" | \")]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"small text-success\",\n            children: [\"Correct: \", q.correctAnswer]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"action-buttons\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-sm btn-warning\",\n              onClick: () => handleEdit(q),\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-sm btn-danger\",\n              onClick: () => handleDelete(q._id),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 19\n          }, this)]\n        }, q._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 17\n        }, this)), /*#__PURE__*/_jsxDEV(\"h6\", {\n          className: \"mt-4 text-primary\",\n          children: \"Theory Questions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 13\n        }, this), questions.filter(q => q.questionType === \"Theory\").length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-muted\",\n          children: \"No theory questions yet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 15\n        }, this), questions.filter(q => q.questionType === \"Theory\").map((q, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [\"Q\", idx + 1, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 19\n          }, this), \" \", q.questionText, q.correctAnswer && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"small text-success\",\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Model Answer:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 23\n            }, this), \" \", q.correctAnswer]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"action-buttons\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-sm btn-warning\",\n              onClick: () => handleEdit(q),\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-sm btn-danger\",\n              onClick: () => handleDelete(q._id),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 19\n          }, this)]\n        }, q._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 17\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }, this) :\n    /*#__PURE__*/\n    // 📊 TEST RESULTS TAB\n    _jsxDEV(\"div\", {\n      className: \"tab-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card results-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Candidate Test Results\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 13\n        }, this), loadingResults ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading test results...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 15\n        }, this) : results.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-muted\",\n          children: \"No test results yet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"results-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 380,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Email\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 381,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Total\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 382,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Correct\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 383,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Score %\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 384,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Status\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 385,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Submitted At\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 386,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Action\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 387,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 379,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: results.map((res, idx) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: res.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 393,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: res.email\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 394,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: res.totalQuestions\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 395,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: res.correctAnswers\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 396,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [res.scorePercent, \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 397,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    color: res.status === \"Validated\" ? \"green\" : \"orange\",\n                    fontWeight: 600\n                  },\n                  children: res.status || \"Validation Pending\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 399,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 398,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: new Date(res.submittedAt).toLocaleString()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 409,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btn-sm btn-primary\",\n                  onClick: () => handleViewValidation(res._id),\n                  children: \"View / Validate\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 411,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 410,\n                columnNumber: 23\n              }, this)]\n            }, idx, true, {\n              fileName: _jsxFileName,\n              lineNumber: 392,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n}\n\n// import React, { useEffect, useState } from \"react\";\n// import API from \"../services/api\";\n// import { useNavigate } from \"react-router-dom\";\n// import \"../styles/AdminDashboard.css\";\n\n// export default function AdminDashboard() {\n//   const navigate = useNavigate();\n//   const [questions, setQuestions] = useState([]);\n//   const [results, setResults] = useState([]);\n//   const [activeTab, setActiveTab] = useState(\"questions\");\n//   const [form, setForm] = useState({\n//     questionText: \"\",\n//     optionsText: \"\",\n//     correctAnswer: \"\",\n//     answerText: \"\", // <-- ADDED: admin-entered answer for Theory\n//   });\n//   const [questionType, setQuestionType] = useState(\"MCQ\");\n//   const [file, setFile] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [loadingResults, setLoadingResults] = useState(false);\n//   const [editingId, setEditingId] = useState(null);\n\n//   // 🟢 Check admin login\n//   useEffect(() => {\n//     const token = localStorage.getItem(\"adminToken\");\n//     if (!token) navigate(\"/admin/login\");\n//   }, [navigate]);\n\n//   // 🟢 Initial fetch\n//   useEffect(() => {\n//     fetchQuestions();\n//     fetchResults();\n//   }, []);\n\n//   const fetchQuestions = async () => {\n//     try {\n//       const res = await API.get(\"/questions\");\n//       setQuestions(res.data || []);\n//     } catch (err) {\n//       console.error(err);\n//       alert(\"❌ Failed to load questions.\");\n//     }\n//   };\n\n//   const fetchResults = async () => {\n//     setLoadingResults(true);\n//     try {\n//       const res = await API.get(\"/tests\");\n//       setResults(res.data || []);\n//     } catch (err) {\n//       console.error(err);\n//       alert(\"❌ Failed to load test results.\");\n//     } finally {\n//       setLoadingResults(false);\n//     }\n//   };\n\n//   // 🟢 Add or Update Question\n//   const handleAddOrUpdate = async (e) => {\n//     e.preventDefault();\n//     const opts =\n//       questionType === \"MCQ\"\n//         ? form.optionsText.split(\"|\").map((s) => s.trim()).filter(Boolean)\n//         : [];\n\n//     if (!form.questionText.trim()) {\n//       return alert(\"Please enter question text.\");\n//     }\n\n//     setLoading(true);\n//     try {\n//       const payload = {\n//         questionType,\n//         questionText: form.questionText,\n//         options: opts,\n//         // for MCQ use form.correctAnswer, for Theory use form.answerText as the 'correctAnswer' stored on backend\n//         correctAnswer: questionType === \"MCQ\" ? form.correctAnswer : form.answerText,\n//       };\n//        console.log(\"Submitting payload ->\", payload); // inspect this in Network/Console\n\n//       if (editingId) {\n//         await API.put(`/questions/${editingId}`, payload);\n//         alert(\"✅ Question updated successfully!\");\n//       } else {\n//         await API.post(\"/questions\", payload);\n//         alert(\"✅ Question added successfully!\");\n//       }\n\n//       setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\", answerText: \"\" });\n//       setEditingId(null);\n//       await fetchQuestions();\n//     } catch (err) {\n//       console.error(err);\n//       alert(err.response?.data?.error || \"❌ Operation failed.\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // 🟢 Delete Question\n//   const handleDelete = async (id) => {\n//     if (!window.confirm(\"Are you sure you want to delete this question?\")) return;\n\n//     try {\n//       await API.delete(`/questions/${id}`);\n//       alert(\"🗑️ Question deleted successfully!\");\n//       await fetchQuestions();\n//     } catch (err) {\n//       console.error(err);\n//       alert(\"❌ Failed to delete question.\");\n//     }\n//   };\n\n//   // 🟢 Edit Question\n//   const handleEdit = (q) => {\n//     setEditingId(q._id);\n//     setQuestionType(q.questionType);\n//     setForm({\n//       questionText: q.questionText,\n//       optionsText: q.options ? q.options.join(\" | \") : \"\",\n//       correctAnswer: q.correctAnswer || \"\", // used for MCQ\n//       answerText: q.questionType === \"Theory\" ? (q.correctAnswer || \"\") : \"\", // <-- ADDED: populate answerText from stored correctAnswer for theory\n//     });\n//     window.scrollTo({ top: 0, behavior: \"smooth\" });\n//   };\n\n//   // 🟢 Upload File\n//   const handleUpload = async () => {\n//     if (!file) return alert(\"Please select a file to upload.\");\n//     const fd = new FormData();\n//     fd.append(\"file\", file);\n\n//     try {\n//       const res = await API.post(\"/questions/upload\", fd, {\n//         headers: { \"Content-Type\": \"multipart/form-data\" },\n//       });\n//       alert(res.data.message || \"✅ File uploaded successfully!\");\n//       await fetchQuestions();\n//     } catch (err) {\n//       console.error(err);\n//       alert(err.response?.data?.error || \"❌ File upload failed.\");\n//     }\n//   };\n\n//   const handleLogout = () => {\n//     localStorage.removeItem(\"adminToken\");\n//     navigate(\"/admin/login\");\n//   };\n\n//   return (\n//     <div className=\"admin-dashboard\">\n//       {/* Header */}\n//       <div className=\"admin-header\">\n//         <h2>Admin Dashboard</h2>\n//         <button className=\"logout-btn\" onClick={handleLogout}>\n//           Logout\n//         </button>\n//       </div>\n\n//       {/* Tabs */}\n//       <div className=\"tab-buttons\">\n//         <button\n//           className={`tab-btn ${activeTab === \"questions\" ? \"active\" : \"\"}`}\n//           onClick={() => setActiveTab(\"questions\")}\n//         >\n//           🧩 Questions\n//         </button>\n//         <button\n//           className={`tab-btn ${activeTab === \"results\" ? \"active\" : \"\"}`}\n//           onClick={() => setActiveTab(\"results\")}\n//         >\n//           📊 Test Results\n//         </button>\n//       </div>\n\n//       {/* 🧩 QUESTIONS TAB */}\n//       {activeTab === \"questions\" ? (\n//         <div className=\"tab-content\">\n//           <div className=\"card form-section\">\n//             <h5>{editingId ? \"✏️ Edit Question\" : \"➕ Add or Upload Questions\"}</h5>\n\n//             <form onSubmit={handleAddOrUpdate}>\n//               <div className=\"mb-3\">\n//                 <label className=\"form-label\">Question Type</label>\n//                 <select\n//                   className=\"form-select\"\n//                   value={questionType}\n//                   onChange={(e) => setQuestionType(e.target.value)}\n//                 >\n//                   <option value=\"MCQ\">MCQ</option>\n//                   <option value=\"Theory\">Theory</option>\n//                 </select>\n//               </div>\n\n//               <div className=\"mb-3\">\n//                 <label className=\"form-label\">Question Text</label>\n//                 <textarea\n//                   className=\"form-control\"\n//                   rows={questionType === \"Theory\" ? 3 : 2}\n//                   value={form.questionText}\n//                   onChange={(e) =>\n//                     setForm({ ...form, questionText: e.target.value })\n//                   }\n//                   placeholder=\"Enter your question here...\"\n//                 />\n//               </div>\n\n//               {/* Theory: show admin answer input */}\n//               {questionType === \"Theory\" && (\n//                 <div className=\"mb-3\">\n//                   <label className=\"form-label\">Answer / Model Answer</label>\n//                   <textarea\n//                     className=\"form-control\"\n//                     rows={4}\n//                     value={form.answerText}\n//                     onChange={(e) => setForm({ ...form, answerText: e.target.value })}\n//                     placeholder=\"Enter the model answer for theory questions (this will be stored as the correct answer)\"\n//                   />\n//                 </div>\n//               )}\n\n//               {questionType === \"MCQ\" && (\n//                 <>\n//                   <div className=\"mb-3\">\n//                     <label className=\"form-label\">Options (separate by |)</label>\n//                     <input\n//                       className=\"form-control\"\n//                       value={form.optionsText}\n//                       onChange={(e) =>\n//                         setForm({ ...form, optionsText: e.target.value })\n//                       }\n//                       placeholder=\"Option A | Option B | Option C | Option D\"\n//                     />\n//                   </div>\n\n//                   <div className=\"mb-3\">\n//                     <label className=\"form-label\">Correct Answer</label>\n//                     <input\n//                       className=\"form-control\"\n//                       value={form.correctAnswer}\n//                       onChange={(e) =>\n//                         setForm({ ...form, correctAnswer: e.target.value })\n//                       }\n//                       placeholder=\"Enter correct answer text\"\n//                     />\n//                   </div>\n//                 </>\n//               )}\n\n//               <div className=\"d-flex gap-2\">\n//                 <button className=\"btn btn-success\" type=\"submit\" disabled={loading}>\n//                   {loading\n//                     ? \"Saving...\"\n//                     : editingId\n//                     ? \"Update Question\"\n//                     : \"Add Question\"}\n//                 </button>\n//                 <button\n//                   type=\"button\"\n//                   className=\"btn btn-secondary\"\n//                   onClick={() => {\n//                     setForm({\n//                       questionText: \"\",\n//                       optionsText: \"\",\n//                       correctAnswer: \"\",\n//                       answerText: \"\", // <-- clear it\n//                     });\n//                     setEditingId(null);\n//                   }}\n//                 >\n//                   Clear\n//                 </button>\n//               </div>\n//             </form>\n\n//             <hr className=\"my-4\" />\n\n//             {/* Upload Section */}\n//             <div className=\"upload-section\">\n//               <label className=\"form-label\">Upload Document (.docx)</label>\n//               <input\n//                 type=\"file\"\n//                 className=\"form-control\"\n//                 accept=\".docx\"\n//                 onChange={(e) => setFile(e.target.files[0])}\n//               />\n//               <div className=\"mt-2\">\n//                 <button className=\"btn btn-primary\" onClick={handleUpload}>\n//                   Upload\n//                 </button>\n//               </div>\n//             </div>\n//           </div>\n\n//           {/* Display Questions */}\n//           <div className=\"card available-questions\">\n//             <h5>Available Questions</h5>\n\n//             {/* MCQ Section */}\n//             <h6 className=\"mt-3 text-primary\">MCQ Questions</h6>\n//             {questions.filter((q) => q.questionType === \"MCQ\").length === 0 && (\n//               <div className=\"text-muted\">No MCQs yet</div>\n//             )}\n//             {questions\n//               .filter((q) => q.questionType === \"MCQ\")\n//               .map((q, idx) => (\n//                 <div key={q._id} className=\"question-item\">\n//                   <strong>Q{idx + 1}:</strong> {q.questionText}\n//                   <div className=\"small text-muted\">\n//                     Options: {q.options.join(\" | \")}\n//                   </div>\n//                   <div className=\"small text-success\">\n//                     Correct: {q.correctAnswer}\n//                   </div>\n//                   <div className=\"action-buttons\">\n//                     <button\n//                       className=\"btn btn-sm btn-warning\"\n//                       onClick={() => handleEdit(q)}\n//                     >\n//                       Edit\n//                     </button>\n//                     <button\n//                       className=\"btn btn-sm btn-danger\"\n//                       onClick={() => handleDelete(q._id)}\n//                     >\n//                       Delete\n//                     </button>\n//                   </div>\n//                 </div>\n//               ))}\n\n//             {/* Theory Section */}\n//             <h6 className=\"mt-4 text-primary\">Theory Questions</h6>\n//             {questions.filter((q) => q.questionType === \"Theory\").length === 0 && (\n//               <div className=\"text-muted\">No theory questions yet</div>\n//             )}\n//             {questions\n//               .filter((q) => q.questionType === \"Theory\")\n//               .map((q, idx) => {\n//                 const relatedAnswers = results\n//                   .flatMap((r) => r.answers || [])\n//                   .filter(\n//                     (a) =>\n//                       a.question.trim().toLowerCase() ===\n//                       q.questionText.trim().toLowerCase()\n//                   );\n//                 return (\n//                   <div key={q._id} className=\"question-item\">\n//                     <strong>Q{idx + 1}:</strong> {q.questionText}\n//                     {/* show admin-provided model answer if exists */}\n//                     {q.correctAnswer ? (\n//                       <div className=\"small text-success\">\n//                         <b>Model Answer:</b> {q.correctAnswer}\n//                       </div>\n//                     ) : null}\n\n//                     {relatedAnswers.length > 0 ? (\n//                       <div className=\"theory-answers\">\n//                         <b>Answers:</b>\n//                         <ul>\n//                           {relatedAnswers.map((a, i) => (\n//                             <li key={i}>{a.userAnswer}</li>\n//                           ))}\n//                         </ul>\n//                       </div>\n//                     ) : (\n//                       <div className=\"text-muted small\">No answers yet</div>\n//                     )}\n//                     <div className=\"action-buttons\">\n//                       <button\n//                         className=\"btn btn-sm btn-warning\"\n//                         onClick={() => handleEdit(q)}\n//                       >\n//                         Edit\n//                       </button>\n//                       <button\n//                         className=\"btn btn-sm btn-danger\"\n//                         onClick={() => handleDelete(q._id)}\n//                       >\n//                         Delete\n//                       </button>\n//                     </div>\n//                   </div>\n//                 );\n//               })}\n//           </div>\n//         </div>\n//       ) : (\n//         // 📊 TEST RESULTS TAB\n//         <div className=\"tab-content\">\n//           <div className=\"card results-section\">\n//             <h5>Candidate Test Results</h5>\n//             {loadingResults ? (\n//               <div>Loading test results...</div>\n//             ) : results.length === 0 ? (\n//               <div className=\"text-muted\">No test results yet</div>\n//             ) : (\n//               <table className=\"results-table\">\n//                 <thead>\n//                   <tr>\n//                     <th>Name</th>\n//                     <th>Email</th>\n//                     <th>Total</th>\n//                     <th>Correct</th>\n//                     <th>Score %</th>\n//                     <th>Submitted At</th>\n//                   </tr>\n//                 </thead>\n//                 <tbody>\n//                   {results.map((res, idx) => (\n//                     <tr key={idx}>\n//                       <td>{res.name}</td>\n//                       <td>{res.email}</td>\n//                       <td>{res.totalQuestions}</td>\n//                       <td>{res.correctAnswers}</td>\n//                       <td>{res.scorePercent}%</td>\n//                       <td>{new Date(res.submittedAt).toLocaleString()}</td>\n//                     </tr>\n//                   ))}\n//                 </tbody>\n//               </table>\n//             )}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// // import React, { useEffect, useState } from \"react\";\n// // import API from \"../services/api\";\n// // import { useNavigate } from \"react-router-dom\";\n// // import \"../styles/AdminDashboard.css\";\n\n// // export default function AdminDashboard() {\n// //   const navigate = useNavigate();\n// //   const [questions, setQuestions] = useState([]);\n// //   const [results, setResults] = useState([]);\n// //   const [activeTab, setActiveTab] = useState(\"questions\");\n// //   const [form, setForm] = useState({\n// //     questionText: \"\",\n// //     optionsText: \"\",\n// //     correctAnswer: \"\",\n// //   });\n// //   const [questionType, setQuestionType] = useState(\"MCQ\");\n// //   const [file, setFile] = useState(null);\n// //   const [loading, setLoading] = useState(false);\n// //   const [loadingResults, setLoadingResults] = useState(false);\n// //   const [editingId, setEditingId] = useState(null);\n\n// //   // 🟢 Check admin login\n// //   useEffect(() => {\n// //     const token = localStorage.getItem(\"adminToken\");\n// //     if (!token) navigate(\"/admin/login\");\n// //   }, [navigate]);\n\n// //   // 🟢 Initial fetch\n// //   useEffect(() => {\n// //     fetchQuestions();\n// //     fetchResults();\n// //   }, []);\n\n// //   const fetchQuestions = async () => {\n// //     try {\n// //       const res = await API.get(\"/questions\");\n// //       setQuestions(res.data || []);\n// //     } catch (err) {\n// //       console.error(err);\n// //       alert(\"❌ Failed to load questions.\");\n// //     }\n// //   };\n\n// //   const fetchResults = async () => {\n// //     setLoadingResults(true);\n// //     try {\n// //       const res = await API.get(\"/tests\");\n// //       setResults(res.data || []);\n// //     } catch (err) {\n// //       console.error(err);\n// //       alert(\"❌ Failed to load test results.\");\n// //     } finally {\n// //       setLoadingResults(false);\n// //     }\n// //   };\n\n// //   // 🟢 Add or Update Question\n// //   const handleAddOrUpdate = async (e) => {\n// //     e.preventDefault();\n// //     const opts =\n// //       questionType === \"MCQ\"\n// //         ? form.optionsText.split(\"|\").map((s) => s.trim()).filter(Boolean)\n// //         : [];\n\n// //     if (!form.questionText.trim()) {\n// //       return alert(\"Please enter question text.\");\n// //     }\n\n// //     setLoading(true);\n// //     try {\n// //       if (editingId) {\n// //         await API.put(`/questions/${editingId}`, {\n// //           questionType,\n// //           questionText: form.questionText,\n// //           options: opts,\n// //           correctAnswer: questionType === \"MCQ\" ? form.correctAnswer : \"\",\n// //         });\n// //         alert(\"✅ Question updated successfully!\");\n// //       } else {\n// //         await API.post(\"/questions\", {\n// //           questionType,\n// //           questionText: form.questionText,\n// //           options: opts,\n// //           correctAnswer: questionType === \"MCQ\" ? form.correctAnswer : \"\",\n// //         });\n// //         alert(\"✅ Question added successfully!\");\n// //       }\n\n// //       setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" });\n// //       setEditingId(null);\n// //       await fetchQuestions();\n// //     } catch (err) {\n// //       console.error(err);\n// //       alert(err.response?.data?.error || \"❌ Operation failed.\");\n// //     } finally {\n// //       setLoading(false);\n// //     }\n// //   };\n\n// //   // 🟢 Delete Question\n// //   const handleDelete = async (id) => {\n// //     if (!window.confirm(\"Are you sure you want to delete this question?\")) return;\n\n// //     try {\n// //       await API.delete(`/questions/${id}`);\n// //       alert(\"🗑️ Question deleted successfully!\");\n// //       await fetchQuestions();\n// //     } catch (err) {\n// //       console.error(err);\n// //       alert(\"❌ Failed to delete question.\");\n// //     }\n// //   };\n\n// //   // 🟢 Edit Question\n// //   const handleEdit = (q) => {\n// //     setEditingId(q._id);\n// //     setQuestionType(q.questionType);\n// //     setForm({\n// //       questionText: q.questionText,\n// //       optionsText: q.options ? q.options.join(\" | \") : \"\",\n// //       correctAnswer: q.correctAnswer || \"\",\n// //     });\n// //     window.scrollTo({ top: 0, behavior: \"smooth\" });\n// //   };\n\n// //   // 🟢 Upload File\n// //   const handleUpload = async () => {\n// //     if (!file) return alert(\"Please select a file to upload.\");\n// //     const fd = new FormData();\n// //     fd.append(\"file\", file);\n\n// //     try {\n// //       const res = await API.post(\"/questions/upload\", fd, {\n// //         headers: { \"Content-Type\": \"multipart/form-data\" },\n// //       });\n// //       alert(res.data.message || \"✅ File uploaded successfully!\");\n// //       await fetchQuestions();\n// //     } catch (err) {\n// //       console.error(err);\n// //       alert(err.response?.data?.error || \"❌ File upload failed.\");\n// //     }\n// //   };\n\n// //   const handleLogout = () => {\n// //     localStorage.removeItem(\"adminToken\");\n// //     navigate(\"/admin/login\");\n// //   };\n\n// //   return (\n// //     <div className=\"admin-dashboard\">\n// //       {/* Header */}\n// //       <div className=\"admin-header\">\n// //         <h2>Admin Dashboard</h2>\n// //         <button className=\"logout-btn\" onClick={handleLogout}>\n// //           Logout\n// //         </button>\n// //       </div>\n\n// //       {/* Tabs */}\n// //       <div className=\"tab-buttons\">\n// //         <button\n// //           className={`tab-btn ${activeTab === \"questions\" ? \"active\" : \"\"}`}\n// //           onClick={() => setActiveTab(\"questions\")}\n// //         >\n// //           🧩 Questions\n// //         </button>\n// //         <button\n// //           className={`tab-btn ${activeTab === \"results\" ? \"active\" : \"\"}`}\n// //           onClick={() => setActiveTab(\"results\")}\n// //         >\n// //           📊 Test Results\n// //         </button>\n// //       </div>\n\n// //       {/* 🧩 QUESTIONS TAB */}\n// //       {activeTab === \"questions\" ? (\n// //         <div className=\"tab-content\">\n// //           <div className=\"card form-section\">\n// //             <h5>{editingId ? \"✏️ Edit Question\" : \"➕ Add or Upload Questions\"}</h5>\n\n// //             <form onSubmit={handleAddOrUpdate}>\n// //               <div className=\"mb-3\">\n// //                 <label className=\"form-label\">Question Type</label>\n// //                 <select\n// //                   className=\"form-select\"\n// //                   value={questionType}\n// //                   onChange={(e) => setQuestionType(e.target.value)}\n// //                 >\n// //                   <option value=\"MCQ\">MCQ</option>\n// //                   <option value=\"Theory\">Theory</option>\n// //                 </select>\n// //               </div>\n\n// //               <div className=\"mb-3\">\n// //                 <label className=\"form-label\">Question Text</label>\n// //                 <textarea\n// //                   className=\"form-control\"\n// //                   rows={questionType === \"Theory\" ? 3 : 2}\n// //                   value={form.questionText}\n// //                   onChange={(e) =>\n// //                     setForm({ ...form, questionText: e.target.value })\n// //                   }\n// //                   placeholder=\"Enter your question here...\"\n// //                 />\n// //               </div>\n\n// //               {questionType === \"MCQ\" && (\n// //                 <>\n// //                   <div className=\"mb-3\">\n// //                     <label className=\"form-label\">Options (separate by |)</label>\n// //                     <input\n// //                       className=\"form-control\"\n// //                       value={form.optionsText}\n// //                       onChange={(e) =>\n// //                         setForm({ ...form, optionsText: e.target.value })\n// //                       }\n// //                       placeholder=\"Option A | Option B | Option C | Option D\"\n// //                     />\n// //                   </div>\n\n// //                   <div className=\"mb-3\">\n// //                     <label className=\"form-label\">Correct Answer</label>\n// //                     <input\n// //                       className=\"form-control\"\n// //                       value={form.correctAnswer}\n// //                       onChange={(e) =>\n// //                         setForm({ ...form, correctAnswer: e.target.value })\n// //                       }\n// //                       placeholder=\"Enter correct answer text\"\n// //                     />\n// //                   </div>\n// //                 </>\n// //               )}\n\n// //               <div className=\"d-flex gap-2\">\n// //                 <button className=\"btn btn-success\" type=\"submit\" disabled={loading}>\n// //                   {loading\n// //                     ? \"Saving...\"\n// //                     : editingId\n// //                     ? \"Update Question\"\n// //                     : \"Add Question\"}\n// //                 </button>\n// //                 <button\n// //                   type=\"button\"\n// //                   className=\"btn btn-secondary\"\n// //                   onClick={() => {\n// //                     setForm({\n// //                       questionText: \"\",\n// //                       optionsText: \"\",\n// //                       correctAnswer: \"\",\n// //                     });\n// //                     setEditingId(null);\n// //                   }}\n// //                 >\n// //                   Clear\n// //                 </button>\n// //               </div>\n// //             </form>\n\n// //             <hr className=\"my-4\" />\n\n// //             {/* Upload Section */}\n// //             <div className=\"upload-section\">\n// //               <label className=\"form-label\">Upload Document (.docx)</label>\n// //               <input\n// //                 type=\"file\"\n// //                 className=\"form-control\"\n// //                 accept=\".docx\"\n// //                 onChange={(e) => setFile(e.target.files[0])}\n// //               />\n// //               <div className=\"mt-2\">\n// //                 <button className=\"btn btn-primary\" onClick={handleUpload}>\n// //                   Upload\n// //                 </button>\n// //               </div>\n// //             </div>\n// //           </div>\n\n// //           {/* Display Questions */}\n// //           <div className=\"card available-questions\">\n// //             <h5>Available Questions</h5>\n\n// //             {/* MCQ Section */}\n// //             <h6 className=\"mt-3 text-primary\">MCQ Questions</h6>\n// //             {questions.filter((q) => q.questionType === \"MCQ\").length === 0 && (\n// //               <div className=\"text-muted\">No MCQs yet</div>\n// //             )}\n// //             {questions\n// //               .filter((q) => q.questionType === \"MCQ\")\n// //               .map((q, idx) => (\n// //                 <div key={q._id} className=\"question-item\">\n// //                   <strong>Q{idx + 1}:</strong> {q.questionText}\n// //                   <div className=\"small text-muted\">\n// //                     Options: {q.options.join(\" | \")}\n// //                   </div>\n// //                   <div className=\"small text-success\">\n// //                     Correct: {q.correctAnswer}\n// //                   </div>\n// //                   <div className=\"action-buttons\">\n// //                     <button\n// //                       className=\"btn btn-sm btn-warning\"\n// //                       onClick={() => handleEdit(q)}\n// //                     >\n// //                       Edit\n// //                     </button>\n// //                     <button\n// //                       className=\"btn btn-sm btn-danger\"\n// //                       onClick={() => handleDelete(q._id)}\n// //                     >\n// //                       Delete\n// //                     </button>\n// //                   </div>\n// //                 </div>\n// //               ))}\n\n// //             {/* Theory Section */}\n// //             <h6 className=\"mt-4 text-primary\">Theory Questions</h6>\n// //             {questions.filter((q) => q.questionType === \"Theory\").length === 0 && (\n// //               <div className=\"text-muted\">No theory questions yet</div>\n// //             )}\n// //             {questions\n// //               .filter((q) => q.questionType === \"Theory\")\n// //               .map((q, idx) => {\n// //                 const relatedAnswers = results\n// //                   .flatMap((r) => r.answers || [])\n// //                   .filter(\n// //                     (a) =>\n// //                       a.question.trim().toLowerCase() ===\n// //                       q.questionText.trim().toLowerCase()\n// //                   );\n// //                 return (\n// //                   <div key={q._id} className=\"question-item\">\n// //                     <strong>Q{idx + 1}:</strong> {q.questionText}\n// //                     {relatedAnswers.length > 0 ? (\n// //                       <div className=\"theory-answers\">\n// //                         <b>Answers:</b>\n// //                         <ul>\n// //                           {relatedAnswers.map((a, i) => (\n// //                             <li key={i}>{a.userAnswer}</li>\n// //                           ))}\n// //                         </ul>\n// //                       </div>\n// //                     ) : (\n// //                       <div className=\"text-muted small\">No answers yet</div>\n// //                     )}\n// //                     <div className=\"action-buttons\">\n// //                       <button\n// //                         className=\"btn btn-sm btn-warning\"\n// //                         onClick={() => handleEdit(q)}\n// //                       >\n// //                         Edit\n// //                       </button>\n// //                       <button\n// //                         className=\"btn btn-sm btn-danger\"\n// //                         onClick={() => handleDelete(q._id)}\n// //                       >\n// //                         Delete\n// //                       </button>\n// //                     </div>\n// //                   </div>\n// //                 );\n// //               })}\n// //           </div>\n// //         </div>\n// //       ) : (\n// //         // 📊 TEST RESULTS TAB\n// //         <div className=\"tab-content\">\n// //           <div className=\"card results-section\">\n// //             <h5>Candidate Test Results</h5>\n// //             {loadingResults ? (\n// //               <div>Loading test results...</div>\n// //             ) : results.length === 0 ? (\n// //               <div className=\"text-muted\">No test results yet</div>\n// //             ) : (\n// //               <table className=\"results-table\">\n// //                 <thead>\n// //                   <tr>\n// //                     <th>Name</th>\n// //                     <th>Email</th>\n// //                     <th>Total</th>\n// //                     <th>Correct</th>\n// //                     <th>Score %</th>\n// //                     <th>Submitted At</th>\n// //                   </tr>\n// //                 </thead>\n// //                 <tbody>\n// //                   {results.map((res, idx) => (\n// //                     <tr key={idx}>\n// //                       <td>{res.name}</td>\n// //                       <td>{res.email}</td>\n// //                       <td>{res.totalQuestions}</td>\n// //                       <td>{res.correctAnswers}</td>\n// //                       <td>{res.scorePercent}%</td>\n// //                       <td>{new Date(res.submittedAt).toLocaleString()}</td>\n// //                     </tr>\n// //                   ))}\n// //                 </tbody>\n// //               </table>\n// //             )}\n// //           </div>\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // }\n\n// // // import React, { useEffect, useState } from \"react\";\n// // // import API from \"../services/api\";\n// // // import { useNavigate } from \"react-router-dom\";\n// // // import \"../styles/AdminDashboard.css\";\n\n// // // export default function AdminDashboard() {\n// // //   const navigate = useNavigate();\n// // //   const [questions, setQuestions] = useState([]);\n// // //   const [results, setResults] = useState([]);\n// // //   const [activeTab, setActiveTab] = useState(\"questions\"); // 🔹 Switch tab\n// // //   const [form, setForm] = useState({\n// // //     questionText: \"\",\n// // //     optionsText: \"\",\n// // //     correctAnswer: \"\",\n// // //   });\n// // //   const [questionType, setQuestionType] = useState(\"MCQ\");\n// // //   const [file, setFile] = useState(null);\n// // //   const [loading, setLoading] = useState(false);\n// // //   const [loadingResults, setLoadingResults] = useState(false);\n\n// // //   // 🟢 Check admin login\n// // //   useEffect(() => {\n// // //     const token = localStorage.getItem(\"adminToken\");\n// // //     if (!token) navigate(\"/admin/login\");\n// // //   }, [navigate]);\n\n// // //   // 🟢 Fetch initial data\n// // //   useEffect(() => {\n// // //     fetchQuestions();\n// // //     fetchResults();\n// // //   }, []);\n\n// // //   const fetchQuestions = async () => {\n// // //     try {\n// // //       const res = await API.get(\"/questions\");\n// // //       setQuestions(res.data || []);\n// // //     } catch (err) {\n// // //       console.error(err);\n// // //       alert(\"❌ Failed to load questions.\");\n// // //     }\n// // //   };\n\n// // //   const fetchResults = async () => {\n// // //     setLoadingResults(true);\n// // //     try {\n// // //       const res = await API.get(\"/tests\");\n// // //       setResults(res.data || []);\n// // //     } catch (err) {\n// // //       console.error(err);\n// // //       alert(\"❌ Failed to load test results.\");\n// // //     } finally {\n// // //       setLoadingResults(false);\n// // //     }\n// // //   };\n\n// // //   // 🟢 Add Question\n// // //   const handleAddQuestion = async (e) => {\n// // //     e.preventDefault();\n// // //     const opts =\n// // //       questionType === \"MCQ\"\n// // //         ? form.optionsText.split(\"|\").map((s) => s.trim()).filter(Boolean)\n// // //         : [];\n\n// // //     if (!form.questionText.trim()) {\n// // //       return alert(\"Please enter question text.\");\n// // //     }\n// // //     if (questionType === \"MCQ\" && (opts.length < 2 || !form.correctAnswer.trim())) {\n// // //       return alert(\"Please enter at least 2 options and a correct answer.\");\n// // //     }\n\n// // //     setLoading(true);\n// // //     try {\n// // //       await API.post(\"/questions\", {\n// // //         questionType,\n// // //         questionText: form.questionText,\n// // //         options: opts,\n// // //         correctAnswer: questionType === \"MCQ\" ? form.correctAnswer : \"\",\n// // //       });\n\n// // //       setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" });\n// // //       await fetchQuestions();\n// // //       alert(\"✅ Question added successfully!\");\n// // //     } catch (err) {\n// // //       console.error(err);\n// // //       alert(err.response?.data?.error || \"Failed to add question.\");\n// // //     } finally {\n// // //       setLoading(false);\n// // //     }\n// // //   };\n\n// // //   // 🟢 Upload File\n// // //   const handleUpload = async () => {\n// // //     if (!file) return alert(\"Please select a file to upload.\");\n// // //     const fd = new FormData();\n// // //     fd.append(\"file\", file);\n\n// // //     try {\n// // //       const res = await API.post(\"/questions/upload\", fd, {\n// // //         headers: { \"Content-Type\": \"multipart/form-data\" },\n// // //       });\n// // //       alert(res.data.message || \"✅ File uploaded successfully!\");\n// // //       await fetchQuestions();\n// // //     } catch (err) {\n// // //       console.error(err);\n// // //       alert(err.response?.data?.error || \"❌ File upload failed.\");\n// // //     }\n// // //   };\n\n// // //   const handleLogout = () => {\n// // //     localStorage.removeItem(\"adminToken\");\n// // //     navigate(\"/admin/login\");\n// // //   };\n\n// // //   return (\n// // //     <div className=\"admin-dashboard\">\n// // //       {/* Header */}\n// // //       <div className=\"admin-header\">\n// // //         <h2>Admin Dashboard</h2>\n// // //         <button className=\"logout-btn\" onClick={handleLogout}>\n// // //           Logout\n// // //         </button>\n// // //       </div>\n\n// // //       {/* Tabs */}\n// // //       <div className=\"tab-buttons\">\n// // //         <button\n// // //           className={`tab-btn ${activeTab === \"questions\" ? \"active\" : \"\"}`}\n// // //           onClick={() => setActiveTab(\"questions\")}\n// // //         >\n// // //           🧩 Questions\n// // //         </button>\n// // //         <button\n// // //           className={`tab-btn ${activeTab === \"results\" ? \"active\" : \"\"}`}\n// // //           onClick={() => setActiveTab(\"results\")}\n// // //         >\n// // //           📊 Test Results\n// // //         </button>\n// // //       </div>\n\n// // //       {/* Content based on active tab */}\n// // //       {activeTab === \"questions\" ? (\n// // //         <div className=\"tab-content\">\n// // //           {/* Add Question / Upload Section */}\n// // //           <div className=\"card form-section\">\n// // //             <h5>Add or Upload Questions</h5>\n\n// // //             <form onSubmit={handleAddQuestion}>\n// // //               <div className=\"mb-3\">\n// // //                 <label className=\"form-label\">Question Type</label>\n// // //                 <select\n// // //                   className=\"form-select\"\n// // //                   value={questionType}\n// // //                   onChange={(e) => setQuestionType(e.target.value)}\n// // //                 >\n// // //                   <option value=\"MCQ\">MCQ</option>\n// // //                   <option value=\"Theory\">Theory</option>\n// // //                 </select>\n// // //               </div>\n\n// // //               <div className=\"mb-3\">\n// // //                 <label className=\"form-label\">Question Text</label>\n// // //                 <textarea\n// // //                   className=\"form-control\"\n// // //                   rows={questionType === \"Theory\" ? 3 : 2}\n// // //                   value={form.questionText}\n// // //                   onChange={(e) =>\n// // //                     setForm({ ...form, questionText: e.target.value })\n// // //                   }\n// // //                   placeholder=\"Enter your question here...\"\n// // //                 />\n// // //               </div>\n\n// // //               {questionType === \"MCQ\" && (\n// // //                 <>\n// // //                   <div className=\"mb-3\">\n// // //                     <label className=\"form-label\">Options (separate by |)</label>\n// // //                     <input\n// // //                       className=\"form-control\"\n// // //                       value={form.optionsText}\n// // //                       onChange={(e) =>\n// // //                         setForm({ ...form, optionsText: e.target.value })\n// // //                       }\n// // //                       placeholder=\"Option A | Option B | Option C | Option D\"\n// // //                     />\n// // //                   </div>\n\n// // //                   <div className=\"mb-3\">\n// // //                     <label className=\"form-label\">Correct Answer</label>\n// // //                     <input\n// // //                       className=\"form-control\"\n// // //                       value={form.correctAnswer}\n// // //                       onChange={(e) =>\n// // //                         setForm({ ...form, correctAnswer: e.target.value })\n// // //                       }\n// // //                       placeholder=\"Enter correct answer text\"\n// // //                     />\n// // //                   </div>\n// // //                 </>\n// // //               )}\n\n// // //               <div className=\"d-flex gap-2\">\n// // //                 <button className=\"btn btn-success\" type=\"submit\" disabled={loading}>\n// // //                   {loading ? \"Adding...\" : \"Add Question\"}\n// // //                 </button>\n// // //                 <button\n// // //                   type=\"button\"\n// // //                   className=\"btn btn-secondary\"\n// // //                   onClick={() =>\n// // //                     setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" })\n// // //                   }\n// // //                 >\n// // //                   Clear\n// // //                 </button>\n// // //               </div>\n// // //             </form>\n\n// // //             <hr className=\"my-4\" />\n\n// // //             {/* Upload Document Section */}\n// // //             <div className=\"upload-section\">\n// // //               <label className=\"form-label\">Upload Document (.docx)</label>\n// // //               <input\n// // //                 type=\"file\"\n// // //                 className=\"form-control\"\n// // //                 accept=\".docx\"\n// // //                 onChange={(e) => setFile(e.target.files[0])}\n// // //               />\n// // //               <div className=\"mt-2\">\n// // //                 <button className=\"btn btn-primary\" onClick={handleUpload}>\n// // //                   Upload\n// // //                 </button>\n// // //               </div>\n// // //             </div>\n// // //           </div>\n\n// // //           {/* Display Available Questions */}\n// // //           <div className=\"card available-questions\">\n// // //             <h5>Available Questions</h5>\n\n// // //             <h6 className=\"mt-3 text-primary\">MCQ Questions</h6>\n// // //             {questions.filter((q) => q.questionType === \"MCQ\").length === 0 && (\n// // //               <div className=\"text-muted\">No MCQs yet</div>\n// // //             )}\n// // //             {questions\n// // //               .filter((q) => q.questionType === \"MCQ\")\n// // //               .map((q, idx) => (\n// // //                 <div key={q._id} className=\"question-item\">\n// // //                   <strong>Q{idx + 1}:</strong> {q.questionText}\n// // //                   <div className=\"small text-muted\">\n// // //                     Options: {q.options.join(\" | \")}\n// // //                   </div>\n// // //                   <div className=\"small text-success\">\n// // //                     Correct: {q.correctAnswer}\n// // //                   </div>\n// // //                 </div>\n// // //               ))}\n\n// // //             <h6 className=\"mt-4 text-primary\">Theory Questions</h6>\n// // //             {questions.filter((q) => q.questionType === \"Theory\").length === 0 && (\n// // //               <div className=\"text-muted\">No theory questions yet</div>\n// // //             )}\n// // //             {questions\n// // //               .filter((q) => q.questionType === \"Theory\")\n// // //               .map((q, idx) => (\n// // //                 <div key={q._id} className=\"question-item\">\n// // //                   <strong>Q{idx + 1}:</strong> {q.questionText}\n// // //                 </div>\n// // //               ))}\n// // //           </div>\n// // //         </div>\n// // //       ) : (\n// // //         <div className=\"tab-content\">\n// // //           {/* Test Results Section */}\n// // //           <div className=\"card results-section\">\n// // //             <h5>Candidate Test Results</h5>\n\n// // //             {loadingResults ? (\n// // //               <div>Loading test results...</div>\n// // //             ) : results.length === 0 ? (\n// // //               <div className=\"text-muted\">No test results yet</div>\n// // //             ) : (\n// // //               <table className=\"results-table\">\n// // //                 <thead>\n// // //                   <tr>\n// // //                     <th>Name</th>\n// // //                     <th>Email</th>\n// // //                     <th>Total Questions</th>\n// // //                     <th>Correct</th>\n// // //                     <th>Score %</th>\n// // //                     <th>Submitted At</th>\n// // //                   </tr>\n// // //                 </thead>\n// // //                 <tbody>\n// // //                   {results.map((res, idx) => (\n// // //                     <tr key={idx}>\n// // //                       <td>{res.name}</td>\n// // //                       <td>{res.email}</td>\n// // //                       <td>{res.totalQuestions}</td>\n// // //                       <td>{res.correctAnswers}</td>\n// // //                       <td>{res.scorePercent}%</td>\n// // //                       <td>{new Date(res.submittedAt).toLocaleString()}</td>\n// // //                     </tr>\n// // //                   ))}\n// // //                 </tbody>\n// // //               </table>\n// // //             )}\n// // //           </div>\n// // //         </div>\n// // //       )}\n// // //     </div>\n// // //   );\n// // // }\n\n// // // // import React, { useEffect, useState } from \"react\";\n// // // // import API from \"../services/api\";\n// // // // import { useNavigate } from \"react-router-dom\";\n// // // // import \"../styles/AdminDashboard.css\";\n\n// // // // export default function AdminDashboard() {\n// // // //   const navigate = useNavigate();\n// // // //   const [questions, setQuestions] = useState([]);\n// // // //   const [results, setResults] = useState([]);\n// // // //   const [form, setForm] = useState({\n// // // //     questionText: \"\",\n// // // //     optionsText: \"\",\n// // // //     correctAnswer: \"\",\n// // // //   });\n// // // //   const [questionType, setQuestionType] = useState(\"MCQ\");\n// // // //   const [file, setFile] = useState(null);\n// // // //   const [loading, setLoading] = useState(false);\n// // // //   const [loadingResults, setLoadingResults] = useState(false);\n\n// // // //   // 🟢 Check admin login (token validation)\n// // // //   useEffect(() => {\n// // // //     const token = localStorage.getItem(\"adminToken\");\n// // // //     if (!token) navigate(\"/admin/login\");\n// // // //   }, [navigate]);\n\n// // // //   // 🟢 Fetch questions and test results on load\n// // // //   useEffect(() => {\n// // // //     fetchQuestions();\n// // // //     fetchResults();\n// // // //   }, []);\n\n// // // //   const fetchQuestions = async () => {\n// // // //     try {\n// // // //       const res = await API.get(\"/questions\");\n// // // //       setQuestions(res.data || []);\n// // // //     } catch (err) {\n// // // //       console.error(err);\n// // // //       alert(\"❌ Failed to load questions.\");\n// // // //     }\n// // // //   };\n\n// // // //   const fetchResults = async () => {\n// // // //     setLoadingResults(true);\n// // // //     try {\n// // // //       const res = await API.get(\"/tests\");\n// // // //       setResults(res.data || []);\n// // // //     } catch (err) {\n// // // //       console.error(err);\n// // // //       alert(\"❌ Failed to load test results.\");\n// // // //     } finally {\n// // // //       setLoadingResults(false);\n// // // //     }\n// // // //   };\n\n// // // //   // 🟢 Add Question Manually\n// // // //   const handleAddQuestion = async (e) => {\n// // // //     e.preventDefault();\n// // // //     const opts =\n// // // //       questionType === \"MCQ\"\n// // // //         ? form.optionsText.split(\"|\").map((s) => s.trim()).filter(Boolean)\n// // // //         : [];\n\n// // // //     if (!form.questionText.trim()) {\n// // // //       return alert(\"Please enter question text.\");\n// // // //     }\n// // // //     if (questionType === \"MCQ\" && (opts.length < 2 || !form.correctAnswer.trim())) {\n// // // //       return alert(\"Please enter at least 2 options and a correct answer.\");\n// // // //     }\n\n// // // //     setLoading(true);\n// // // //     try {\n// // // //       await API.post(\"/questions\", {\n// // // //         questionType,\n// // // //         questionText: form.questionText,\n// // // //         options: opts,\n// // // //         correctAnswer: questionType === \"MCQ\" ? form.correctAnswer : \"\",\n// // // //       });\n\n// // // //       setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" });\n// // // //       await fetchQuestions();\n// // // //       alert(\"✅ Question added successfully!\");\n// // // //     } catch (err) {\n// // // //       console.error(err);\n// // // //       alert(err.response?.data?.error || \"Failed to add question.\");\n// // // //     } finally {\n// // // //       setLoading(false);\n// // // //     }\n// // // //   };\n\n// // // //   // 🟢 Upload .docx question file\n// // // //   const handleUpload = async () => {\n// // // //     if (!file) return alert(\"Please select a file to upload.\");\n// // // //     const fd = new FormData();\n// // // //     fd.append(\"file\", file);\n\n// // // //     try {\n// // // //       const res = await API.post(\"/questions/upload\", fd, {\n// // // //         headers: { \"Content-Type\": \"multipart/form-data\" },\n// // // //       });\n// // // //       alert(res.data.message || \"✅ File uploaded successfully!\");\n// // // //       await fetchQuestions();\n// // // //     } catch (err) {\n// // // //       console.error(err);\n// // // //       alert(err.response?.data?.error || \"❌ File upload failed.\");\n// // // //     }\n// // // //   };\n\n// // // //   // 🟢 Logout\n// // // //   const handleLogout = () => {\n// // // //     localStorage.removeItem(\"adminToken\");\n// // // //     navigate(\"/admin/login\");\n// // // //   };\n\n// // // //   return (\n// // // //     <div className=\"container container-center py-4 admin-dashboard\">\n// // // //       {/* Header */}\n// // // //       <div className=\"d-flex justify-content-between align-items-center mb-3 admin-header\">\n// // // //         <h2>Admin Dashboard</h2>\n// // // //         <button className=\"btn btn-outline-danger btn-sm\" onClick={handleLogout}>\n// // // //           Logout\n// // // //         </button>\n// // // //       </div>\n\n// // // //       {/* Add Question / Upload Section */}\n// // // //       <div className=\"card card-clean p-4 mb-4 form-section\">\n// // // //         <h5>Add questions or upload documents that will be shown to candidates.</h5>\n\n// // // //         {/* Add Question Form */}\n// // // //         <form onSubmit={handleAddQuestion} className=\"mt-3\">\n// // // //           <div className=\"mb-3\">\n// // // //             <label className=\"form-label\">Question Type</label>\n// // // //             <select\n// // // //               className=\"form-select\"\n// // // //               value={questionType}\n// // // //               onChange={(e) => setQuestionType(e.target.value)}\n// // // //             >\n// // // //               <option value=\"MCQ\">MCQ</option>\n// // // //               <option value=\"Theory\">Theory</option>\n// // // //             </select>\n// // // //           </div>\n\n// // // //           <div className=\"mb-3\">\n// // // //             <label className=\"form-label\">Question Text</label>\n// // // //             <textarea\n// // // //               className=\"form-control\"\n// // // //               rows={questionType === \"Theory\" ? 3 : 2}\n// // // //               value={form.questionText}\n// // // //               onChange={(e) => setForm({ ...form, questionText: e.target.value })}\n// // // //               placeholder=\"Enter your question here...\"\n// // // //             />\n// // // //           </div>\n\n// // // //           {questionType === \"MCQ\" && (\n// // // //             <>\n// // // //               <div className=\"mb-3\">\n// // // //                 <label className=\"form-label\">Options (separate by |)</label>\n// // // //                 <input\n// // // //                   className=\"form-control\"\n// // // //                   value={form.optionsText}\n// // // //                   onChange={(e) =>\n// // // //                     setForm({ ...form, optionsText: e.target.value })\n// // // //                   }\n// // // //                   placeholder=\"Option A | Option B | Option C | Option D\"\n// // // //                 />\n// // // //               </div>\n\n// // // //               <div className=\"mb-3\">\n// // // //                 <label className=\"form-label\">\n// // // //                   Correct Answer (exact text of one option)\n// // // //                 </label>\n// // // //                 <input\n// // // //                   className=\"form-control\"\n// // // //                   value={form.correctAnswer}\n// // // //                   onChange={(e) =>\n// // // //                     setForm({ ...form, correctAnswer: e.target.value })\n// // // //                   }\n// // // //                   placeholder=\"Enter correct answer text\"\n// // // //                 />\n// // // //               </div>\n// // // //             </>\n// // // //           )}\n\n// // // //           <div className=\"mb-3 d-flex gap-2\">\n// // // //             <button\n// // // //               className=\"btn btn-success\"\n// // // //               type=\"submit\"\n// // // //               disabled={loading}\n// // // //             >\n// // // //               {loading ? \"Adding...\" : \"Add Question\"}\n// // // //             </button>\n// // // //             <button\n// // // //               type=\"button\"\n// // // //               className=\"btn btn-secondary\"\n// // // //               onClick={() =>\n// // // //                 setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" })\n// // // //               }\n// // // //             >\n// // // //               Clear\n// // // //             </button>\n// // // //           </div>\n// // // //         </form>\n\n// // // //         <hr className=\"my-4\" />\n\n// // // //         {/* Upload Document Section */}\n// // // //         <div className=\"mb-3 upload-section\">\n// // // //           <label className=\"form-label\">Upload Document (.docx)</label>\n// // // //           <input\n// // // //             type=\"file\"\n// // // //             className=\"form-control\"\n// // // //             accept=\".docx\"\n// // // //             onChange={(e) => setFile(e.target.files[0])}\n// // // //           />\n// // // //           <div className=\"mt-2\">\n// // // //             <button className=\"btn btn-primary\" onClick={handleUpload}>\n// // // //               Upload\n// // // //             </button>\n// // // //           </div>\n// // // //         </div>\n// // // //       </div>\n\n// // // //       {/* Available Questions */}\n// // // //       <div className=\"card card-clean p-4 mb-4 available-questions\">\n// // // //         <h5>Available Questions</h5>\n\n// // // //         {/* MCQ Section */}\n// // // //         <h6 className=\"mt-3 text-primary\">MCQ Questions</h6>\n// // // //         {questions.filter((q) => q.questionType === \"MCQ\").length === 0 && (\n// // // //           <div className=\"text-muted\">No MCQs yet</div>\n// // // //         )}\n// // // //         {questions\n// // // //           .filter((q) => q.questionType === \"MCQ\")\n// // // //           .map((q, idx) => (\n// // // //             <div key={q._id} className=\"mb-3 border-bottom pb-2\">\n// // // //               <strong>Q{idx + 1}:</strong> {q.questionText}\n// // // //               <div className=\"small text-muted\">\n// // // //                 Options: {q.options.join(\" | \")}\n// // // //               </div>\n// // // //               <div className=\"small text-success\">\n// // // //                 Correct: {q.correctAnswer}\n// // // //               </div>\n// // // //             </div>\n// // // //           ))}\n\n// // // //         {/* Theory Section */}\n// // // //         <h6 className=\"mt-4 text-primary\">Theory Questions</h6>\n// // // //         {questions.filter((q) => q.questionType === \"Theory\").length === 0 && (\n// // // //           <div className=\"text-muted\">No theory questions yet</div>\n// // // //         )}\n// // // //         {questions\n// // // //           .filter((q) => q.questionType === \"Theory\")\n// // // //           .map((q, idx) => (\n// // // //             <div key={q._id} className=\"mb-3 border-bottom pb-2\">\n// // // //               <strong>Q{idx + 1}:</strong> {q.questionText}\n// // // //             </div>\n// // // //           ))}\n// // // //       </div>\n\n// // // //       {/* Test Results Section */}\n// // // //       <div className=\"card card-clean p-4 mb-4 results-section\">\n// // // //         <h5>Candidate Test Results</h5>\n\n// // // //         {loadingResults ? (\n// // // //           <div>Loading test results...</div>\n// // // //         ) : results.length === 0 ? (\n// // // //           <div className=\"text-muted\">No test results yet</div>\n// // // //         ) : (\n// // // //           <table className=\"results-table\">\n// // // //             <thead>\n// // // //               <tr>\n// // // //                 <th>Name</th>\n// // // //                 <th>Email</th>\n// // // //                 <th>Total Questions</th>\n// // // //                 <th>Correct</th>\n// // // //                 <th>Score %</th>\n// // // //                 <th>Submitted At</th>\n// // // //               </tr>\n// // // //             </thead>\n// // // //             <tbody>\n// // // //               {results.map((res, idx) => (\n// // // //                 <tr key={idx}>\n// // // //                   <td>{res.name}</td>\n// // // //                   <td>{res.email}</td>\n// // // //                   <td>{res.totalQuestions}</td>\n// // // //                   <td>{res.correctAnswers}</td>\n// // // //                   <td>{res.scorePercent}%</td>\n// // // //                   <td>{new Date(res.submittedAt).toLocaleString()}</td>\n// // // //                 </tr>\n// // // //               ))}\n// // // //             </tbody>\n// // // //           </table>\n// // // //         )}\n// // // //       </div>\n// // // //     </div>\n// // // //   );\n// // // // }\n\n// // // // // import React, { useEffect, useState } from \"react\";\n// // // // // import API from \"../services/api\";\n// // // // // import { useNavigate } from \"react-router-dom\";\n// // // // // import \"../styles/AdminDashboard.css\";\n\n// // // // // export default function AdminDashboard() {\n// // // // //   const navigate = useNavigate();\n// // // // //   const [questions, setQuestions] = useState([]);\n// // // // //   const [form, setForm] = useState({\n// // // // //     questionText: \"\",\n// // // // //     optionsText: \"\",\n// // // // //     correctAnswer: \"\",\n// // // // //   });\n// // // // //   const [questionType, setQuestionType] = useState(\"MCQ\");\n// // // // //   const [file, setFile] = useState(null);\n// // // // //   const [loading, setLoading] = useState(false);\n\n// // // // //   // 🟢 Check admin login (token validation)\n// // // // //   useEffect(() => {\n// // // // //     const token = localStorage.getItem(\"adminToken\");\n// // // // //     if (!token) navigate(\"/admin/login\");\n// // // // //   }, [navigate]);\n\n// // // // //   // 🟢 Fetch questions from DB\n// // // // //   useEffect(() => {\n// // // // //     fetchQuestions();\n// // // // //   }, []);\n\n// // // // //   const fetchQuestions = async () => {\n// // // // //     try {\n// // // // //       const res = await API.get(\"/questions\");\n// // // // //       setQuestions(res.data || []);\n// // // // //     } catch (err) {\n// // // // //       console.error(err);\n// // // // //       alert(\"Failed to load questions.\");\n// // // // //     }\n// // // // //   };\n\n// // // // //   // 🟢 Add Question Manually\n// // // // //   const handleAddQuestion = async (e) => {\n// // // // //     e.preventDefault();\n// // // // //     const opts =\n// // // // //       questionType === \"MCQ\"\n// // // // //         ? form.optionsText.split(\"|\").map((s) => s.trim()).filter(Boolean)\n// // // // //         : [];\n\n// // // // //     if (!form.questionText.trim()) {\n// // // // //       return alert(\"Please enter question text.\");\n// // // // //     }\n// // // // //     if (questionType === \"MCQ\" && (opts.length < 2 || !form.correctAnswer.trim())) {\n// // // // //       return alert(\"Please enter at least 2 options and a correct answer.\");\n// // // // //     }\n\n// // // // //     setLoading(true);\n// // // // //     try {\n// // // // //       await API.post(\"/questions\", {\n// // // // //         questionType,\n// // // // //         questionText: form.questionText,\n// // // // //         options: opts,\n// // // // //         correctAnswer: questionType === \"MCQ\" ? form.correctAnswer : \"\",\n// // // // //       });\n\n// // // // //       setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" });\n// // // // //       await fetchQuestions();\n// // // // //       alert(\"✅ Question added successfully!\");\n// // // // //     } catch (err) {\n// // // // //       console.error(err);\n// // // // //       alert(err.response?.data?.error || \"Failed to add question.\");\n// // // // //     } finally {\n// // // // //       setLoading(false);\n// // // // //     }\n// // // // //   };\n\n// // // // //   // 🟢 Upload .docx question file\n// // // // //   const handleUpload = async () => {\n// // // // //     if (!file) return alert(\"Please select a file to upload.\");\n// // // // //     const fd = new FormData();\n// // // // //     fd.append(\"file\", file);\n\n// // // // //     try {\n// // // // //       const res = await API.post(\"/questions/upload\", fd, {\n// // // // //         headers: { \"Content-Type\": \"multipart/form-data\" },\n// // // // //       });\n// // // // //       alert(res.data.message || \"File uploaded successfully!\");\n// // // // //       await fetchQuestions();\n// // // // //     } catch (err) {\n// // // // //       console.error(err);\n// // // // //       alert(err.response?.data?.error || \"File upload failed.\");\n// // // // //     }\n// // // // //   };\n\n// // // // //   // 🟢 Logout\n// // // // //   const handleLogout = () => {\n// // // // //     localStorage.removeItem(\"adminToken\");\n// // // // //     navigate(\"/admin/login\");\n// // // // //   };\n\n// // // // //   return (\n// // // // //     <div className=\"container container-center py-4\">\n// // // // //       <div className=\"d-flex justify-content-between align-items-center mb-3\">\n// // // // //         <h2>Admin Dashboard</h2>\n// // // // //         <button className=\"btn btn-outline-danger btn-sm\" onClick={handleLogout}>\n// // // // //           Logout\n// // // // //         </button>\n// // // // //       </div>\n\n// // // // //       <div className=\"card card-clean p-4 mb-4\">\n// // // // //         <h5>Add questions or upload documents that will be shown to candidates.</h5>\n\n// // // // //         {/* Add Question Form */}\n// // // // //         <form onSubmit={handleAddQuestion} className=\"mt-3\">\n// // // // //           <div className=\"mb-3\">\n// // // // //             <label className=\"form-label\">Question Type</label>\n// // // // //             <select\n// // // // //               className=\"form-select\"\n// // // // //               value={questionType}\n// // // // //               onChange={(e) => setQuestionType(e.target.value)}\n// // // // //             >\n// // // // //               <option value=\"MCQ\">MCQ</option>\n// // // // //               <option value=\"Theory\">Theory</option>\n// // // // //             </select>\n// // // // //           </div>\n\n// // // // //           <div className=\"mb-3\">\n// // // // //             <label className=\"form-label\">Question Text</label>\n// // // // //             <textarea\n// // // // //               className=\"form-control\"\n// // // // //               rows={questionType === \"Theory\" ? 3 : 2}\n// // // // //               value={form.questionText}\n// // // // //               onChange={(e) => setForm({ ...form, questionText: e.target.value })}\n// // // // //               placeholder=\"Enter your question here...\"\n// // // // //             />\n// // // // //           </div>\n\n// // // // //           {questionType === \"MCQ\" && (\n// // // // //             <>\n// // // // //               <div className=\"mb-3\">\n// // // // //                 <label className=\"form-label\">Options (separate by |)</label>\n// // // // //                 <input\n// // // // //                   className=\"form-control\"\n// // // // //                   value={form.optionsText}\n// // // // //                   onChange={(e) =>\n// // // // //                     setForm({ ...form, optionsText: e.target.value })\n// // // // //                   }\n// // // // //                   placeholder=\"Option A | Option B | Option C | Option D\"\n// // // // //                 />\n// // // // //               </div>\n\n// // // // //               <div className=\"mb-3\">\n// // // // //                 <label className=\"form-label\">\n// // // // //                   Correct Answer (exact text of one option)\n// // // // //                 </label>\n// // // // //                 <input\n// // // // //                   className=\"form-control\"\n// // // // //                   value={form.correctAnswer}\n// // // // //                   onChange={(e) =>\n// // // // //                     setForm({ ...form, correctAnswer: e.target.value })\n// // // // //                   }\n// // // // //                   placeholder=\"Enter correct answer text\"\n// // // // //                 />\n// // // // //               </div>\n// // // // //             </>\n// // // // //           )}\n\n// // // // //           <div className=\"mb-3 d-flex gap-2\">\n// // // // //             <button\n// // // // //               className=\"btn btn-success\"\n// // // // //               type=\"submit\"\n// // // // //               disabled={loading}\n// // // // //             >\n// // // // //               {loading ? \"Adding...\" : \"Add Question\"}\n// // // // //             </button>\n// // // // //             <button\n// // // // //               type=\"button\"\n// // // // //               className=\"btn btn-secondary\"\n// // // // //               onClick={() =>\n// // // // //                 setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" })\n// // // // //               }\n// // // // //             >\n// // // // //               Clear\n// // // // //             </button>\n// // // // //           </div>\n// // // // //         </form>\n\n// // // // //         <hr className=\"my-4\" />\n\n// // // // //         {/* Upload Document Section */}\n// // // // //         <div className=\"mb-3\">\n// // // // //           <label className=\"form-label\">Upload Document (.docx)</label>\n// // // // //           <input\n// // // // //             type=\"file\"\n// // // // //             className=\"form-control\"\n// // // // //             accept=\".docx\"\n// // // // //             onChange={(e) => setFile(e.target.files[0])}\n// // // // //           />\n// // // // //           <div className=\"mt-2\">\n// // // // //             <button className=\"btn btn-primary\" onClick={handleUpload}>\n// // // // //               Upload\n// // // // //             </button>\n// // // // //           </div>\n// // // // //         </div>\n// // // // //       </div>\n\n// // // // //       {/* Display All Questions */}\n// // // // //       <div className=\"card card-clean p-4\">\n// // // // //         <h5>Available Questions</h5>\n\n// // // // //         {/* MCQ Section */}\n// // // // //         <h6 className=\"mt-3 text-primary\">MCQ Questions</h6>\n// // // // //         {questions.filter((q) => q.questionType === \"MCQ\").length === 0 && (\n// // // // //           <div className=\"text-muted\">No MCQs yet</div>\n// // // // //         )}\n// // // // //         {questions\n// // // // //           .filter((q) => q.questionType === \"MCQ\")\n// // // // //           .map((q, idx) => (\n// // // // //             <div key={q._id} className=\"mb-3 border-bottom pb-2\">\n// // // // //               <strong>Q{idx + 1}:</strong> {q.questionText}\n// // // // //               <div className=\"small text-muted\">\n// // // // //                 Options: {q.options.join(\" | \")}\n// // // // //               </div>\n// // // // //               <div className=\"small text-success\">\n// // // // //                 Correct: {q.correctAnswer}\n// // // // //               </div>\n// // // // //             </div>\n// // // // //           ))}\n\n// // // // //         {/* Theory Section */}\n// // // // //         <h6 className=\"mt-4 text-primary\">Theory Questions</h6>\n// // // // //         {questions.filter((q) => q.questionType === \"Theory\").length === 0 && (\n// // // // //           <div className=\"text-muted\">No theory questions yet</div>\n// // // // //         )}\n// // // // //         {questions\n// // // // //           .filter((q) => q.questionType === \"Theory\")\n// // // // //           .map((q, idx) => (\n// // // // //             <div key={q._id} className=\"mb-3 border-bottom pb-2\">\n// // // // //               <strong>Q{idx + 1}:</strong> {q.questionText}\n// // // // //             </div>\n// // // // //           ))}\n// // // // //       </div>\n// // // // //     </div>\n// // // // //   );\n// // // // // }\n_s(AdminDashboard, \"bwn+4N09t26scruoU7m0FHQ1Pe4=\", false, function () {\n  return [useNavigate];\n});\n_c = AdminDashboard;\nvar _c;\n$RefreshReg$(_c, \"AdminDashboard\");","map":{"version":3,"names":["React","useEffect","useState","API","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","AdminDashboard","_s","navigate","questions","setQuestions","results","setResults","activeTab","setActiveTab","form","setForm","questionText","optionsText","correctAnswer","answerText","questionType","setQuestionType","file","setFile","loading","setLoading","loadingResults","setLoadingResults","editingId","setEditingId","token","localStorage","getItem","fetchQuestions","fetchResults","res","getAll","data","err","console","error","alert","tests","handleAddOrUpdate","e","preventDefault","opts","split","map","s","trim","filter","Boolean","payload","options","log","update","create","_err$response","_err$response$data","response","handleDelete","id","window","confirm","delete","handleEdit","q","_id","join","scrollTo","top","behavior","handleUpload","fd","FormData","append","post","headers","message","_err$response2","_err$response2$data","handleLogout","removeItem","handleViewValidation","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onSubmit","value","onChange","target","rows","placeholder","type","disabled","accept","files","length","idx","name","email","totalQuestions","correctAnswers","scorePercent","style","color","status","fontWeight","Date","submittedAt","toLocaleString","_c","$RefreshReg$"],"sources":["C:/Users/HP/Downloads/INTERVIEW PROCESS/INTERVIEW PROCESS/client/src/pages/AdminDashboard.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport API from \"../services/api\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"../styles/AdminDashboard.css\";\r\n\r\nexport default function AdminDashboard() {\r\n  const navigate = useNavigate();\r\n  const [questions, setQuestions] = useState([]);\r\n  const [results, setResults] = useState([]);\r\n  const [activeTab, setActiveTab] = useState(\"questions\");\r\n  const [form, setForm] = useState({\r\n    questionText: \"\",\r\n    optionsText: \"\",\r\n    correctAnswer: \"\",\r\n    answerText: \"\", // admin-entered model answer for theory\r\n  });\r\n  const [questionType, setQuestionType] = useState(\"MCQ\");\r\n  const [file, setFile] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingResults, setLoadingResults] = useState(false);\r\n  const [editingId, setEditingId] = useState(null);\r\n\r\n  // 🟢 Check admin login\r\n  useEffect(() => {\r\n    const token = localStorage.getItem(\"adminToken\");\r\n    if (!token) navigate(\"/admin/login\");\r\n  }, [navigate]);\r\n\r\n  // 🟢 Initial fetch\r\n  useEffect(() => {\r\n    fetchQuestions();\r\n    fetchResults();\r\n  }, []);\r\n\r\n  const fetchQuestions = async () => {\r\n    try {\r\n      const res = await API.questions.getAll();\r\n      setQuestions(res.data || []);\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(\"❌ Failed to load questions.\");\r\n    }\r\n  };\r\n\r\n  const fetchResults = async () => {\r\n    setLoadingResults(true);\r\n    try {\r\n      const res = await API.tests.getAll();\r\n      setResults(res.data || []);\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(\"❌ Failed to load test results.\");\r\n    } finally {\r\n      setLoadingResults(false);\r\n    }\r\n  };\r\n\r\n  // 🟢 Add or Update Question\r\n  const handleAddOrUpdate = async (e) => {\r\n    e.preventDefault();\r\n    const opts =\r\n      questionType === \"MCQ\"\r\n        ? form.optionsText.split(\"|\").map((s) => s.trim()).filter(Boolean)\r\n        : [];\r\n\r\n    if (!form.questionText.trim()) {\r\n      return alert(\"Please enter question text.\");\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      const payload = {\r\n        questionType,\r\n        questionText: form.questionText,\r\n        options: opts,\r\n        correctAnswer: questionType === \"MCQ\" ? form.correctAnswer : form.answerText,\r\n      };\r\n      console.log(\"Submitting payload ->\", payload);\r\n\r\n      if (editingId) {\r\n        await API.questions.update(editingId, payload);\r\n        alert(\"✅ Question updated successfully!\");\r\n      } else {\r\n        await API.questions.create(payload);\r\n        alert(\"✅ Question added successfully!\");\r\n      }\r\n\r\n      setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\", answerText: \"\" });\r\n      setEditingId(null);\r\n      await fetchQuestions();\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(err.response?.data?.error || \"❌ Operation failed.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // 🟢 Delete Question\r\n  const handleDelete = async (id) => {\r\n    if (!window.confirm(\"Are you sure you want to delete this question?\")) return;\r\n    try {\r\n      await API.delete(`/questions/${id}`);\r\n      alert(\"🗑️ Question deleted successfully!\");\r\n      await fetchQuestions();\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(\"❌ Failed to delete question.\");\r\n    }\r\n  };\r\n\r\n  // 🟢 Edit Question\r\n  const handleEdit = (q) => {\r\n    setEditingId(q._id);\r\n    setQuestionType(q.questionType);\r\n    setForm({\r\n      questionText: q.questionText,\r\n      optionsText: q.options ? q.options.join(\" | \") : \"\",\r\n      correctAnswer: q.correctAnswer || \"\",\r\n      answerText: q.questionType === \"Theory\" ? q.correctAnswer || \"\" : \"\",\r\n    });\r\n    window.scrollTo({ top: 0, behavior: \"smooth\" });\r\n  };\r\n\r\n  // 🟢 Upload File\r\n  const handleUpload = async () => {\r\n    if (!file) return alert(\"Please select a file to upload.\");\r\n    const fd = new FormData();\r\n    fd.append(\"file\", file);\r\n\r\n    try {\r\n      const res = await API.post(\"/questions/upload\", fd, {\r\n        headers: { \"Content-Type\": \"multipart/form-data\" },\r\n      });\r\n      alert(res.data.message || \"✅ File uploaded successfully!\");\r\n      await fetchQuestions();\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(err.response?.data?.error || \"❌ File upload failed.\");\r\n    }\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem(\"adminToken\");\r\n    navigate(\"/admin/login\");\r\n  };\r\n\r\n  // 🟢 Navigate to validation page\r\n  const handleViewValidation = (id) => {\r\n    navigate(`/admin/result/${id}`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"admin-dashboard\">\r\n      {/* Header */}\r\n      <div className=\"admin-header\">\r\n        <h2>Admin Dashboard</h2>\r\n        <button className=\"logout-btn\" onClick={handleLogout}>\r\n          Logout\r\n        </button>\r\n      </div>\r\n\r\n      {/* Tabs */}\r\n      <div className=\"tab-buttons\">\r\n        <button\r\n          className={`tab-btn ${activeTab === \"questions\" ? \"active\" : \"\"}`}\r\n          onClick={() => setActiveTab(\"questions\")}\r\n        >\r\n          🧩 Questions\r\n        </button>\r\n        <button\r\n          className={`tab-btn ${activeTab === \"results\" ? \"active\" : \"\"}`}\r\n          onClick={() => setActiveTab(\"results\")}\r\n        >\r\n          📊 Test Results\r\n        </button>\r\n      </div>\r\n\r\n      {/* 🧩 QUESTIONS TAB */}\r\n      {activeTab === \"questions\" ? (\r\n        <div className=\"tab-content\">\r\n          <div className=\"card form-section\">\r\n            <h5>{editingId ? \"✏️ Edit Question\" : \"➕ Add or Upload Questions\"}</h5>\r\n\r\n            <form onSubmit={handleAddOrUpdate}>\r\n              <div className=\"mb-3\">\r\n                <label className=\"form-label\">Question Type</label>\r\n                <select\r\n                  className=\"form-select\"\r\n                  value={questionType}\r\n                  onChange={(e) => setQuestionType(e.target.value)}\r\n                >\r\n                  <option value=\"MCQ\">MCQ</option>\r\n                  <option value=\"Theory\">Theory</option>\r\n                </select>\r\n              </div>\r\n\r\n              <div className=\"mb-3\">\r\n                <label className=\"form-label\">Question Text</label>\r\n                <textarea\r\n                  className=\"form-control\"\r\n                  rows={questionType === \"Theory\" ? 3 : 2}\r\n                  value={form.questionText}\r\n                  onChange={(e) =>\r\n                    setForm({ ...form, questionText: e.target.value })\r\n                  }\r\n                  placeholder=\"Enter your question here...\"\r\n                />\r\n              </div>\r\n\r\n              {questionType === \"Theory\" && (\r\n                <div className=\"mb-3\">\r\n                  <label className=\"form-label\">Answer / Model Answer</label>\r\n                  <textarea\r\n                    className=\"form-control\"\r\n                    rows={4}\r\n                    value={form.answerText}\r\n                    onChange={(e) =>\r\n                      setForm({ ...form, answerText: e.target.value })\r\n                    }\r\n                    placeholder=\"Enter the model answer for theory questions (this will be stored as the correct answer)\"\r\n                  />\r\n                </div>\r\n              )}\r\n\r\n              {questionType === \"MCQ\" && (\r\n                <>\r\n                  <div className=\"mb-3\">\r\n                    <label className=\"form-label\">Options (separate by |)</label>\r\n                    <input\r\n                      className=\"form-control\"\r\n                      value={form.optionsText}\r\n                      onChange={(e) =>\r\n                        setForm({ ...form, optionsText: e.target.value })\r\n                      }\r\n                      placeholder=\"Option A | Option B | Option C | Option D\"\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"mb-3\">\r\n                    <label className=\"form-label\">Correct Answer</label>\r\n                    <input\r\n                      className=\"form-control\"\r\n                      value={form.correctAnswer}\r\n                      onChange={(e) =>\r\n                        setForm({ ...form, correctAnswer: e.target.value })\r\n                      }\r\n                      placeholder=\"Enter correct answer text\"\r\n                    />\r\n                  </div>\r\n                </>\r\n              )}\r\n\r\n              <div className=\"d-flex gap-2\">\r\n                <button className=\"btn btn-success\" type=\"submit\" disabled={loading}>\r\n                  {loading\r\n                    ? \"Saving...\"\r\n                    : editingId\r\n                    ? \"Update Question\"\r\n                    : \"Add Question\"}\r\n                </button>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-secondary\"\r\n                  onClick={() => {\r\n                    setForm({\r\n                      questionText: \"\",\r\n                      optionsText: \"\",\r\n                      correctAnswer: \"\",\r\n                      answerText: \"\",\r\n                    });\r\n                    setEditingId(null);\r\n                  }}\r\n                >\r\n                  Clear\r\n                </button>\r\n              </div>\r\n            </form>\r\n\r\n            <hr className=\"my-4\" />\r\n\r\n            {/* Upload Section */}\r\n            <div className=\"upload-section\">\r\n              <label className=\"form-label\">Upload Document (.docx)</label>\r\n              <input\r\n                type=\"file\"\r\n                className=\"form-control\"\r\n                accept=\".docx\"\r\n                onChange={(e) => setFile(e.target.files[0])}\r\n              />\r\n              <div className=\"mt-2\">\r\n                <button className=\"btn btn-primary\" onClick={handleUpload}>\r\n                  Upload\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Display Questions */}\r\n          <div className=\"card available-questions\">\r\n            <h5>Available Questions</h5>\r\n\r\n            <h6 className=\"mt-3 text-primary\">MCQ Questions</h6>\r\n            {questions.filter((q) => q.questionType === \"MCQ\").length === 0 && (\r\n              <div className=\"text-muted\">No MCQs yet</div>\r\n            )}\r\n            {questions\r\n              .filter((q) => q.questionType === \"MCQ\")\r\n              .map((q, idx) => (\r\n                <div key={q._id} className=\"question-item\">\r\n                  <strong>Q{idx + 1}:</strong> {q.questionText}\r\n                  <div className=\"small text-muted\">\r\n                    Options: {q.options.join(\" | \")}\r\n                  </div>\r\n                  <div className=\"small text-success\">\r\n                    Correct: {q.correctAnswer}\r\n                  </div>\r\n                  <div className=\"action-buttons\">\r\n                    <button\r\n                      className=\"btn btn-sm btn-warning\"\r\n                      onClick={() => handleEdit(q)}\r\n                    >\r\n                      Edit\r\n                    </button>\r\n                    <button\r\n                      className=\"btn btn-sm btn-danger\"\r\n                      onClick={() => handleDelete(q._id)}\r\n                    >\r\n                      Delete\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n\r\n            <h6 className=\"mt-4 text-primary\">Theory Questions</h6>\r\n            {questions.filter((q) => q.questionType === \"Theory\").length === 0 && (\r\n              <div className=\"text-muted\">No theory questions yet</div>\r\n            )}\r\n            {questions\r\n              .filter((q) => q.questionType === \"Theory\")\r\n              .map((q, idx) => (\r\n                <div key={q._id} className=\"question-item\">\r\n                  <strong>Q{idx + 1}:</strong> {q.questionText}\r\n                  {q.correctAnswer && (\r\n                    <div className=\"small text-success\">\r\n                      <b>Model Answer:</b> {q.correctAnswer}\r\n                    </div>\r\n                  )}\r\n                  <div className=\"action-buttons\">\r\n                    <button\r\n                      className=\"btn btn-sm btn-warning\"\r\n                      onClick={() => handleEdit(q)}\r\n                    >\r\n                      Edit\r\n                    </button>\r\n                    <button\r\n                      className=\"btn btn-sm btn-danger\"\r\n                      onClick={() => handleDelete(q._id)}\r\n                    >\r\n                      Delete\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        // 📊 TEST RESULTS TAB\r\n        <div className=\"tab-content\">\r\n          <div className=\"card results-section\">\r\n            <h5>Candidate Test Results</h5>\r\n            {loadingResults ? (\r\n              <div>Loading test results...</div>\r\n            ) : results.length === 0 ? (\r\n              <div className=\"text-muted\">No test results yet</div>\r\n            ) : (\r\n              <table className=\"results-table\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Name</th>\r\n                    <th>Email</th>\r\n                    <th>Total</th>\r\n                    <th>Correct</th>\r\n                    <th>Score %</th>\r\n                    <th>Status</th>\r\n                    <th>Submitted At</th>\r\n                    <th>Action</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {results.map((res, idx) => (\r\n                    <tr key={idx}>\r\n                      <td>{res.name}</td>\r\n                      <td>{res.email}</td>\r\n                      <td>{res.totalQuestions}</td>\r\n                      <td>{res.correctAnswers}</td>\r\n                      <td>{res.scorePercent}%</td>\r\n                      <td>\r\n                        <span\r\n                          style={{\r\n                            color:\r\n                              res.status === \"Validated\" ? \"green\" : \"orange\",\r\n                            fontWeight: 600,\r\n                          }}\r\n                        >\r\n                          {res.status || \"Validation Pending\"}\r\n                        </span>\r\n                      </td>\r\n                      <td>{new Date(res.submittedAt).toLocaleString()}</td>\r\n                      <td>\r\n                        <button\r\n                          className=\"btn btn-sm btn-primary\"\r\n                          onClick={() => handleViewValidation(res._id)}\r\n                        >\r\n                          View / Validate\r\n                        </button>\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import API from \"../services/api\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import \"../styles/AdminDashboard.css\";\r\n\r\n// export default function AdminDashboard() {\r\n//   const navigate = useNavigate();\r\n//   const [questions, setQuestions] = useState([]);\r\n//   const [results, setResults] = useState([]);\r\n//   const [activeTab, setActiveTab] = useState(\"questions\");\r\n//   const [form, setForm] = useState({\r\n//     questionText: \"\",\r\n//     optionsText: \"\",\r\n//     correctAnswer: \"\",\r\n//     answerText: \"\", // <-- ADDED: admin-entered answer for Theory\r\n//   });\r\n//   const [questionType, setQuestionType] = useState(\"MCQ\");\r\n//   const [file, setFile] = useState(null);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [loadingResults, setLoadingResults] = useState(false);\r\n//   const [editingId, setEditingId] = useState(null);\r\n\r\n//   // 🟢 Check admin login\r\n//   useEffect(() => {\r\n//     const token = localStorage.getItem(\"adminToken\");\r\n//     if (!token) navigate(\"/admin/login\");\r\n//   }, [navigate]);\r\n\r\n//   // 🟢 Initial fetch\r\n//   useEffect(() => {\r\n//     fetchQuestions();\r\n//     fetchResults();\r\n//   }, []);\r\n\r\n//   const fetchQuestions = async () => {\r\n//     try {\r\n//       const res = await API.get(\"/questions\");\r\n//       setQuestions(res.data || []);\r\n//     } catch (err) {\r\n//       console.error(err);\r\n//       alert(\"❌ Failed to load questions.\");\r\n//     }\r\n//   };\r\n\r\n//   const fetchResults = async () => {\r\n//     setLoadingResults(true);\r\n//     try {\r\n//       const res = await API.get(\"/tests\");\r\n//       setResults(res.data || []);\r\n//     } catch (err) {\r\n//       console.error(err);\r\n//       alert(\"❌ Failed to load test results.\");\r\n//     } finally {\r\n//       setLoadingResults(false);\r\n//     }\r\n//   };\r\n\r\n//   // 🟢 Add or Update Question\r\n//   const handleAddOrUpdate = async (e) => {\r\n//     e.preventDefault();\r\n//     const opts =\r\n//       questionType === \"MCQ\"\r\n//         ? form.optionsText.split(\"|\").map((s) => s.trim()).filter(Boolean)\r\n//         : [];\r\n\r\n//     if (!form.questionText.trim()) {\r\n//       return alert(\"Please enter question text.\");\r\n//     }\r\n\r\n//     setLoading(true);\r\n//     try {\r\n//       const payload = {\r\n//         questionType,\r\n//         questionText: form.questionText,\r\n//         options: opts,\r\n//         // for MCQ use form.correctAnswer, for Theory use form.answerText as the 'correctAnswer' stored on backend\r\n//         correctAnswer: questionType === \"MCQ\" ? form.correctAnswer : form.answerText,\r\n//       };\r\n//        console.log(\"Submitting payload ->\", payload); // inspect this in Network/Console\r\n\r\n//       if (editingId) {\r\n//         await API.put(`/questions/${editingId}`, payload);\r\n//         alert(\"✅ Question updated successfully!\");\r\n//       } else {\r\n//         await API.post(\"/questions\", payload);\r\n//         alert(\"✅ Question added successfully!\");\r\n//       }\r\n\r\n//       setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\", answerText: \"\" });\r\n//       setEditingId(null);\r\n//       await fetchQuestions();\r\n//     } catch (err) {\r\n//       console.error(err);\r\n//       alert(err.response?.data?.error || \"❌ Operation failed.\");\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   // 🟢 Delete Question\r\n//   const handleDelete = async (id) => {\r\n//     if (!window.confirm(\"Are you sure you want to delete this question?\")) return;\r\n\r\n//     try {\r\n//       await API.delete(`/questions/${id}`);\r\n//       alert(\"🗑️ Question deleted successfully!\");\r\n//       await fetchQuestions();\r\n//     } catch (err) {\r\n//       console.error(err);\r\n//       alert(\"❌ Failed to delete question.\");\r\n//     }\r\n//   };\r\n\r\n//   // 🟢 Edit Question\r\n//   const handleEdit = (q) => {\r\n//     setEditingId(q._id);\r\n//     setQuestionType(q.questionType);\r\n//     setForm({\r\n//       questionText: q.questionText,\r\n//       optionsText: q.options ? q.options.join(\" | \") : \"\",\r\n//       correctAnswer: q.correctAnswer || \"\", // used for MCQ\r\n//       answerText: q.questionType === \"Theory\" ? (q.correctAnswer || \"\") : \"\", // <-- ADDED: populate answerText from stored correctAnswer for theory\r\n//     });\r\n//     window.scrollTo({ top: 0, behavior: \"smooth\" });\r\n//   };\r\n\r\n//   // 🟢 Upload File\r\n//   const handleUpload = async () => {\r\n//     if (!file) return alert(\"Please select a file to upload.\");\r\n//     const fd = new FormData();\r\n//     fd.append(\"file\", file);\r\n\r\n//     try {\r\n//       const res = await API.post(\"/questions/upload\", fd, {\r\n//         headers: { \"Content-Type\": \"multipart/form-data\" },\r\n//       });\r\n//       alert(res.data.message || \"✅ File uploaded successfully!\");\r\n//       await fetchQuestions();\r\n//     } catch (err) {\r\n//       console.error(err);\r\n//       alert(err.response?.data?.error || \"❌ File upload failed.\");\r\n//     }\r\n//   };\r\n\r\n//   const handleLogout = () => {\r\n//     localStorage.removeItem(\"adminToken\");\r\n//     navigate(\"/admin/login\");\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"admin-dashboard\">\r\n//       {/* Header */}\r\n//       <div className=\"admin-header\">\r\n//         <h2>Admin Dashboard</h2>\r\n//         <button className=\"logout-btn\" onClick={handleLogout}>\r\n//           Logout\r\n//         </button>\r\n//       </div>\r\n\r\n//       {/* Tabs */}\r\n//       <div className=\"tab-buttons\">\r\n//         <button\r\n//           className={`tab-btn ${activeTab === \"questions\" ? \"active\" : \"\"}`}\r\n//           onClick={() => setActiveTab(\"questions\")}\r\n//         >\r\n//           🧩 Questions\r\n//         </button>\r\n//         <button\r\n//           className={`tab-btn ${activeTab === \"results\" ? \"active\" : \"\"}`}\r\n//           onClick={() => setActiveTab(\"results\")}\r\n//         >\r\n//           📊 Test Results\r\n//         </button>\r\n//       </div>\r\n\r\n//       {/* 🧩 QUESTIONS TAB */}\r\n//       {activeTab === \"questions\" ? (\r\n//         <div className=\"tab-content\">\r\n//           <div className=\"card form-section\">\r\n//             <h5>{editingId ? \"✏️ Edit Question\" : \"➕ Add or Upload Questions\"}</h5>\r\n\r\n//             <form onSubmit={handleAddOrUpdate}>\r\n//               <div className=\"mb-3\">\r\n//                 <label className=\"form-label\">Question Type</label>\r\n//                 <select\r\n//                   className=\"form-select\"\r\n//                   value={questionType}\r\n//                   onChange={(e) => setQuestionType(e.target.value)}\r\n//                 >\r\n//                   <option value=\"MCQ\">MCQ</option>\r\n//                   <option value=\"Theory\">Theory</option>\r\n//                 </select>\r\n//               </div>\r\n\r\n//               <div className=\"mb-3\">\r\n//                 <label className=\"form-label\">Question Text</label>\r\n//                 <textarea\r\n//                   className=\"form-control\"\r\n//                   rows={questionType === \"Theory\" ? 3 : 2}\r\n//                   value={form.questionText}\r\n//                   onChange={(e) =>\r\n//                     setForm({ ...form, questionText: e.target.value })\r\n//                   }\r\n//                   placeholder=\"Enter your question here...\"\r\n//                 />\r\n//               </div>\r\n\r\n//               {/* Theory: show admin answer input */}\r\n//               {questionType === \"Theory\" && (\r\n//                 <div className=\"mb-3\">\r\n//                   <label className=\"form-label\">Answer / Model Answer</label>\r\n//                   <textarea\r\n//                     className=\"form-control\"\r\n//                     rows={4}\r\n//                     value={form.answerText}\r\n//                     onChange={(e) => setForm({ ...form, answerText: e.target.value })}\r\n//                     placeholder=\"Enter the model answer for theory questions (this will be stored as the correct answer)\"\r\n//                   />\r\n//                 </div>\r\n//               )}\r\n\r\n//               {questionType === \"MCQ\" && (\r\n//                 <>\r\n//                   <div className=\"mb-3\">\r\n//                     <label className=\"form-label\">Options (separate by |)</label>\r\n//                     <input\r\n//                       className=\"form-control\"\r\n//                       value={form.optionsText}\r\n//                       onChange={(e) =>\r\n//                         setForm({ ...form, optionsText: e.target.value })\r\n//                       }\r\n//                       placeholder=\"Option A | Option B | Option C | Option D\"\r\n//                     />\r\n//                   </div>\r\n\r\n//                   <div className=\"mb-3\">\r\n//                     <label className=\"form-label\">Correct Answer</label>\r\n//                     <input\r\n//                       className=\"form-control\"\r\n//                       value={form.correctAnswer}\r\n//                       onChange={(e) =>\r\n//                         setForm({ ...form, correctAnswer: e.target.value })\r\n//                       }\r\n//                       placeholder=\"Enter correct answer text\"\r\n//                     />\r\n//                   </div>\r\n//                 </>\r\n//               )}\r\n\r\n//               <div className=\"d-flex gap-2\">\r\n//                 <button className=\"btn btn-success\" type=\"submit\" disabled={loading}>\r\n//                   {loading\r\n//                     ? \"Saving...\"\r\n//                     : editingId\r\n//                     ? \"Update Question\"\r\n//                     : \"Add Question\"}\r\n//                 </button>\r\n//                 <button\r\n//                   type=\"button\"\r\n//                   className=\"btn btn-secondary\"\r\n//                   onClick={() => {\r\n//                     setForm({\r\n//                       questionText: \"\",\r\n//                       optionsText: \"\",\r\n//                       correctAnswer: \"\",\r\n//                       answerText: \"\", // <-- clear it\r\n//                     });\r\n//                     setEditingId(null);\r\n//                   }}\r\n//                 >\r\n//                   Clear\r\n//                 </button>\r\n//               </div>\r\n//             </form>\r\n\r\n//             <hr className=\"my-4\" />\r\n\r\n//             {/* Upload Section */}\r\n//             <div className=\"upload-section\">\r\n//               <label className=\"form-label\">Upload Document (.docx)</label>\r\n//               <input\r\n//                 type=\"file\"\r\n//                 className=\"form-control\"\r\n//                 accept=\".docx\"\r\n//                 onChange={(e) => setFile(e.target.files[0])}\r\n//               />\r\n//               <div className=\"mt-2\">\r\n//                 <button className=\"btn btn-primary\" onClick={handleUpload}>\r\n//                   Upload\r\n//                 </button>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n\r\n//           {/* Display Questions */}\r\n//           <div className=\"card available-questions\">\r\n//             <h5>Available Questions</h5>\r\n\r\n//             {/* MCQ Section */}\r\n//             <h6 className=\"mt-3 text-primary\">MCQ Questions</h6>\r\n//             {questions.filter((q) => q.questionType === \"MCQ\").length === 0 && (\r\n//               <div className=\"text-muted\">No MCQs yet</div>\r\n//             )}\r\n//             {questions\r\n//               .filter((q) => q.questionType === \"MCQ\")\r\n//               .map((q, idx) => (\r\n//                 <div key={q._id} className=\"question-item\">\r\n//                   <strong>Q{idx + 1}:</strong> {q.questionText}\r\n//                   <div className=\"small text-muted\">\r\n//                     Options: {q.options.join(\" | \")}\r\n//                   </div>\r\n//                   <div className=\"small text-success\">\r\n//                     Correct: {q.correctAnswer}\r\n//                   </div>\r\n//                   <div className=\"action-buttons\">\r\n//                     <button\r\n//                       className=\"btn btn-sm btn-warning\"\r\n//                       onClick={() => handleEdit(q)}\r\n//                     >\r\n//                       Edit\r\n//                     </button>\r\n//                     <button\r\n//                       className=\"btn btn-sm btn-danger\"\r\n//                       onClick={() => handleDelete(q._id)}\r\n//                     >\r\n//                       Delete\r\n//                     </button>\r\n//                   </div>\r\n//                 </div>\r\n//               ))}\r\n\r\n//             {/* Theory Section */}\r\n//             <h6 className=\"mt-4 text-primary\">Theory Questions</h6>\r\n//             {questions.filter((q) => q.questionType === \"Theory\").length === 0 && (\r\n//               <div className=\"text-muted\">No theory questions yet</div>\r\n//             )}\r\n//             {questions\r\n//               .filter((q) => q.questionType === \"Theory\")\r\n//               .map((q, idx) => {\r\n//                 const relatedAnswers = results\r\n//                   .flatMap((r) => r.answers || [])\r\n//                   .filter(\r\n//                     (a) =>\r\n//                       a.question.trim().toLowerCase() ===\r\n//                       q.questionText.trim().toLowerCase()\r\n//                   );\r\n//                 return (\r\n//                   <div key={q._id} className=\"question-item\">\r\n//                     <strong>Q{idx + 1}:</strong> {q.questionText}\r\n//                     {/* show admin-provided model answer if exists */}\r\n//                     {q.correctAnswer ? (\r\n//                       <div className=\"small text-success\">\r\n//                         <b>Model Answer:</b> {q.correctAnswer}\r\n//                       </div>\r\n//                     ) : null}\r\n\r\n//                     {relatedAnswers.length > 0 ? (\r\n//                       <div className=\"theory-answers\">\r\n//                         <b>Answers:</b>\r\n//                         <ul>\r\n//                           {relatedAnswers.map((a, i) => (\r\n//                             <li key={i}>{a.userAnswer}</li>\r\n//                           ))}\r\n//                         </ul>\r\n//                       </div>\r\n//                     ) : (\r\n//                       <div className=\"text-muted small\">No answers yet</div>\r\n//                     )}\r\n//                     <div className=\"action-buttons\">\r\n//                       <button\r\n//                         className=\"btn btn-sm btn-warning\"\r\n//                         onClick={() => handleEdit(q)}\r\n//                       >\r\n//                         Edit\r\n//                       </button>\r\n//                       <button\r\n//                         className=\"btn btn-sm btn-danger\"\r\n//                         onClick={() => handleDelete(q._id)}\r\n//                       >\r\n//                         Delete\r\n//                       </button>\r\n//                     </div>\r\n//                   </div>\r\n//                 );\r\n//               })}\r\n//           </div>\r\n//         </div>\r\n//       ) : (\r\n//         // 📊 TEST RESULTS TAB\r\n//         <div className=\"tab-content\">\r\n//           <div className=\"card results-section\">\r\n//             <h5>Candidate Test Results</h5>\r\n//             {loadingResults ? (\r\n//               <div>Loading test results...</div>\r\n//             ) : results.length === 0 ? (\r\n//               <div className=\"text-muted\">No test results yet</div>\r\n//             ) : (\r\n//               <table className=\"results-table\">\r\n//                 <thead>\r\n//                   <tr>\r\n//                     <th>Name</th>\r\n//                     <th>Email</th>\r\n//                     <th>Total</th>\r\n//                     <th>Correct</th>\r\n//                     <th>Score %</th>\r\n//                     <th>Submitted At</th>\r\n//                   </tr>\r\n//                 </thead>\r\n//                 <tbody>\r\n//                   {results.map((res, idx) => (\r\n//                     <tr key={idx}>\r\n//                       <td>{res.name}</td>\r\n//                       <td>{res.email}</td>\r\n//                       <td>{res.totalQuestions}</td>\r\n//                       <td>{res.correctAnswers}</td>\r\n//                       <td>{res.scorePercent}%</td>\r\n//                       <td>{new Date(res.submittedAt).toLocaleString()}</td>\r\n//                     </tr>\r\n//                   ))}\r\n//                 </tbody>\r\n//               </table>\r\n//             )}\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n\r\n// // import React, { useEffect, useState } from \"react\";\r\n// // import API from \"../services/api\";\r\n// // import { useNavigate } from \"react-router-dom\";\r\n// // import \"../styles/AdminDashboard.css\";\r\n\r\n// // export default function AdminDashboard() {\r\n// //   const navigate = useNavigate();\r\n// //   const [questions, setQuestions] = useState([]);\r\n// //   const [results, setResults] = useState([]);\r\n// //   const [activeTab, setActiveTab] = useState(\"questions\");\r\n// //   const [form, setForm] = useState({\r\n// //     questionText: \"\",\r\n// //     optionsText: \"\",\r\n// //     correctAnswer: \"\",\r\n// //   });\r\n// //   const [questionType, setQuestionType] = useState(\"MCQ\");\r\n// //   const [file, setFile] = useState(null);\r\n// //   const [loading, setLoading] = useState(false);\r\n// //   const [loadingResults, setLoadingResults] = useState(false);\r\n// //   const [editingId, setEditingId] = useState(null);\r\n\r\n// //   // 🟢 Check admin login\r\n// //   useEffect(() => {\r\n// //     const token = localStorage.getItem(\"adminToken\");\r\n// //     if (!token) navigate(\"/admin/login\");\r\n// //   }, [navigate]);\r\n\r\n// //   // 🟢 Initial fetch\r\n// //   useEffect(() => {\r\n// //     fetchQuestions();\r\n// //     fetchResults();\r\n// //   }, []);\r\n\r\n// //   const fetchQuestions = async () => {\r\n// //     try {\r\n// //       const res = await API.get(\"/questions\");\r\n// //       setQuestions(res.data || []);\r\n// //     } catch (err) {\r\n// //       console.error(err);\r\n// //       alert(\"❌ Failed to load questions.\");\r\n// //     }\r\n// //   };\r\n\r\n// //   const fetchResults = async () => {\r\n// //     setLoadingResults(true);\r\n// //     try {\r\n// //       const res = await API.get(\"/tests\");\r\n// //       setResults(res.data || []);\r\n// //     } catch (err) {\r\n// //       console.error(err);\r\n// //       alert(\"❌ Failed to load test results.\");\r\n// //     } finally {\r\n// //       setLoadingResults(false);\r\n// //     }\r\n// //   };\r\n\r\n// //   // 🟢 Add or Update Question\r\n// //   const handleAddOrUpdate = async (e) => {\r\n// //     e.preventDefault();\r\n// //     const opts =\r\n// //       questionType === \"MCQ\"\r\n// //         ? form.optionsText.split(\"|\").map((s) => s.trim()).filter(Boolean)\r\n// //         : [];\r\n\r\n// //     if (!form.questionText.trim()) {\r\n// //       return alert(\"Please enter question text.\");\r\n// //     }\r\n\r\n// //     setLoading(true);\r\n// //     try {\r\n// //       if (editingId) {\r\n// //         await API.put(`/questions/${editingId}`, {\r\n// //           questionType,\r\n// //           questionText: form.questionText,\r\n// //           options: opts,\r\n// //           correctAnswer: questionType === \"MCQ\" ? form.correctAnswer : \"\",\r\n// //         });\r\n// //         alert(\"✅ Question updated successfully!\");\r\n// //       } else {\r\n// //         await API.post(\"/questions\", {\r\n// //           questionType,\r\n// //           questionText: form.questionText,\r\n// //           options: opts,\r\n// //           correctAnswer: questionType === \"MCQ\" ? form.correctAnswer : \"\",\r\n// //         });\r\n// //         alert(\"✅ Question added successfully!\");\r\n// //       }\r\n\r\n// //       setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" });\r\n// //       setEditingId(null);\r\n// //       await fetchQuestions();\r\n// //     } catch (err) {\r\n// //       console.error(err);\r\n// //       alert(err.response?.data?.error || \"❌ Operation failed.\");\r\n// //     } finally {\r\n// //       setLoading(false);\r\n// //     }\r\n// //   };\r\n\r\n// //   // 🟢 Delete Question\r\n// //   const handleDelete = async (id) => {\r\n// //     if (!window.confirm(\"Are you sure you want to delete this question?\")) return;\r\n\r\n// //     try {\r\n// //       await API.delete(`/questions/${id}`);\r\n// //       alert(\"🗑️ Question deleted successfully!\");\r\n// //       await fetchQuestions();\r\n// //     } catch (err) {\r\n// //       console.error(err);\r\n// //       alert(\"❌ Failed to delete question.\");\r\n// //     }\r\n// //   };\r\n\r\n// //   // 🟢 Edit Question\r\n// //   const handleEdit = (q) => {\r\n// //     setEditingId(q._id);\r\n// //     setQuestionType(q.questionType);\r\n// //     setForm({\r\n// //       questionText: q.questionText,\r\n// //       optionsText: q.options ? q.options.join(\" | \") : \"\",\r\n// //       correctAnswer: q.correctAnswer || \"\",\r\n// //     });\r\n// //     window.scrollTo({ top: 0, behavior: \"smooth\" });\r\n// //   };\r\n\r\n// //   // 🟢 Upload File\r\n// //   const handleUpload = async () => {\r\n// //     if (!file) return alert(\"Please select a file to upload.\");\r\n// //     const fd = new FormData();\r\n// //     fd.append(\"file\", file);\r\n\r\n// //     try {\r\n// //       const res = await API.post(\"/questions/upload\", fd, {\r\n// //         headers: { \"Content-Type\": \"multipart/form-data\" },\r\n// //       });\r\n// //       alert(res.data.message || \"✅ File uploaded successfully!\");\r\n// //       await fetchQuestions();\r\n// //     } catch (err) {\r\n// //       console.error(err);\r\n// //       alert(err.response?.data?.error || \"❌ File upload failed.\");\r\n// //     }\r\n// //   };\r\n\r\n// //   const handleLogout = () => {\r\n// //     localStorage.removeItem(\"adminToken\");\r\n// //     navigate(\"/admin/login\");\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div className=\"admin-dashboard\">\r\n// //       {/* Header */}\r\n// //       <div className=\"admin-header\">\r\n// //         <h2>Admin Dashboard</h2>\r\n// //         <button className=\"logout-btn\" onClick={handleLogout}>\r\n// //           Logout\r\n// //         </button>\r\n// //       </div>\r\n\r\n// //       {/* Tabs */}\r\n// //       <div className=\"tab-buttons\">\r\n// //         <button\r\n// //           className={`tab-btn ${activeTab === \"questions\" ? \"active\" : \"\"}`}\r\n// //           onClick={() => setActiveTab(\"questions\")}\r\n// //         >\r\n// //           🧩 Questions\r\n// //         </button>\r\n// //         <button\r\n// //           className={`tab-btn ${activeTab === \"results\" ? \"active\" : \"\"}`}\r\n// //           onClick={() => setActiveTab(\"results\")}\r\n// //         >\r\n// //           📊 Test Results\r\n// //         </button>\r\n// //       </div>\r\n\r\n// //       {/* 🧩 QUESTIONS TAB */}\r\n// //       {activeTab === \"questions\" ? (\r\n// //         <div className=\"tab-content\">\r\n// //           <div className=\"card form-section\">\r\n// //             <h5>{editingId ? \"✏️ Edit Question\" : \"➕ Add or Upload Questions\"}</h5>\r\n\r\n// //             <form onSubmit={handleAddOrUpdate}>\r\n// //               <div className=\"mb-3\">\r\n// //                 <label className=\"form-label\">Question Type</label>\r\n// //                 <select\r\n// //                   className=\"form-select\"\r\n// //                   value={questionType}\r\n// //                   onChange={(e) => setQuestionType(e.target.value)}\r\n// //                 >\r\n// //                   <option value=\"MCQ\">MCQ</option>\r\n// //                   <option value=\"Theory\">Theory</option>\r\n// //                 </select>\r\n// //               </div>\r\n\r\n// //               <div className=\"mb-3\">\r\n// //                 <label className=\"form-label\">Question Text</label>\r\n// //                 <textarea\r\n// //                   className=\"form-control\"\r\n// //                   rows={questionType === \"Theory\" ? 3 : 2}\r\n// //                   value={form.questionText}\r\n// //                   onChange={(e) =>\r\n// //                     setForm({ ...form, questionText: e.target.value })\r\n// //                   }\r\n// //                   placeholder=\"Enter your question here...\"\r\n// //                 />\r\n// //               </div>\r\n\r\n// //               {questionType === \"MCQ\" && (\r\n// //                 <>\r\n// //                   <div className=\"mb-3\">\r\n// //                     <label className=\"form-label\">Options (separate by |)</label>\r\n// //                     <input\r\n// //                       className=\"form-control\"\r\n// //                       value={form.optionsText}\r\n// //                       onChange={(e) =>\r\n// //                         setForm({ ...form, optionsText: e.target.value })\r\n// //                       }\r\n// //                       placeholder=\"Option A | Option B | Option C | Option D\"\r\n// //                     />\r\n// //                   </div>\r\n\r\n// //                   <div className=\"mb-3\">\r\n// //                     <label className=\"form-label\">Correct Answer</label>\r\n// //                     <input\r\n// //                       className=\"form-control\"\r\n// //                       value={form.correctAnswer}\r\n// //                       onChange={(e) =>\r\n// //                         setForm({ ...form, correctAnswer: e.target.value })\r\n// //                       }\r\n// //                       placeholder=\"Enter correct answer text\"\r\n// //                     />\r\n// //                   </div>\r\n// //                 </>\r\n// //               )}\r\n\r\n// //               <div className=\"d-flex gap-2\">\r\n// //                 <button className=\"btn btn-success\" type=\"submit\" disabled={loading}>\r\n// //                   {loading\r\n// //                     ? \"Saving...\"\r\n// //                     : editingId\r\n// //                     ? \"Update Question\"\r\n// //                     : \"Add Question\"}\r\n// //                 </button>\r\n// //                 <button\r\n// //                   type=\"button\"\r\n// //                   className=\"btn btn-secondary\"\r\n// //                   onClick={() => {\r\n// //                     setForm({\r\n// //                       questionText: \"\",\r\n// //                       optionsText: \"\",\r\n// //                       correctAnswer: \"\",\r\n// //                     });\r\n// //                     setEditingId(null);\r\n// //                   }}\r\n// //                 >\r\n// //                   Clear\r\n// //                 </button>\r\n// //               </div>\r\n// //             </form>\r\n\r\n// //             <hr className=\"my-4\" />\r\n\r\n// //             {/* Upload Section */}\r\n// //             <div className=\"upload-section\">\r\n// //               <label className=\"form-label\">Upload Document (.docx)</label>\r\n// //               <input\r\n// //                 type=\"file\"\r\n// //                 className=\"form-control\"\r\n// //                 accept=\".docx\"\r\n// //                 onChange={(e) => setFile(e.target.files[0])}\r\n// //               />\r\n// //               <div className=\"mt-2\">\r\n// //                 <button className=\"btn btn-primary\" onClick={handleUpload}>\r\n// //                   Upload\r\n// //                 </button>\r\n// //               </div>\r\n// //             </div>\r\n// //           </div>\r\n\r\n// //           {/* Display Questions */}\r\n// //           <div className=\"card available-questions\">\r\n// //             <h5>Available Questions</h5>\r\n\r\n// //             {/* MCQ Section */}\r\n// //             <h6 className=\"mt-3 text-primary\">MCQ Questions</h6>\r\n// //             {questions.filter((q) => q.questionType === \"MCQ\").length === 0 && (\r\n// //               <div className=\"text-muted\">No MCQs yet</div>\r\n// //             )}\r\n// //             {questions\r\n// //               .filter((q) => q.questionType === \"MCQ\")\r\n// //               .map((q, idx) => (\r\n// //                 <div key={q._id} className=\"question-item\">\r\n// //                   <strong>Q{idx + 1}:</strong> {q.questionText}\r\n// //                   <div className=\"small text-muted\">\r\n// //                     Options: {q.options.join(\" | \")}\r\n// //                   </div>\r\n// //                   <div className=\"small text-success\">\r\n// //                     Correct: {q.correctAnswer}\r\n// //                   </div>\r\n// //                   <div className=\"action-buttons\">\r\n// //                     <button\r\n// //                       className=\"btn btn-sm btn-warning\"\r\n// //                       onClick={() => handleEdit(q)}\r\n// //                     >\r\n// //                       Edit\r\n// //                     </button>\r\n// //                     <button\r\n// //                       className=\"btn btn-sm btn-danger\"\r\n// //                       onClick={() => handleDelete(q._id)}\r\n// //                     >\r\n// //                       Delete\r\n// //                     </button>\r\n// //                   </div>\r\n// //                 </div>\r\n// //               ))}\r\n\r\n// //             {/* Theory Section */}\r\n// //             <h6 className=\"mt-4 text-primary\">Theory Questions</h6>\r\n// //             {questions.filter((q) => q.questionType === \"Theory\").length === 0 && (\r\n// //               <div className=\"text-muted\">No theory questions yet</div>\r\n// //             )}\r\n// //             {questions\r\n// //               .filter((q) => q.questionType === \"Theory\")\r\n// //               .map((q, idx) => {\r\n// //                 const relatedAnswers = results\r\n// //                   .flatMap((r) => r.answers || [])\r\n// //                   .filter(\r\n// //                     (a) =>\r\n// //                       a.question.trim().toLowerCase() ===\r\n// //                       q.questionText.trim().toLowerCase()\r\n// //                   );\r\n// //                 return (\r\n// //                   <div key={q._id} className=\"question-item\">\r\n// //                     <strong>Q{idx + 1}:</strong> {q.questionText}\r\n// //                     {relatedAnswers.length > 0 ? (\r\n// //                       <div className=\"theory-answers\">\r\n// //                         <b>Answers:</b>\r\n// //                         <ul>\r\n// //                           {relatedAnswers.map((a, i) => (\r\n// //                             <li key={i}>{a.userAnswer}</li>\r\n// //                           ))}\r\n// //                         </ul>\r\n// //                       </div>\r\n// //                     ) : (\r\n// //                       <div className=\"text-muted small\">No answers yet</div>\r\n// //                     )}\r\n// //                     <div className=\"action-buttons\">\r\n// //                       <button\r\n// //                         className=\"btn btn-sm btn-warning\"\r\n// //                         onClick={() => handleEdit(q)}\r\n// //                       >\r\n// //                         Edit\r\n// //                       </button>\r\n// //                       <button\r\n// //                         className=\"btn btn-sm btn-danger\"\r\n// //                         onClick={() => handleDelete(q._id)}\r\n// //                       >\r\n// //                         Delete\r\n// //                       </button>\r\n// //                     </div>\r\n// //                   </div>\r\n// //                 );\r\n// //               })}\r\n// //           </div>\r\n// //         </div>\r\n// //       ) : (\r\n// //         // 📊 TEST RESULTS TAB\r\n// //         <div className=\"tab-content\">\r\n// //           <div className=\"card results-section\">\r\n// //             <h5>Candidate Test Results</h5>\r\n// //             {loadingResults ? (\r\n// //               <div>Loading test results...</div>\r\n// //             ) : results.length === 0 ? (\r\n// //               <div className=\"text-muted\">No test results yet</div>\r\n// //             ) : (\r\n// //               <table className=\"results-table\">\r\n// //                 <thead>\r\n// //                   <tr>\r\n// //                     <th>Name</th>\r\n// //                     <th>Email</th>\r\n// //                     <th>Total</th>\r\n// //                     <th>Correct</th>\r\n// //                     <th>Score %</th>\r\n// //                     <th>Submitted At</th>\r\n// //                   </tr>\r\n// //                 </thead>\r\n// //                 <tbody>\r\n// //                   {results.map((res, idx) => (\r\n// //                     <tr key={idx}>\r\n// //                       <td>{res.name}</td>\r\n// //                       <td>{res.email}</td>\r\n// //                       <td>{res.totalQuestions}</td>\r\n// //                       <td>{res.correctAnswers}</td>\r\n// //                       <td>{res.scorePercent}%</td>\r\n// //                       <td>{new Date(res.submittedAt).toLocaleString()}</td>\r\n// //                     </tr>\r\n// //                   ))}\r\n// //                 </tbody>\r\n// //               </table>\r\n// //             )}\r\n// //           </div>\r\n// //         </div>\r\n// //       )}\r\n// //     </div>\r\n// //   );\r\n// // }\r\n\r\n// // // import React, { useEffect, useState } from \"react\";\r\n// // // import API from \"../services/api\";\r\n// // // import { useNavigate } from \"react-router-dom\";\r\n// // // import \"../styles/AdminDashboard.css\";\r\n\r\n// // // export default function AdminDashboard() {\r\n// // //   const navigate = useNavigate();\r\n// // //   const [questions, setQuestions] = useState([]);\r\n// // //   const [results, setResults] = useState([]);\r\n// // //   const [activeTab, setActiveTab] = useState(\"questions\"); // 🔹 Switch tab\r\n// // //   const [form, setForm] = useState({\r\n// // //     questionText: \"\",\r\n// // //     optionsText: \"\",\r\n// // //     correctAnswer: \"\",\r\n// // //   });\r\n// // //   const [questionType, setQuestionType] = useState(\"MCQ\");\r\n// // //   const [file, setFile] = useState(null);\r\n// // //   const [loading, setLoading] = useState(false);\r\n// // //   const [loadingResults, setLoadingResults] = useState(false);\r\n\r\n// // //   // 🟢 Check admin login\r\n// // //   useEffect(() => {\r\n// // //     const token = localStorage.getItem(\"adminToken\");\r\n// // //     if (!token) navigate(\"/admin/login\");\r\n// // //   }, [navigate]);\r\n\r\n// // //   // 🟢 Fetch initial data\r\n// // //   useEffect(() => {\r\n// // //     fetchQuestions();\r\n// // //     fetchResults();\r\n// // //   }, []);\r\n\r\n// // //   const fetchQuestions = async () => {\r\n// // //     try {\r\n// // //       const res = await API.get(\"/questions\");\r\n// // //       setQuestions(res.data || []);\r\n// // //     } catch (err) {\r\n// // //       console.error(err);\r\n// // //       alert(\"❌ Failed to load questions.\");\r\n// // //     }\r\n// // //   };\r\n\r\n// // //   const fetchResults = async () => {\r\n// // //     setLoadingResults(true);\r\n// // //     try {\r\n// // //       const res = await API.get(\"/tests\");\r\n// // //       setResults(res.data || []);\r\n// // //     } catch (err) {\r\n// // //       console.error(err);\r\n// // //       alert(\"❌ Failed to load test results.\");\r\n// // //     } finally {\r\n// // //       setLoadingResults(false);\r\n// // //     }\r\n// // //   };\r\n\r\n// // //   // 🟢 Add Question\r\n// // //   const handleAddQuestion = async (e) => {\r\n// // //     e.preventDefault();\r\n// // //     const opts =\r\n// // //       questionType === \"MCQ\"\r\n// // //         ? form.optionsText.split(\"|\").map((s) => s.trim()).filter(Boolean)\r\n// // //         : [];\r\n\r\n// // //     if (!form.questionText.trim()) {\r\n// // //       return alert(\"Please enter question text.\");\r\n// // //     }\r\n// // //     if (questionType === \"MCQ\" && (opts.length < 2 || !form.correctAnswer.trim())) {\r\n// // //       return alert(\"Please enter at least 2 options and a correct answer.\");\r\n// // //     }\r\n\r\n// // //     setLoading(true);\r\n// // //     try {\r\n// // //       await API.post(\"/questions\", {\r\n// // //         questionType,\r\n// // //         questionText: form.questionText,\r\n// // //         options: opts,\r\n// // //         correctAnswer: questionType === \"MCQ\" ? form.correctAnswer : \"\",\r\n// // //       });\r\n\r\n// // //       setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" });\r\n// // //       await fetchQuestions();\r\n// // //       alert(\"✅ Question added successfully!\");\r\n// // //     } catch (err) {\r\n// // //       console.error(err);\r\n// // //       alert(err.response?.data?.error || \"Failed to add question.\");\r\n// // //     } finally {\r\n// // //       setLoading(false);\r\n// // //     }\r\n// // //   };\r\n\r\n// // //   // 🟢 Upload File\r\n// // //   const handleUpload = async () => {\r\n// // //     if (!file) return alert(\"Please select a file to upload.\");\r\n// // //     const fd = new FormData();\r\n// // //     fd.append(\"file\", file);\r\n\r\n// // //     try {\r\n// // //       const res = await API.post(\"/questions/upload\", fd, {\r\n// // //         headers: { \"Content-Type\": \"multipart/form-data\" },\r\n// // //       });\r\n// // //       alert(res.data.message || \"✅ File uploaded successfully!\");\r\n// // //       await fetchQuestions();\r\n// // //     } catch (err) {\r\n// // //       console.error(err);\r\n// // //       alert(err.response?.data?.error || \"❌ File upload failed.\");\r\n// // //     }\r\n// // //   };\r\n\r\n// // //   const handleLogout = () => {\r\n// // //     localStorage.removeItem(\"adminToken\");\r\n// // //     navigate(\"/admin/login\");\r\n// // //   };\r\n\r\n// // //   return (\r\n// // //     <div className=\"admin-dashboard\">\r\n// // //       {/* Header */}\r\n// // //       <div className=\"admin-header\">\r\n// // //         <h2>Admin Dashboard</h2>\r\n// // //         <button className=\"logout-btn\" onClick={handleLogout}>\r\n// // //           Logout\r\n// // //         </button>\r\n// // //       </div>\r\n\r\n// // //       {/* Tabs */}\r\n// // //       <div className=\"tab-buttons\">\r\n// // //         <button\r\n// // //           className={`tab-btn ${activeTab === \"questions\" ? \"active\" : \"\"}`}\r\n// // //           onClick={() => setActiveTab(\"questions\")}\r\n// // //         >\r\n// // //           🧩 Questions\r\n// // //         </button>\r\n// // //         <button\r\n// // //           className={`tab-btn ${activeTab === \"results\" ? \"active\" : \"\"}`}\r\n// // //           onClick={() => setActiveTab(\"results\")}\r\n// // //         >\r\n// // //           📊 Test Results\r\n// // //         </button>\r\n// // //       </div>\r\n\r\n// // //       {/* Content based on active tab */}\r\n// // //       {activeTab === \"questions\" ? (\r\n// // //         <div className=\"tab-content\">\r\n// // //           {/* Add Question / Upload Section */}\r\n// // //           <div className=\"card form-section\">\r\n// // //             <h5>Add or Upload Questions</h5>\r\n\r\n// // //             <form onSubmit={handleAddQuestion}>\r\n// // //               <div className=\"mb-3\">\r\n// // //                 <label className=\"form-label\">Question Type</label>\r\n// // //                 <select\r\n// // //                   className=\"form-select\"\r\n// // //                   value={questionType}\r\n// // //                   onChange={(e) => setQuestionType(e.target.value)}\r\n// // //                 >\r\n// // //                   <option value=\"MCQ\">MCQ</option>\r\n// // //                   <option value=\"Theory\">Theory</option>\r\n// // //                 </select>\r\n// // //               </div>\r\n\r\n// // //               <div className=\"mb-3\">\r\n// // //                 <label className=\"form-label\">Question Text</label>\r\n// // //                 <textarea\r\n// // //                   className=\"form-control\"\r\n// // //                   rows={questionType === \"Theory\" ? 3 : 2}\r\n// // //                   value={form.questionText}\r\n// // //                   onChange={(e) =>\r\n// // //                     setForm({ ...form, questionText: e.target.value })\r\n// // //                   }\r\n// // //                   placeholder=\"Enter your question here...\"\r\n// // //                 />\r\n// // //               </div>\r\n\r\n// // //               {questionType === \"MCQ\" && (\r\n// // //                 <>\r\n// // //                   <div className=\"mb-3\">\r\n// // //                     <label className=\"form-label\">Options (separate by |)</label>\r\n// // //                     <input\r\n// // //                       className=\"form-control\"\r\n// // //                       value={form.optionsText}\r\n// // //                       onChange={(e) =>\r\n// // //                         setForm({ ...form, optionsText: e.target.value })\r\n// // //                       }\r\n// // //                       placeholder=\"Option A | Option B | Option C | Option D\"\r\n// // //                     />\r\n// // //                   </div>\r\n\r\n// // //                   <div className=\"mb-3\">\r\n// // //                     <label className=\"form-label\">Correct Answer</label>\r\n// // //                     <input\r\n// // //                       className=\"form-control\"\r\n// // //                       value={form.correctAnswer}\r\n// // //                       onChange={(e) =>\r\n// // //                         setForm({ ...form, correctAnswer: e.target.value })\r\n// // //                       }\r\n// // //                       placeholder=\"Enter correct answer text\"\r\n// // //                     />\r\n// // //                   </div>\r\n// // //                 </>\r\n// // //               )}\r\n\r\n// // //               <div className=\"d-flex gap-2\">\r\n// // //                 <button className=\"btn btn-success\" type=\"submit\" disabled={loading}>\r\n// // //                   {loading ? \"Adding...\" : \"Add Question\"}\r\n// // //                 </button>\r\n// // //                 <button\r\n// // //                   type=\"button\"\r\n// // //                   className=\"btn btn-secondary\"\r\n// // //                   onClick={() =>\r\n// // //                     setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" })\r\n// // //                   }\r\n// // //                 >\r\n// // //                   Clear\r\n// // //                 </button>\r\n// // //               </div>\r\n// // //             </form>\r\n\r\n// // //             <hr className=\"my-4\" />\r\n\r\n// // //             {/* Upload Document Section */}\r\n// // //             <div className=\"upload-section\">\r\n// // //               <label className=\"form-label\">Upload Document (.docx)</label>\r\n// // //               <input\r\n// // //                 type=\"file\"\r\n// // //                 className=\"form-control\"\r\n// // //                 accept=\".docx\"\r\n// // //                 onChange={(e) => setFile(e.target.files[0])}\r\n// // //               />\r\n// // //               <div className=\"mt-2\">\r\n// // //                 <button className=\"btn btn-primary\" onClick={handleUpload}>\r\n// // //                   Upload\r\n// // //                 </button>\r\n// // //               </div>\r\n// // //             </div>\r\n// // //           </div>\r\n\r\n// // //           {/* Display Available Questions */}\r\n// // //           <div className=\"card available-questions\">\r\n// // //             <h5>Available Questions</h5>\r\n\r\n// // //             <h6 className=\"mt-3 text-primary\">MCQ Questions</h6>\r\n// // //             {questions.filter((q) => q.questionType === \"MCQ\").length === 0 && (\r\n// // //               <div className=\"text-muted\">No MCQs yet</div>\r\n// // //             )}\r\n// // //             {questions\r\n// // //               .filter((q) => q.questionType === \"MCQ\")\r\n// // //               .map((q, idx) => (\r\n// // //                 <div key={q._id} className=\"question-item\">\r\n// // //                   <strong>Q{idx + 1}:</strong> {q.questionText}\r\n// // //                   <div className=\"small text-muted\">\r\n// // //                     Options: {q.options.join(\" | \")}\r\n// // //                   </div>\r\n// // //                   <div className=\"small text-success\">\r\n// // //                     Correct: {q.correctAnswer}\r\n// // //                   </div>\r\n// // //                 </div>\r\n// // //               ))}\r\n\r\n// // //             <h6 className=\"mt-4 text-primary\">Theory Questions</h6>\r\n// // //             {questions.filter((q) => q.questionType === \"Theory\").length === 0 && (\r\n// // //               <div className=\"text-muted\">No theory questions yet</div>\r\n// // //             )}\r\n// // //             {questions\r\n// // //               .filter((q) => q.questionType === \"Theory\")\r\n// // //               .map((q, idx) => (\r\n// // //                 <div key={q._id} className=\"question-item\">\r\n// // //                   <strong>Q{idx + 1}:</strong> {q.questionText}\r\n// // //                 </div>\r\n// // //               ))}\r\n// // //           </div>\r\n// // //         </div>\r\n// // //       ) : (\r\n// // //         <div className=\"tab-content\">\r\n// // //           {/* Test Results Section */}\r\n// // //           <div className=\"card results-section\">\r\n// // //             <h5>Candidate Test Results</h5>\r\n\r\n// // //             {loadingResults ? (\r\n// // //               <div>Loading test results...</div>\r\n// // //             ) : results.length === 0 ? (\r\n// // //               <div className=\"text-muted\">No test results yet</div>\r\n// // //             ) : (\r\n// // //               <table className=\"results-table\">\r\n// // //                 <thead>\r\n// // //                   <tr>\r\n// // //                     <th>Name</th>\r\n// // //                     <th>Email</th>\r\n// // //                     <th>Total Questions</th>\r\n// // //                     <th>Correct</th>\r\n// // //                     <th>Score %</th>\r\n// // //                     <th>Submitted At</th>\r\n// // //                   </tr>\r\n// // //                 </thead>\r\n// // //                 <tbody>\r\n// // //                   {results.map((res, idx) => (\r\n// // //                     <tr key={idx}>\r\n// // //                       <td>{res.name}</td>\r\n// // //                       <td>{res.email}</td>\r\n// // //                       <td>{res.totalQuestions}</td>\r\n// // //                       <td>{res.correctAnswers}</td>\r\n// // //                       <td>{res.scorePercent}%</td>\r\n// // //                       <td>{new Date(res.submittedAt).toLocaleString()}</td>\r\n// // //                     </tr>\r\n// // //                   ))}\r\n// // //                 </tbody>\r\n// // //               </table>\r\n// // //             )}\r\n// // //           </div>\r\n// // //         </div>\r\n// // //       )}\r\n// // //     </div>\r\n// // //   );\r\n// // // }\r\n\r\n// // // // import React, { useEffect, useState } from \"react\";\r\n// // // // import API from \"../services/api\";\r\n// // // // import { useNavigate } from \"react-router-dom\";\r\n// // // // import \"../styles/AdminDashboard.css\";\r\n\r\n// // // // export default function AdminDashboard() {\r\n// // // //   const navigate = useNavigate();\r\n// // // //   const [questions, setQuestions] = useState([]);\r\n// // // //   const [results, setResults] = useState([]);\r\n// // // //   const [form, setForm] = useState({\r\n// // // //     questionText: \"\",\r\n// // // //     optionsText: \"\",\r\n// // // //     correctAnswer: \"\",\r\n// // // //   });\r\n// // // //   const [questionType, setQuestionType] = useState(\"MCQ\");\r\n// // // //   const [file, setFile] = useState(null);\r\n// // // //   const [loading, setLoading] = useState(false);\r\n// // // //   const [loadingResults, setLoadingResults] = useState(false);\r\n\r\n// // // //   // 🟢 Check admin login (token validation)\r\n// // // //   useEffect(() => {\r\n// // // //     const token = localStorage.getItem(\"adminToken\");\r\n// // // //     if (!token) navigate(\"/admin/login\");\r\n// // // //   }, [navigate]);\r\n\r\n// // // //   // 🟢 Fetch questions and test results on load\r\n// // // //   useEffect(() => {\r\n// // // //     fetchQuestions();\r\n// // // //     fetchResults();\r\n// // // //   }, []);\r\n\r\n// // // //   const fetchQuestions = async () => {\r\n// // // //     try {\r\n// // // //       const res = await API.get(\"/questions\");\r\n// // // //       setQuestions(res.data || []);\r\n// // // //     } catch (err) {\r\n// // // //       console.error(err);\r\n// // // //       alert(\"❌ Failed to load questions.\");\r\n// // // //     }\r\n// // // //   };\r\n\r\n// // // //   const fetchResults = async () => {\r\n// // // //     setLoadingResults(true);\r\n// // // //     try {\r\n// // // //       const res = await API.get(\"/tests\");\r\n// // // //       setResults(res.data || []);\r\n// // // //     } catch (err) {\r\n// // // //       console.error(err);\r\n// // // //       alert(\"❌ Failed to load test results.\");\r\n// // // //     } finally {\r\n// // // //       setLoadingResults(false);\r\n// // // //     }\r\n// // // //   };\r\n\r\n// // // //   // 🟢 Add Question Manually\r\n// // // //   const handleAddQuestion = async (e) => {\r\n// // // //     e.preventDefault();\r\n// // // //     const opts =\r\n// // // //       questionType === \"MCQ\"\r\n// // // //         ? form.optionsText.split(\"|\").map((s) => s.trim()).filter(Boolean)\r\n// // // //         : [];\r\n\r\n// // // //     if (!form.questionText.trim()) {\r\n// // // //       return alert(\"Please enter question text.\");\r\n// // // //     }\r\n// // // //     if (questionType === \"MCQ\" && (opts.length < 2 || !form.correctAnswer.trim())) {\r\n// // // //       return alert(\"Please enter at least 2 options and a correct answer.\");\r\n// // // //     }\r\n\r\n// // // //     setLoading(true);\r\n// // // //     try {\r\n// // // //       await API.post(\"/questions\", {\r\n// // // //         questionType,\r\n// // // //         questionText: form.questionText,\r\n// // // //         options: opts,\r\n// // // //         correctAnswer: questionType === \"MCQ\" ? form.correctAnswer : \"\",\r\n// // // //       });\r\n\r\n// // // //       setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" });\r\n// // // //       await fetchQuestions();\r\n// // // //       alert(\"✅ Question added successfully!\");\r\n// // // //     } catch (err) {\r\n// // // //       console.error(err);\r\n// // // //       alert(err.response?.data?.error || \"Failed to add question.\");\r\n// // // //     } finally {\r\n// // // //       setLoading(false);\r\n// // // //     }\r\n// // // //   };\r\n\r\n// // // //   // 🟢 Upload .docx question file\r\n// // // //   const handleUpload = async () => {\r\n// // // //     if (!file) return alert(\"Please select a file to upload.\");\r\n// // // //     const fd = new FormData();\r\n// // // //     fd.append(\"file\", file);\r\n\r\n// // // //     try {\r\n// // // //       const res = await API.post(\"/questions/upload\", fd, {\r\n// // // //         headers: { \"Content-Type\": \"multipart/form-data\" },\r\n// // // //       });\r\n// // // //       alert(res.data.message || \"✅ File uploaded successfully!\");\r\n// // // //       await fetchQuestions();\r\n// // // //     } catch (err) {\r\n// // // //       console.error(err);\r\n// // // //       alert(err.response?.data?.error || \"❌ File upload failed.\");\r\n// // // //     }\r\n// // // //   };\r\n\r\n// // // //   // 🟢 Logout\r\n// // // //   const handleLogout = () => {\r\n// // // //     localStorage.removeItem(\"adminToken\");\r\n// // // //     navigate(\"/admin/login\");\r\n// // // //   };\r\n\r\n// // // //   return (\r\n// // // //     <div className=\"container container-center py-4 admin-dashboard\">\r\n// // // //       {/* Header */}\r\n// // // //       <div className=\"d-flex justify-content-between align-items-center mb-3 admin-header\">\r\n// // // //         <h2>Admin Dashboard</h2>\r\n// // // //         <button className=\"btn btn-outline-danger btn-sm\" onClick={handleLogout}>\r\n// // // //           Logout\r\n// // // //         </button>\r\n// // // //       </div>\r\n\r\n// // // //       {/* Add Question / Upload Section */}\r\n// // // //       <div className=\"card card-clean p-4 mb-4 form-section\">\r\n// // // //         <h5>Add questions or upload documents that will be shown to candidates.</h5>\r\n\r\n// // // //         {/* Add Question Form */}\r\n// // // //         <form onSubmit={handleAddQuestion} className=\"mt-3\">\r\n// // // //           <div className=\"mb-3\">\r\n// // // //             <label className=\"form-label\">Question Type</label>\r\n// // // //             <select\r\n// // // //               className=\"form-select\"\r\n// // // //               value={questionType}\r\n// // // //               onChange={(e) => setQuestionType(e.target.value)}\r\n// // // //             >\r\n// // // //               <option value=\"MCQ\">MCQ</option>\r\n// // // //               <option value=\"Theory\">Theory</option>\r\n// // // //             </select>\r\n// // // //           </div>\r\n\r\n// // // //           <div className=\"mb-3\">\r\n// // // //             <label className=\"form-label\">Question Text</label>\r\n// // // //             <textarea\r\n// // // //               className=\"form-control\"\r\n// // // //               rows={questionType === \"Theory\" ? 3 : 2}\r\n// // // //               value={form.questionText}\r\n// // // //               onChange={(e) => setForm({ ...form, questionText: e.target.value })}\r\n// // // //               placeholder=\"Enter your question here...\"\r\n// // // //             />\r\n// // // //           </div>\r\n\r\n// // // //           {questionType === \"MCQ\" && (\r\n// // // //             <>\r\n// // // //               <div className=\"mb-3\">\r\n// // // //                 <label className=\"form-label\">Options (separate by |)</label>\r\n// // // //                 <input\r\n// // // //                   className=\"form-control\"\r\n// // // //                   value={form.optionsText}\r\n// // // //                   onChange={(e) =>\r\n// // // //                     setForm({ ...form, optionsText: e.target.value })\r\n// // // //                   }\r\n// // // //                   placeholder=\"Option A | Option B | Option C | Option D\"\r\n// // // //                 />\r\n// // // //               </div>\r\n\r\n// // // //               <div className=\"mb-3\">\r\n// // // //                 <label className=\"form-label\">\r\n// // // //                   Correct Answer (exact text of one option)\r\n// // // //                 </label>\r\n// // // //                 <input\r\n// // // //                   className=\"form-control\"\r\n// // // //                   value={form.correctAnswer}\r\n// // // //                   onChange={(e) =>\r\n// // // //                     setForm({ ...form, correctAnswer: e.target.value })\r\n// // // //                   }\r\n// // // //                   placeholder=\"Enter correct answer text\"\r\n// // // //                 />\r\n// // // //               </div>\r\n// // // //             </>\r\n// // // //           )}\r\n\r\n// // // //           <div className=\"mb-3 d-flex gap-2\">\r\n// // // //             <button\r\n// // // //               className=\"btn btn-success\"\r\n// // // //               type=\"submit\"\r\n// // // //               disabled={loading}\r\n// // // //             >\r\n// // // //               {loading ? \"Adding...\" : \"Add Question\"}\r\n// // // //             </button>\r\n// // // //             <button\r\n// // // //               type=\"button\"\r\n// // // //               className=\"btn btn-secondary\"\r\n// // // //               onClick={() =>\r\n// // // //                 setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" })\r\n// // // //               }\r\n// // // //             >\r\n// // // //               Clear\r\n// // // //             </button>\r\n// // // //           </div>\r\n// // // //         </form>\r\n\r\n// // // //         <hr className=\"my-4\" />\r\n\r\n// // // //         {/* Upload Document Section */}\r\n// // // //         <div className=\"mb-3 upload-section\">\r\n// // // //           <label className=\"form-label\">Upload Document (.docx)</label>\r\n// // // //           <input\r\n// // // //             type=\"file\"\r\n// // // //             className=\"form-control\"\r\n// // // //             accept=\".docx\"\r\n// // // //             onChange={(e) => setFile(e.target.files[0])}\r\n// // // //           />\r\n// // // //           <div className=\"mt-2\">\r\n// // // //             <button className=\"btn btn-primary\" onClick={handleUpload}>\r\n// // // //               Upload\r\n// // // //             </button>\r\n// // // //           </div>\r\n// // // //         </div>\r\n// // // //       </div>\r\n\r\n// // // //       {/* Available Questions */}\r\n// // // //       <div className=\"card card-clean p-4 mb-4 available-questions\">\r\n// // // //         <h5>Available Questions</h5>\r\n\r\n// // // //         {/* MCQ Section */}\r\n// // // //         <h6 className=\"mt-3 text-primary\">MCQ Questions</h6>\r\n// // // //         {questions.filter((q) => q.questionType === \"MCQ\").length === 0 && (\r\n// // // //           <div className=\"text-muted\">No MCQs yet</div>\r\n// // // //         )}\r\n// // // //         {questions\r\n// // // //           .filter((q) => q.questionType === \"MCQ\")\r\n// // // //           .map((q, idx) => (\r\n// // // //             <div key={q._id} className=\"mb-3 border-bottom pb-2\">\r\n// // // //               <strong>Q{idx + 1}:</strong> {q.questionText}\r\n// // // //               <div className=\"small text-muted\">\r\n// // // //                 Options: {q.options.join(\" | \")}\r\n// // // //               </div>\r\n// // // //               <div className=\"small text-success\">\r\n// // // //                 Correct: {q.correctAnswer}\r\n// // // //               </div>\r\n// // // //             </div>\r\n// // // //           ))}\r\n\r\n// // // //         {/* Theory Section */}\r\n// // // //         <h6 className=\"mt-4 text-primary\">Theory Questions</h6>\r\n// // // //         {questions.filter((q) => q.questionType === \"Theory\").length === 0 && (\r\n// // // //           <div className=\"text-muted\">No theory questions yet</div>\r\n// // // //         )}\r\n// // // //         {questions\r\n// // // //           .filter((q) => q.questionType === \"Theory\")\r\n// // // //           .map((q, idx) => (\r\n// // // //             <div key={q._id} className=\"mb-3 border-bottom pb-2\">\r\n// // // //               <strong>Q{idx + 1}:</strong> {q.questionText}\r\n// // // //             </div>\r\n// // // //           ))}\r\n// // // //       </div>\r\n\r\n// // // //       {/* Test Results Section */}\r\n// // // //       <div className=\"card card-clean p-4 mb-4 results-section\">\r\n// // // //         <h5>Candidate Test Results</h5>\r\n\r\n// // // //         {loadingResults ? (\r\n// // // //           <div>Loading test results...</div>\r\n// // // //         ) : results.length === 0 ? (\r\n// // // //           <div className=\"text-muted\">No test results yet</div>\r\n// // // //         ) : (\r\n// // // //           <table className=\"results-table\">\r\n// // // //             <thead>\r\n// // // //               <tr>\r\n// // // //                 <th>Name</th>\r\n// // // //                 <th>Email</th>\r\n// // // //                 <th>Total Questions</th>\r\n// // // //                 <th>Correct</th>\r\n// // // //                 <th>Score %</th>\r\n// // // //                 <th>Submitted At</th>\r\n// // // //               </tr>\r\n// // // //             </thead>\r\n// // // //             <tbody>\r\n// // // //               {results.map((res, idx) => (\r\n// // // //                 <tr key={idx}>\r\n// // // //                   <td>{res.name}</td>\r\n// // // //                   <td>{res.email}</td>\r\n// // // //                   <td>{res.totalQuestions}</td>\r\n// // // //                   <td>{res.correctAnswers}</td>\r\n// // // //                   <td>{res.scorePercent}%</td>\r\n// // // //                   <td>{new Date(res.submittedAt).toLocaleString()}</td>\r\n// // // //                 </tr>\r\n// // // //               ))}\r\n// // // //             </tbody>\r\n// // // //           </table>\r\n// // // //         )}\r\n// // // //       </div>\r\n// // // //     </div>\r\n// // // //   );\r\n// // // // }\r\n\r\n// // // // // import React, { useEffect, useState } from \"react\";\r\n// // // // // import API from \"../services/api\";\r\n// // // // // import { useNavigate } from \"react-router-dom\";\r\n// // // // // import \"../styles/AdminDashboard.css\";\r\n\r\n// // // // // export default function AdminDashboard() {\r\n// // // // //   const navigate = useNavigate();\r\n// // // // //   const [questions, setQuestions] = useState([]);\r\n// // // // //   const [form, setForm] = useState({\r\n// // // // //     questionText: \"\",\r\n// // // // //     optionsText: \"\",\r\n// // // // //     correctAnswer: \"\",\r\n// // // // //   });\r\n// // // // //   const [questionType, setQuestionType] = useState(\"MCQ\");\r\n// // // // //   const [file, setFile] = useState(null);\r\n// // // // //   const [loading, setLoading] = useState(false);\r\n\r\n// // // // //   // 🟢 Check admin login (token validation)\r\n// // // // //   useEffect(() => {\r\n// // // // //     const token = localStorage.getItem(\"adminToken\");\r\n// // // // //     if (!token) navigate(\"/admin/login\");\r\n// // // // //   }, [navigate]);\r\n\r\n// // // // //   // 🟢 Fetch questions from DB\r\n// // // // //   useEffect(() => {\r\n// // // // //     fetchQuestions();\r\n// // // // //   }, []);\r\n\r\n// // // // //   const fetchQuestions = async () => {\r\n// // // // //     try {\r\n// // // // //       const res = await API.get(\"/questions\");\r\n// // // // //       setQuestions(res.data || []);\r\n// // // // //     } catch (err) {\r\n// // // // //       console.error(err);\r\n// // // // //       alert(\"Failed to load questions.\");\r\n// // // // //     }\r\n// // // // //   };\r\n\r\n// // // // //   // 🟢 Add Question Manually\r\n// // // // //   const handleAddQuestion = async (e) => {\r\n// // // // //     e.preventDefault();\r\n// // // // //     const opts =\r\n// // // // //       questionType === \"MCQ\"\r\n// // // // //         ? form.optionsText.split(\"|\").map((s) => s.trim()).filter(Boolean)\r\n// // // // //         : [];\r\n\r\n// // // // //     if (!form.questionText.trim()) {\r\n// // // // //       return alert(\"Please enter question text.\");\r\n// // // // //     }\r\n// // // // //     if (questionType === \"MCQ\" && (opts.length < 2 || !form.correctAnswer.trim())) {\r\n// // // // //       return alert(\"Please enter at least 2 options and a correct answer.\");\r\n// // // // //     }\r\n\r\n// // // // //     setLoading(true);\r\n// // // // //     try {\r\n// // // // //       await API.post(\"/questions\", {\r\n// // // // //         questionType,\r\n// // // // //         questionText: form.questionText,\r\n// // // // //         options: opts,\r\n// // // // //         correctAnswer: questionType === \"MCQ\" ? form.correctAnswer : \"\",\r\n// // // // //       });\r\n\r\n// // // // //       setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" });\r\n// // // // //       await fetchQuestions();\r\n// // // // //       alert(\"✅ Question added successfully!\");\r\n// // // // //     } catch (err) {\r\n// // // // //       console.error(err);\r\n// // // // //       alert(err.response?.data?.error || \"Failed to add question.\");\r\n// // // // //     } finally {\r\n// // // // //       setLoading(false);\r\n// // // // //     }\r\n// // // // //   };\r\n\r\n// // // // //   // 🟢 Upload .docx question file\r\n// // // // //   const handleUpload = async () => {\r\n// // // // //     if (!file) return alert(\"Please select a file to upload.\");\r\n// // // // //     const fd = new FormData();\r\n// // // // //     fd.append(\"file\", file);\r\n\r\n// // // // //     try {\r\n// // // // //       const res = await API.post(\"/questions/upload\", fd, {\r\n// // // // //         headers: { \"Content-Type\": \"multipart/form-data\" },\r\n// // // // //       });\r\n// // // // //       alert(res.data.message || \"File uploaded successfully!\");\r\n// // // // //       await fetchQuestions();\r\n// // // // //     } catch (err) {\r\n// // // // //       console.error(err);\r\n// // // // //       alert(err.response?.data?.error || \"File upload failed.\");\r\n// // // // //     }\r\n// // // // //   };\r\n\r\n// // // // //   // 🟢 Logout\r\n// // // // //   const handleLogout = () => {\r\n// // // // //     localStorage.removeItem(\"adminToken\");\r\n// // // // //     navigate(\"/admin/login\");\r\n// // // // //   };\r\n\r\n// // // // //   return (\r\n// // // // //     <div className=\"container container-center py-4\">\r\n// // // // //       <div className=\"d-flex justify-content-between align-items-center mb-3\">\r\n// // // // //         <h2>Admin Dashboard</h2>\r\n// // // // //         <button className=\"btn btn-outline-danger btn-sm\" onClick={handleLogout}>\r\n// // // // //           Logout\r\n// // // // //         </button>\r\n// // // // //       </div>\r\n\r\n// // // // //       <div className=\"card card-clean p-4 mb-4\">\r\n// // // // //         <h5>Add questions or upload documents that will be shown to candidates.</h5>\r\n\r\n// // // // //         {/* Add Question Form */}\r\n// // // // //         <form onSubmit={handleAddQuestion} className=\"mt-3\">\r\n// // // // //           <div className=\"mb-3\">\r\n// // // // //             <label className=\"form-label\">Question Type</label>\r\n// // // // //             <select\r\n// // // // //               className=\"form-select\"\r\n// // // // //               value={questionType}\r\n// // // // //               onChange={(e) => setQuestionType(e.target.value)}\r\n// // // // //             >\r\n// // // // //               <option value=\"MCQ\">MCQ</option>\r\n// // // // //               <option value=\"Theory\">Theory</option>\r\n// // // // //             </select>\r\n// // // // //           </div>\r\n\r\n// // // // //           <div className=\"mb-3\">\r\n// // // // //             <label className=\"form-label\">Question Text</label>\r\n// // // // //             <textarea\r\n// // // // //               className=\"form-control\"\r\n// // // // //               rows={questionType === \"Theory\" ? 3 : 2}\r\n// // // // //               value={form.questionText}\r\n// // // // //               onChange={(e) => setForm({ ...form, questionText: e.target.value })}\r\n// // // // //               placeholder=\"Enter your question here...\"\r\n// // // // //             />\r\n// // // // //           </div>\r\n\r\n// // // // //           {questionType === \"MCQ\" && (\r\n// // // // //             <>\r\n// // // // //               <div className=\"mb-3\">\r\n// // // // //                 <label className=\"form-label\">Options (separate by |)</label>\r\n// // // // //                 <input\r\n// // // // //                   className=\"form-control\"\r\n// // // // //                   value={form.optionsText}\r\n// // // // //                   onChange={(e) =>\r\n// // // // //                     setForm({ ...form, optionsText: e.target.value })\r\n// // // // //                   }\r\n// // // // //                   placeholder=\"Option A | Option B | Option C | Option D\"\r\n// // // // //                 />\r\n// // // // //               </div>\r\n\r\n// // // // //               <div className=\"mb-3\">\r\n// // // // //                 <label className=\"form-label\">\r\n// // // // //                   Correct Answer (exact text of one option)\r\n// // // // //                 </label>\r\n// // // // //                 <input\r\n// // // // //                   className=\"form-control\"\r\n// // // // //                   value={form.correctAnswer}\r\n// // // // //                   onChange={(e) =>\r\n// // // // //                     setForm({ ...form, correctAnswer: e.target.value })\r\n// // // // //                   }\r\n// // // // //                   placeholder=\"Enter correct answer text\"\r\n// // // // //                 />\r\n// // // // //               </div>\r\n// // // // //             </>\r\n// // // // //           )}\r\n\r\n// // // // //           <div className=\"mb-3 d-flex gap-2\">\r\n// // // // //             <button\r\n// // // // //               className=\"btn btn-success\"\r\n// // // // //               type=\"submit\"\r\n// // // // //               disabled={loading}\r\n// // // // //             >\r\n// // // // //               {loading ? \"Adding...\" : \"Add Question\"}\r\n// // // // //             </button>\r\n// // // // //             <button\r\n// // // // //               type=\"button\"\r\n// // // // //               className=\"btn btn-secondary\"\r\n// // // // //               onClick={() =>\r\n// // // // //                 setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" })\r\n// // // // //               }\r\n// // // // //             >\r\n// // // // //               Clear\r\n// // // // //             </button>\r\n// // // // //           </div>\r\n// // // // //         </form>\r\n\r\n// // // // //         <hr className=\"my-4\" />\r\n\r\n// // // // //         {/* Upload Document Section */}\r\n// // // // //         <div className=\"mb-3\">\r\n// // // // //           <label className=\"form-label\">Upload Document (.docx)</label>\r\n// // // // //           <input\r\n// // // // //             type=\"file\"\r\n// // // // //             className=\"form-control\"\r\n// // // // //             accept=\".docx\"\r\n// // // // //             onChange={(e) => setFile(e.target.files[0])}\r\n// // // // //           />\r\n// // // // //           <div className=\"mt-2\">\r\n// // // // //             <button className=\"btn btn-primary\" onClick={handleUpload}>\r\n// // // // //               Upload\r\n// // // // //             </button>\r\n// // // // //           </div>\r\n// // // // //         </div>\r\n// // // // //       </div>\r\n\r\n// // // // //       {/* Display All Questions */}\r\n// // // // //       <div className=\"card card-clean p-4\">\r\n// // // // //         <h5>Available Questions</h5>\r\n\r\n// // // // //         {/* MCQ Section */}\r\n// // // // //         <h6 className=\"mt-3 text-primary\">MCQ Questions</h6>\r\n// // // // //         {questions.filter((q) => q.questionType === \"MCQ\").length === 0 && (\r\n// // // // //           <div className=\"text-muted\">No MCQs yet</div>\r\n// // // // //         )}\r\n// // // // //         {questions\r\n// // // // //           .filter((q) => q.questionType === \"MCQ\")\r\n// // // // //           .map((q, idx) => (\r\n// // // // //             <div key={q._id} className=\"mb-3 border-bottom pb-2\">\r\n// // // // //               <strong>Q{idx + 1}:</strong> {q.questionText}\r\n// // // // //               <div className=\"small text-muted\">\r\n// // // // //                 Options: {q.options.join(\" | \")}\r\n// // // // //               </div>\r\n// // // // //               <div className=\"small text-success\">\r\n// // // // //                 Correct: {q.correctAnswer}\r\n// // // // //               </div>\r\n// // // // //             </div>\r\n// // // // //           ))}\r\n\r\n// // // // //         {/* Theory Section */}\r\n// // // // //         <h6 className=\"mt-4 text-primary\">Theory Questions</h6>\r\n// // // // //         {questions.filter((q) => q.questionType === \"Theory\").length === 0 && (\r\n// // // // //           <div className=\"text-muted\">No theory questions yet</div>\r\n// // // // //         )}\r\n// // // // //         {questions\r\n// // // // //           .filter((q) => q.questionType === \"Theory\")\r\n// // // // //           .map((q, idx) => (\r\n// // // // //             <div key={q._id} className=\"mb-3 border-bottom pb-2\">\r\n// // // // //               <strong>Q{idx + 1}:</strong> {q.questionText}\r\n// // // // //             </div>\r\n// // // // //           ))}\r\n// // // // //       </div>\r\n// // // // //     </div>\r\n// // // // //   );\r\n// // // // // }\r\n"],"mappings":"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;cAAAC,YAAA;YAAA,OA0BR,CACL;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACG,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CACR;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAApF,EAAA,CA/jEwBD,cAAc;EAAA,QACnBL,WAAW;AAAA;AAAAoH,EAAA,GADN/G,cAAc;AAAA,IAAA+G,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}