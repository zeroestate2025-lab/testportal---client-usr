{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Downloads\\\\INTERVIEW PROCESS\\\\INTERVIEW PROCESS\\\\client\\\\src\\\\pages\\\\AdminDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"../styles/AdminDashboard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminDashboard = () => {\n  _s();\n  const [testResults, setTestResults] = useState([]);\n  useEffect(() => {\n    axios.get(\"http://localhost:5000/api/tests\").then(res => setTestResults(res.data)).catch(err => console.error(err));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"admin-dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Admin Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"results-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Candidate Test Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this), testResults.length > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"results-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 24,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 25,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Score\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 26,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 27,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: testResults.map((res, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: res.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: res.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [res.scorePercent, \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: new Date(res.submittedAt).toLocaleString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 19\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No test results yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n_s(AdminDashboard, \"oQkLQt3iM/ftY2yxJsKYfKEc7AI=\");\n_c = AdminDashboard;\nexport default AdminDashboard;\n\n// import React, { useEffect, useState } from \"react\";\n// import API from \"../services/api\";\n// import { useNavigate } from \"react-router-dom\";\n// import \"../styles/AdminDashboard.css\";\n\n// export default function AdminDashboard() {\n//   const navigate = useNavigate();\n//   const [questions, setQuestions] = useState([]);\n//   const [form, setForm] = useState({\n//     questionText: \"\",\n//     optionsText: \"\",\n//     correctAnswer: \"\",\n//   });\n//   const [questionType, setQuestionType] = useState(\"MCQ\");\n//   const [file, setFile] = useState(null);\n//   const [loading, setLoading] = useState(false);\n\n//   // ðŸŸ¢ Check admin login (token validation)\n//   useEffect(() => {\n//     const token = localStorage.getItem(\"adminToken\");\n//     if (!token) navigate(\"/admin/login\");\n//   }, [navigate]);\n\n//   // ðŸŸ¢ Fetch questions from DB\n//   useEffect(() => {\n//     fetchQuestions();\n//   }, []);\n\n//   const fetchQuestions = async () => {\n//     try {\n//       const res = await API.get(\"/questions\");\n//       setQuestions(res.data || []);\n//     } catch (err) {\n//       console.error(err);\n//       alert(\"Failed to load questions.\");\n//     }\n//   };\n\n//   // ðŸŸ¢ Add Question Manually\n//   const handleAddQuestion = async (e) => {\n//     e.preventDefault();\n//     const opts =\n//       questionType === \"MCQ\"\n//         ? form.optionsText.split(\"|\").map((s) => s.trim()).filter(Boolean)\n//         : [];\n\n//     if (!form.questionText.trim()) {\n//       return alert(\"Please enter question text.\");\n//     }\n//     if (questionType === \"MCQ\" && (opts.length < 2 || !form.correctAnswer.trim())) {\n//       return alert(\"Please enter at least 2 options and a correct answer.\");\n//     }\n\n//     setLoading(true);\n//     try {\n//       await API.post(\"/questions\", {\n//         questionType,\n//         questionText: form.questionText,\n//         options: opts,\n//         correctAnswer: questionType === \"MCQ\" ? form.correctAnswer : \"\",\n//       });\n\n//       setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" });\n//       await fetchQuestions();\n//       alert(\"âœ… Question added successfully!\");\n//     } catch (err) {\n//       console.error(err);\n//       alert(err.response?.data?.error || \"Failed to add question.\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // ðŸŸ¢ Upload .docx question file\n//   const handleUpload = async () => {\n//     if (!file) return alert(\"Please select a file to upload.\");\n//     const fd = new FormData();\n//     fd.append(\"file\", file);\n\n//     try {\n//       const res = await API.post(\"/questions/upload\", fd, {\n//         headers: { \"Content-Type\": \"multipart/form-data\" },\n//       });\n//       alert(res.data.message || \"File uploaded successfully!\");\n//       await fetchQuestions();\n//     } catch (err) {\n//       console.error(err);\n//       alert(err.response?.data?.error || \"File upload failed.\");\n//     }\n//   };\n\n//   // ðŸŸ¢ Logout\n//   const handleLogout = () => {\n//     localStorage.removeItem(\"adminToken\");\n//     navigate(\"/admin/login\");\n//   };\n\n//   return (\n//     <div className=\"container container-center py-4\">\n//       <div className=\"d-flex justify-content-between align-items-center mb-3\">\n//         <h2>Admin Dashboard</h2>\n//         <button className=\"btn btn-outline-danger btn-sm\" onClick={handleLogout}>\n//           Logout\n//         </button>\n//       </div>\n\n//       <div className=\"card card-clean p-4 mb-4\">\n//         <h5>Add questions or upload documents that will be shown to candidates.</h5>\n\n//         {/* Add Question Form */}\n//         <form onSubmit={handleAddQuestion} className=\"mt-3\">\n//           <div className=\"mb-3\">\n//             <label className=\"form-label\">Question Type</label>\n//             <select\n//               className=\"form-select\"\n//               value={questionType}\n//               onChange={(e) => setQuestionType(e.target.value)}\n//             >\n//               <option value=\"MCQ\">MCQ</option>\n//               <option value=\"Theory\">Theory</option>\n//             </select>\n//           </div>\n\n//           <div className=\"mb-3\">\n//             <label className=\"form-label\">Question Text</label>\n//             <textarea\n//               className=\"form-control\"\n//               rows={questionType === \"Theory\" ? 3 : 2}\n//               value={form.questionText}\n//               onChange={(e) => setForm({ ...form, questionText: e.target.value })}\n//               placeholder=\"Enter your question here...\"\n//             />\n//           </div>\n\n//           {questionType === \"MCQ\" && (\n//             <>\n//               <div className=\"mb-3\">\n//                 <label className=\"form-label\">Options (separate by |)</label>\n//                 <input\n//                   className=\"form-control\"\n//                   value={form.optionsText}\n//                   onChange={(e) =>\n//                     setForm({ ...form, optionsText: e.target.value })\n//                   }\n//                   placeholder=\"Option A | Option B | Option C | Option D\"\n//                 />\n//               </div>\n\n//               <div className=\"mb-3\">\n//                 <label className=\"form-label\">\n//                   Correct Answer (exact text of one option)\n//                 </label>\n//                 <input\n//                   className=\"form-control\"\n//                   value={form.correctAnswer}\n//                   onChange={(e) =>\n//                     setForm({ ...form, correctAnswer: e.target.value })\n//                   }\n//                   placeholder=\"Enter correct answer text\"\n//                 />\n//               </div>\n//             </>\n//           )}\n\n//           <div className=\"mb-3 d-flex gap-2\">\n//             <button\n//               className=\"btn btn-success\"\n//               type=\"submit\"\n//               disabled={loading}\n//             >\n//               {loading ? \"Adding...\" : \"Add Question\"}\n//             </button>\n//             <button\n//               type=\"button\"\n//               className=\"btn btn-secondary\"\n//               onClick={() =>\n//                 setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" })\n//               }\n//             >\n//               Clear\n//             </button>\n//           </div>\n//         </form>\n\n//         <hr className=\"my-4\" />\n\n//         {/* Upload Document Section */}\n//         <div className=\"mb-3\">\n//           <label className=\"form-label\">Upload Document (.docx)</label>\n//           <input\n//             type=\"file\"\n//             className=\"form-control\"\n//             accept=\".docx\"\n//             onChange={(e) => setFile(e.target.files[0])}\n//           />\n//           <div className=\"mt-2\">\n//             <button className=\"btn btn-primary\" onClick={handleUpload}>\n//               Upload\n//             </button>\n//           </div>\n//         </div>\n//       </div>\n\n//       {/* Display All Questions */}\n//       <div className=\"card card-clean p-4\">\n//         <h5>Available Questions</h5>\n\n//         {/* MCQ Section */}\n//         <h6 className=\"mt-3 text-primary\">MCQ Questions</h6>\n//         {questions.filter((q) => q.questionType === \"MCQ\").length === 0 && (\n//           <div className=\"text-muted\">No MCQs yet</div>\n//         )}\n//         {questions\n//           .filter((q) => q.questionType === \"MCQ\")\n//           .map((q, idx) => (\n//             <div key={q._id} className=\"mb-3 border-bottom pb-2\">\n//               <strong>Q{idx + 1}:</strong> {q.questionText}\n//               <div className=\"small text-muted\">\n//                 Options: {q.options.join(\" | \")}\n//               </div>\n//               <div className=\"small text-success\">\n//                 Correct: {q.correctAnswer}\n//               </div>\n//             </div>\n//           ))}\n\n//         {/* Theory Section */}\n//         <h6 className=\"mt-4 text-primary\">Theory Questions</h6>\n//         {questions.filter((q) => q.questionType === \"Theory\").length === 0 && (\n//           <div className=\"text-muted\">No theory questions yet</div>\n//         )}\n//         {questions\n//           .filter((q) => q.questionType === \"Theory\")\n//           .map((q, idx) => (\n//             <div key={q._id} className=\"mb-3 border-bottom pb-2\">\n//               <strong>Q{idx + 1}:</strong> {q.questionText}\n//             </div>\n//           ))}\n//       </div>\n//     </div>\n//   );\n// }\nvar _c;\n$RefreshReg$(_c, \"AdminDashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","AdminDashboard","_s","testResults","setTestResults","get","then","res","data","catch","err","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","i","name","email","scorePercent","Date","submittedAt","toLocaleString","_c","$RefreshReg$"],"sources":["C:/Users/HP/Downloads/INTERVIEW PROCESS/INTERVIEW PROCESS/client/src/pages/AdminDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"../styles/AdminDashboard.css\";\r\n\r\nconst AdminDashboard = () => {\r\n  const [testResults, setTestResults] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios.get(\"http://localhost:5000/api/tests\")\r\n      .then((res) => setTestResults(res.data))\r\n      .catch((err) => console.error(err));\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"admin-dashboard\">\r\n      <h2>Admin Dashboard</h2>\r\n\r\n      <div className=\"results-section\">\r\n        <h4>Candidate Test Results</h4>\r\n        {testResults.length > 0 ? (\r\n          <table className=\"results-table\">\r\n            <thead>\r\n              <tr>\r\n                <th>Name</th>\r\n                <th>Email</th>\r\n                <th>Score</th>\r\n                <th>Date</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {testResults.map((res, i) => (\r\n                <tr key={i}>\r\n                  <td>{res.name}</td>\r\n                  <td>{res.email}</td>\r\n                  <td>{res.scorePercent}%</td>\r\n                  <td>{new Date(res.submittedAt).toLocaleString()}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        ) : (\r\n          <p>No test results yet.</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminDashboard;\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import API from \"../services/api\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import \"../styles/AdminDashboard.css\";\r\n\r\n// export default function AdminDashboard() {\r\n//   const navigate = useNavigate();\r\n//   const [questions, setQuestions] = useState([]);\r\n//   const [form, setForm] = useState({\r\n//     questionText: \"\",\r\n//     optionsText: \"\",\r\n//     correctAnswer: \"\",\r\n//   });\r\n//   const [questionType, setQuestionType] = useState(\"MCQ\");\r\n//   const [file, setFile] = useState(null);\r\n//   const [loading, setLoading] = useState(false);\r\n\r\n//   // ðŸŸ¢ Check admin login (token validation)\r\n//   useEffect(() => {\r\n//     const token = localStorage.getItem(\"adminToken\");\r\n//     if (!token) navigate(\"/admin/login\");\r\n//   }, [navigate]);\r\n\r\n//   // ðŸŸ¢ Fetch questions from DB\r\n//   useEffect(() => {\r\n//     fetchQuestions();\r\n//   }, []);\r\n\r\n//   const fetchQuestions = async () => {\r\n//     try {\r\n//       const res = await API.get(\"/questions\");\r\n//       setQuestions(res.data || []);\r\n//     } catch (err) {\r\n//       console.error(err);\r\n//       alert(\"Failed to load questions.\");\r\n//     }\r\n//   };\r\n\r\n//   // ðŸŸ¢ Add Question Manually\r\n//   const handleAddQuestion = async (e) => {\r\n//     e.preventDefault();\r\n//     const opts =\r\n//       questionType === \"MCQ\"\r\n//         ? form.optionsText.split(\"|\").map((s) => s.trim()).filter(Boolean)\r\n//         : [];\r\n\r\n//     if (!form.questionText.trim()) {\r\n//       return alert(\"Please enter question text.\");\r\n//     }\r\n//     if (questionType === \"MCQ\" && (opts.length < 2 || !form.correctAnswer.trim())) {\r\n//       return alert(\"Please enter at least 2 options and a correct answer.\");\r\n//     }\r\n\r\n//     setLoading(true);\r\n//     try {\r\n//       await API.post(\"/questions\", {\r\n//         questionType,\r\n//         questionText: form.questionText,\r\n//         options: opts,\r\n//         correctAnswer: questionType === \"MCQ\" ? form.correctAnswer : \"\",\r\n//       });\r\n\r\n//       setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" });\r\n//       await fetchQuestions();\r\n//       alert(\"âœ… Question added successfully!\");\r\n//     } catch (err) {\r\n//       console.error(err);\r\n//       alert(err.response?.data?.error || \"Failed to add question.\");\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   // ðŸŸ¢ Upload .docx question file\r\n//   const handleUpload = async () => {\r\n//     if (!file) return alert(\"Please select a file to upload.\");\r\n//     const fd = new FormData();\r\n//     fd.append(\"file\", file);\r\n\r\n//     try {\r\n//       const res = await API.post(\"/questions/upload\", fd, {\r\n//         headers: { \"Content-Type\": \"multipart/form-data\" },\r\n//       });\r\n//       alert(res.data.message || \"File uploaded successfully!\");\r\n//       await fetchQuestions();\r\n//     } catch (err) {\r\n//       console.error(err);\r\n//       alert(err.response?.data?.error || \"File upload failed.\");\r\n//     }\r\n//   };\r\n\r\n//   // ðŸŸ¢ Logout\r\n//   const handleLogout = () => {\r\n//     localStorage.removeItem(\"adminToken\");\r\n//     navigate(\"/admin/login\");\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container container-center py-4\">\r\n//       <div className=\"d-flex justify-content-between align-items-center mb-3\">\r\n//         <h2>Admin Dashboard</h2>\r\n//         <button className=\"btn btn-outline-danger btn-sm\" onClick={handleLogout}>\r\n//           Logout\r\n//         </button>\r\n//       </div>\r\n\r\n//       <div className=\"card card-clean p-4 mb-4\">\r\n//         <h5>Add questions or upload documents that will be shown to candidates.</h5>\r\n\r\n//         {/* Add Question Form */}\r\n//         <form onSubmit={handleAddQuestion} className=\"mt-3\">\r\n//           <div className=\"mb-3\">\r\n//             <label className=\"form-label\">Question Type</label>\r\n//             <select\r\n//               className=\"form-select\"\r\n//               value={questionType}\r\n//               onChange={(e) => setQuestionType(e.target.value)}\r\n//             >\r\n//               <option value=\"MCQ\">MCQ</option>\r\n//               <option value=\"Theory\">Theory</option>\r\n//             </select>\r\n//           </div>\r\n\r\n//           <div className=\"mb-3\">\r\n//             <label className=\"form-label\">Question Text</label>\r\n//             <textarea\r\n//               className=\"form-control\"\r\n//               rows={questionType === \"Theory\" ? 3 : 2}\r\n//               value={form.questionText}\r\n//               onChange={(e) => setForm({ ...form, questionText: e.target.value })}\r\n//               placeholder=\"Enter your question here...\"\r\n//             />\r\n//           </div>\r\n\r\n//           {questionType === \"MCQ\" && (\r\n//             <>\r\n//               <div className=\"mb-3\">\r\n//                 <label className=\"form-label\">Options (separate by |)</label>\r\n//                 <input\r\n//                   className=\"form-control\"\r\n//                   value={form.optionsText}\r\n//                   onChange={(e) =>\r\n//                     setForm({ ...form, optionsText: e.target.value })\r\n//                   }\r\n//                   placeholder=\"Option A | Option B | Option C | Option D\"\r\n//                 />\r\n//               </div>\r\n\r\n//               <div className=\"mb-3\">\r\n//                 <label className=\"form-label\">\r\n//                   Correct Answer (exact text of one option)\r\n//                 </label>\r\n//                 <input\r\n//                   className=\"form-control\"\r\n//                   value={form.correctAnswer}\r\n//                   onChange={(e) =>\r\n//                     setForm({ ...form, correctAnswer: e.target.value })\r\n//                   }\r\n//                   placeholder=\"Enter correct answer text\"\r\n//                 />\r\n//               </div>\r\n//             </>\r\n//           )}\r\n\r\n//           <div className=\"mb-3 d-flex gap-2\">\r\n//             <button\r\n//               className=\"btn btn-success\"\r\n//               type=\"submit\"\r\n//               disabled={loading}\r\n//             >\r\n//               {loading ? \"Adding...\" : \"Add Question\"}\r\n//             </button>\r\n//             <button\r\n//               type=\"button\"\r\n//               className=\"btn btn-secondary\"\r\n//               onClick={() =>\r\n//                 setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" })\r\n//               }\r\n//             >\r\n//               Clear\r\n//             </button>\r\n//           </div>\r\n//         </form>\r\n\r\n//         <hr className=\"my-4\" />\r\n\r\n//         {/* Upload Document Section */}\r\n//         <div className=\"mb-3\">\r\n//           <label className=\"form-label\">Upload Document (.docx)</label>\r\n//           <input\r\n//             type=\"file\"\r\n//             className=\"form-control\"\r\n//             accept=\".docx\"\r\n//             onChange={(e) => setFile(e.target.files[0])}\r\n//           />\r\n//           <div className=\"mt-2\">\r\n//             <button className=\"btn btn-primary\" onClick={handleUpload}>\r\n//               Upload\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Display All Questions */}\r\n//       <div className=\"card card-clean p-4\">\r\n//         <h5>Available Questions</h5>\r\n\r\n//         {/* MCQ Section */}\r\n//         <h6 className=\"mt-3 text-primary\">MCQ Questions</h6>\r\n//         {questions.filter((q) => q.questionType === \"MCQ\").length === 0 && (\r\n//           <div className=\"text-muted\">No MCQs yet</div>\r\n//         )}\r\n//         {questions\r\n//           .filter((q) => q.questionType === \"MCQ\")\r\n//           .map((q, idx) => (\r\n//             <div key={q._id} className=\"mb-3 border-bottom pb-2\">\r\n//               <strong>Q{idx + 1}:</strong> {q.questionText}\r\n//               <div className=\"small text-muted\">\r\n//                 Options: {q.options.join(\" | \")}\r\n//               </div>\r\n//               <div className=\"small text-success\">\r\n//                 Correct: {q.correctAnswer}\r\n//               </div>\r\n//             </div>\r\n//           ))}\r\n\r\n//         {/* Theory Section */}\r\n//         <h6 className=\"mt-4 text-primary\">Theory Questions</h6>\r\n//         {questions.filter((q) => q.questionType === \"Theory\").length === 0 && (\r\n//           <div className=\"text-muted\">No theory questions yet</div>\r\n//         )}\r\n//         {questions\r\n//           .filter((q) => q.questionType === \"Theory\")\r\n//           .map((q, idx) => (\r\n//             <div key={q._id} className=\"mb-3 border-bottom pb-2\">\r\n//               <strong>Q{idx + 1}:</strong> {q.questionText}\r\n//             </div>\r\n//           ))}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n"],"mappings":"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A,GAAd3B,cAAc;AA4CpB,eAAeA,cAAc;;AAE7B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}