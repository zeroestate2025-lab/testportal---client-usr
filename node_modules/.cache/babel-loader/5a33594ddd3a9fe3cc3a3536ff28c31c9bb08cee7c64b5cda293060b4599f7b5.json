{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Downloads\\\\INTERVIEW PROCESS\\\\INTERVIEW PROCESS\\\\client\\\\src\\\\pages\\\\Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"../styles/Home.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Home() {\n  _s();\n  const [fullName, setFullName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [numQ, setNumQ] = useState(10);\n  const navigate = useNavigate();\n\n  // const handleStart = () => {\n  //   if (!fullName.trim() || !email.trim()) {\n  //     return alert(\"Please enter your full name and email.\");\n  //   }\n  //   // Navigate to test page with state (we pass via router state)\n  //   navigate(\"/test\", { state: { fullName, email, numQ } });\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container container-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header-banner mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"display-6\",\n        children: \"VLSI Interview Assessment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"lead\",\n        children: \"Test your knowledge of Very Large Scale Integration (VLSI) concepts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card card-clean p-4 mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Start Your Interview Test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-muted\",\n        children: \"You will be presented with randomly selected questions. Please answer to the best of your ability.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row g-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label\",\n            children: \"Full Name *\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"form-control\",\n            placeholder: \"Enter your full name\",\n            value: fullName,\n            onChange: e => setFullName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label\",\n            children: \"Email Address *\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"form-control\",\n            placeholder: \"Enter your email\",\n            value: email,\n            onChange: e => setEmail(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-12 mt-3\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary btn-lg w-100\",\n            onClick: handleStart,\n            children: \"Start Test\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card card-clean p-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n        children: \"Instructions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Read each question carefully before answering.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Use Next and Previous to navigate.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Submit once all questions are answered.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n// // import React, { useEffect, useState } from \"react\";\n// // import { useLocation, useNavigate } from \"react-router-dom\";\n// // import API from \"../services/api\";\n// // import \"../styles/TestPage.css\";\n\n// // export default function TestPage() {\n// //   const location = useLocation();\n// //   const navigate = useNavigate();\n// //   const { fullName, email } = location.state || {};\n\n// //   const [questions, setQuestions] = useState([]);\n// //   const [answers, setAnswers] = useState({});\n// //   const [currentIdx, setCurrentIdx] = useState(0);\n// //   const [loading, setLoading] = useState(true);\n// //   const [submitted, setSubmitted] = useState(false);\n// //   const [score, setScore] = useState(0);\n// //   const [resultSaved, setResultSaved] = useState(false);\n// //   const [testEnded, setTestEnded] = useState(false);\n// //   const [testNotStarted, setTestNotStarted] = useState(false);\n// //   const [timeLeft, setTimeLeft] = useState(null);\n\n// //   // 🟢 Fetch questions ONLY when admin starts test (fully backend controlled)\n// //   useEffect(() => {\n// //     if (!fullName || !email) {\n// //       navigate(\"/\");\n// //       return;\n// //     }\n\n// //     const fetchQuestions = async () => {\n// //       try {\n// //         const res = await API.questions.getAll();\n\n// //         // 🛑 If admin hasn't started the test\n// //         if (res.data?.error) {\n// //           setTestNotStarted(true);\n// //           setLoading(false);\n// //           return;\n// //         }\n\n// //         // ✅ Admin-defined number of questions & time limit\n// //         setQuestions(res.data.questions || []);\n// //         setTimeLeft((res.data.timeLimit || 10) * 60); // Convert minutes → seconds\n// //       } catch (err) {\n// //         console.error(\"❌ Error fetching questions:\", err);\n// //         alert(\"Please wait for admin to start the test.\");\n// //         setTestNotStarted(true);\n// //       } finally {\n// //         setLoading(false);\n// //       }\n// //     };\n\n// //     fetchQuestions();\n// //   }, [fullName, email, navigate]);\n\n// //   // 🕒 Countdown timer based on admin-defined time\n// //   useEffect(() => {\n// //     if (timeLeft === null) return;\n// //     if (timeLeft <= 0) {\n// //       alert(\"⏰ Time’s up! Submitting your test automatically.\");\n// //       handleSubmit();\n// //       return;\n// //     }\n\n// //     const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n// //     return () => clearTimeout(timer);\n// //   }, [timeLeft]);\n\n// //   // 🛑 Detect tab switch, reload, or page exit → terminate test\n// //   useEffect(() => {\n// //     const handleBeforeUnload = (e) => {\n// //       e.preventDefault();\n// //       e.returnValue = \"\";\n// //       setTestEnded(true);\n// //     };\n\n// //     const handleVisibilityChange = () => {\n// //       if (document.hidden) {\n// //         setTestEnded(true);\n// //       }\n// //     };\n\n// //     window.addEventListener(\"beforeunload\", handleBeforeUnload);\n// //     document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n\n// //     return () => {\n// //       window.removeEventListener(\"beforeunload\", handleBeforeUnload);\n// //       document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n// //     };\n// //   }, []);\n\n// //   // 🟢 Record answer\n// //   const handleSelect = (questionId, value) => {\n// //     setAnswers({ ...answers, [questionId]: value });\n// //   };\n\n// //   // 🟢 Navigation\n// //   const goNext = () => {\n// //     if (currentIdx < questions.length - 1) setCurrentIdx(currentIdx + 1);\n// //   };\n// //   const goPrev = () => {\n// //     if (currentIdx > 0) setCurrentIdx(currentIdx - 1);\n// //   };\n\n// //   // 🟢 Submit test (auto or manual)\n// //   const handleSubmit = async () => {\n// //     if (submitted) return;\n// //     if (Object.keys(answers).length < questions.length) {\n// //       if (!window.confirm(\"Some questions are unanswered. Submit anyway?\")) return;\n// //     }\n\n// //     let s = 0;\n// //     questions.forEach((q) => {\n// //       if (q.questionType === \"MCQ\" && answers[q._id] === q.correctAnswer) s += 1;\n// //     });\n\n// //     setScore(s);\n// //     setSubmitted(true);\n\n// //     const formattedAnswers = questions.map((q) => ({\n// //       question: q.questionText,\n// //       userAnswer: answers[q._id] || \"Not answered\",\n// //       correctAnswer: q.correctAnswer || \"\",\n// //       isCorrect: q.questionType === \"MCQ\" ? answers[q._id] === q.correctAnswer : null,\n// //       type: q.questionType || \"Theory\",\n// //     }));\n\n// //     try {\n// //       await API.tests.submit({\n// //         name: fullName,\n// //         email,\n// //         answers: formattedAnswers,\n// //         totalQuestions: questions.length,\n// //         correctAnswers: s,\n// //         scorePercent: ((s / questions.length) * 100).toFixed(2),\n// //       });\n// //       setResultSaved(true);\n// //     } catch (err) {\n// //       console.error(\"❌ Error saving result:\", err);\n// //       alert(\"Failed to save result to server.\");\n// //     }\n// //   };\n\n// //   // 🛑 If user switched tab or reloaded\n// //   if (testEnded) {\n// //     return (\n// //       <div className=\"container container-center\">\n// //         <div className=\"card card-clean p-4 text-center\">\n// //           <h3 className=\"text-danger\">⚠️ Test Ended</h3>\n// //           <p>Your session ended because you switched tabs, reloaded, or left the page.</p>\n// //           <h4 className=\"mt-3 text-success\">Thank you for your time!</h4>\n// //           <button className=\"btn btn-primary mt-3\" onClick={() => navigate(\"/\")}>\n// //             Go to Home\n// //           </button>\n// //         </div>\n// //       </div>\n// //     );\n// //   }\n\n// //   // 🛑 If test not started by admin\n// //   if (testNotStarted) {\n// //     return (\n// //       <div className=\"container container-center\">\n// //         <div className=\"card card-clean p-4 text-center\">\n// //           <h3 className=\"text-warning\">⚠️ Test Not Active</h3>\n// //           <p>The test has not been started by the administrator.</p>\n// //           <h5 className=\"mt-2\">Please contact admin to start your test.</h5>\n// //           <button className=\"btn btn-primary mt-3\" onClick={() => navigate(\"/\")}>\n// //             Back to Home\n// //           </button>\n// //         </div>\n// //       </div>\n// //     );\n// //   }\n\n// //   // 🟢 Loading screen\n// //   if (loading)\n// //     return <div className=\"container container-center\">Loading questions…</div>;\n\n// //   if (!questions || questions.length === 0)\n// //     return (\n// //       <div className=\"container container-center\">\n// //         No questions available. Please try later.\n// //       </div>\n// //     );\n\n// //   // 🟢 After submission — review screen\n// //   if (submitted) {\n// //     return (\n// //       <div className=\"container container-center\">\n// //         <div className=\"card card-clean p-4\">\n// //           <h3 className=\"text-success\">Test Completed Successfully</h3>\n// //           <p>\n// //             <strong>{fullName}</strong> ({email})\n// //           </p>\n// //           <h4>\n// //             Your Score: {score} / {questions.length}\n// //           </h4>\n\n// //           {resultSaved && (\n// //             <div className=\"alert alert-success mt-2\">\n// //               ✅ Your result has been recorded successfully!\n// //             </div>\n// //           )}\n\n// //           <hr />\n// //           <h5>Review Answers</h5>\n// //           <div>\n// //             {questions.map((q, idx) => (\n// //               <div className=\"review-question\" key={q._id}>\n// //                 <b>Q{idx + 1}:</b> {q.questionText}\n// //                 <div>\n// //                   Your answer:{\" \"}\n// //                   <span\n// //                     className={\n// //                       q.questionType === \"MCQ\"\n// //                         ? answers[q._id] === q.correctAnswer\n// //                           ? \"text-success\"\n// //                           : \"text-danger\"\n// //                         : \"text-primary\"\n// //                     }\n// //                   >\n// //                     {answers[q._id] || \"Not answered\"}\n// //                   </span>\n// //                 </div>\n// //                 {q.questionType === \"MCQ\" && (\n// //                   <div>\n// //                     Correct answer:{\" \"}\n// //                     <span className=\"text-success\">{q.correctAnswer}</span>\n// //                   </div>\n// //                 )}\n// //               </div>\n// //             ))}\n// //           </div>\n\n// //           <div className=\"mt-4\">\n// //             <button className=\"btn btn-primary me-2\" onClick={() => navigate(\"/\")}>\n// //               Back to Home\n// //             </button>\n// //             <button\n// //               className=\"btn btn-outline-secondary\"\n// //               onClick={() => window.location.reload()}\n// //             >\n// //               Retake Test\n// //             </button>\n// //           </div>\n// //         </div>\n// //       </div>\n// //     );\n// //   }\n\n// //   // 🟢 Active test page\n// //   const currentQ = questions[currentIdx];\n// //   const selectedAnswer = answers[currentQ._id] || \"\";\n\n// //   return (\n// //     <div className=\"test-container\">\n// //       <div className=\"card test-card\">\n// //         {/* Header */}\n// //         <div className=\"test-header\">\n// //           <div>\n// //             <h5 className=\"text-danger fw-bold\">Candidate: {fullName}</h5>\n// //             <small className=\"text-muted\">{email}</small>\n// //           </div>\n// //           <div>\n// //             <span className=\"badge bg-primary me-2\">\n// //               Question {currentIdx + 1} / {questions.length}\n// //             </span>\n// //             <span className=\"badge bg-danger\">\n// //               ⏳ {Math.floor(timeLeft / 60)}:\n// //               {(timeLeft % 60).toString().padStart(2, \"0\")}\n// //             </span>\n// //           </div>\n// //         </div>\n\n// //         {/* Question Body */}\n// //         <div className=\"test-body\">\n// //           <h6 className=\"question-text\">\n// //             <b>Q{currentIdx + 1}:</b> {currentQ.questionText}\n// //           </h6>\n\n// //           {currentQ.questionType === \"MCQ\" && currentQ.options?.length > 0 ? (\n// //             <div className=\"options-container\">\n// //               {currentQ.options.map((opt, i) => (\n// //                 <label\n// //                   key={i}\n// //                   className={`option-item ${\n// //                     selectedAnswer === opt ? \"selected\" : \"\"\n// //                   }`}\n// //                 >\n// //                   <input\n// //                     type=\"radio\"\n// //                     name={`question-${currentQ._id}`}\n// //                     value={opt}\n// //                     checked={selectedAnswer === opt}\n// //                     onChange={(e) => handleSelect(currentQ._id, e.target.value)}\n// //                   />\n// //                   {opt}\n// //                 </label>\n// //               ))}\n// //             </div>\n// //           ) : (\n// //             <textarea\n// //               className=\"theory-input\"\n// //               placeholder=\"Type your answer here...\"\n// //               value={selectedAnswer}\n// //               onChange={(e) => handleSelect(currentQ._id, e.target.value)}\n// //               rows={5}\n// //             ></textarea>\n// //           )}\n// //         </div>\n\n// //         {/* Footer */}\n// //         <div className=\"test-footer\">\n// //           <div>\n// //             <button\n// //               className=\"btn btn-secondary me-3\"\n// //               onClick={goPrev}\n// //               disabled={currentIdx === 0}\n// //             >\n// //               Previous\n// //             </button>\n// //             <button\n// //               className=\"btn btn-secondary\"\n// //               onClick={goNext}\n// //               disabled={currentIdx === questions.length - 1}\n// //             >\n// //               Next\n// //             </button>\n// //           </div>\n\n// //           <div>\n// //             <button className=\"btn btn-success\" onClick={handleSubmit}>\n// //               Submit Test\n// //             </button>\n// //           </div>\n// //         </div>\n// //       </div>\n// //     </div>\n// //   );\n// // }\n\n// import React, { useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import \"../styles/Home.css\";\n\n// export default function Home() {\n//   const [fullName, setFullName] = useState(\"\");\n//   const [email, setEmail] = useState(\"\");\n//   const [numQ, setNumQ] = useState(10);\n//   const navigate = useNavigate();\n\n//   const handleStart = () => {\n//     if (!fullName.trim() || !email.trim()) {\n//       return alert(\"Please enter your full name and email.\");\n//     }\n//     // Navigate to test page with state (we pass via router state)\n//     navigate(\"/test\", { state: { fullName, email, numQ } });\n//   };\n\n//   return (\n//     <div className=\"container container-center\">\n//       <div className=\"header-banner mb-4\">\n//         <h1 className=\"display-6\">VLSI Interview Assessment</h1>\n//         <p className=\"lead\">Test your knowledge of Very Large Scale Integration (VLSI) concepts</p>\n//       </div>\n\n//       <div className=\"card card-clean p-4 mb-4\">\n//         <h5>Start Your Interview Test</h5>\n//         <p className=\"text-muted\">You will be presented with randomly selected questions. Please answer to the best of your ability.</p>\n\n//         <div className=\"row g-3\">\n//           <div className=\"col-md-6\">\n//             <label className=\"form-label\">Full Name *</label>\n//             <input className=\"form-control\" placeholder=\"Enter your full name\" value={fullName} onChange={(e) => setFullName(e.target.value)} />\n//           </div>\n\n//           <div className=\"col-md-6\">\n//             <label className=\"form-label\">Email Address *</label>\n//             <input className=\"form-control\" placeholder=\"Enter your email\" value={email} onChange={(e) => setEmail(e.target.value)} />\n//           </div>\n\n//           {/* <div className=\"col-md-6\">\n//             <label className=\"form-label\">Number of Questions</label>\n//             <select className=\"form-select\" value={numQ} onChange={(e) => setNumQ(Number(e.target.value))}>\n//               <option value={5}>5 Questions</option>\n//               <option value={10}>10 Questions</option>\n//             </select>\n//           </div> */}\n\n//           <div className=\"col-12 mt-3\">\n//             <button className=\"btn btn-primary btn-lg w-100\" onClick={handleStart}>Start Test</button>\n//           </div>\n//         </div>\n//       </div>\n\n//       <div className=\"card card-clean p-3\">\n//         <h6>Instructions</h6>\n//         <ul>\n//           <li>Read each question carefully before answering.</li>\n//           <li>Use Next and Previous to navigate.</li>\n//           <li>Submit once all questions are answered.</li>\n//         </ul>\n//       </div>\n//     </div>\n//   );\n// }\n_s(Home, \"FEOHCQztGoP88CjgoS8Bi6uKW18=\", false, function () {\n  return [useNavigate];\n});\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","Home","_s","fullName","setFullName","email","setEmail","numQ","setNumQ","navigate","className","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","target","onClick","handleStart","_c","$RefreshReg$"],"sources":["C:/Users/HP/Downloads/INTERVIEW PROCESS/INTERVIEW PROCESS/client/src/pages/Home.js"],"sourcesContent":["\r\nimport React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"../styles/Home.css\";\r\n\r\nexport default function Home() {\r\n  const [fullName, setFullName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [numQ, setNumQ] = useState(10);\r\n  const navigate = useNavigate();\r\n\r\n  // const handleStart = () => {\r\n  //   if (!fullName.trim() || !email.trim()) {\r\n  //     return alert(\"Please enter your full name and email.\");\r\n  //   }\r\n  //   // Navigate to test page with state (we pass via router state)\r\n  //   navigate(\"/test\", { state: { fullName, email, numQ } });\r\n  // };\r\n\r\n  \r\n\r\n  return (\r\n    <div className=\"container container-center\">\r\n      <div className=\"header-banner mb-4\">\r\n        <h1 className=\"display-6\">VLSI Interview Assessment</h1>\r\n        <p className=\"lead\">Test your knowledge of Very Large Scale Integration (VLSI) concepts</p>\r\n      </div>\r\n\r\n      <div className=\"card card-clean p-4 mb-4\">\r\n        <h5>Start Your Interview Test</h5>\r\n        <p className=\"text-muted\">You will be presented with randomly selected questions. Please answer to the best of your ability.</p>\r\n\r\n        <div className=\"row g-3\">\r\n          <div className=\"col-md-6\">\r\n            <label className=\"form-label\">Full Name *</label>\r\n            <input className=\"form-control\" placeholder=\"Enter your full name\" value={fullName} onChange={(e) => setFullName(e.target.value)} />\r\n          </div>\r\n\r\n          <div className=\"col-md-6\">\r\n            <label className=\"form-label\">Email Address *</label>\r\n            <input className=\"form-control\" placeholder=\"Enter your email\" value={email} onChange={(e) => setEmail(e.target.value)} />\r\n          </div>\r\n\r\n          {/* <div className=\"col-md-6\">\r\n            <label className=\"form-label\">Number of Questions</label>\r\n            <select className=\"form-select\" value={numQ} onChange={(e) => setNumQ(Number(e.target.value))}>\r\n              <option value={5}>5 Questions</option>\r\n              <option value={10}>10 Questions</option>\r\n            </select>\r\n          </div> */}\r\n\r\n          <div className=\"col-12 mt-3\">\r\n            <button className=\"btn btn-primary btn-lg w-100\" onClick={handleStart}>Start Test</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"card card-clean p-3\">\r\n        <h6>Instructions</h6>\r\n        <ul>\r\n          <li>Read each question carefully before answering.</li>\r\n          <li>Use Next and Previous to navigate.</li>\r\n          <li>Submit once all questions are answered.</li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n// // import React, { useEffect, useState } from \"react\";\r\n// // import { useLocation, useNavigate } from \"react-router-dom\";\r\n// // import API from \"../services/api\";\r\n// // import \"../styles/TestPage.css\";\r\n\r\n// // export default function TestPage() {\r\n// //   const location = useLocation();\r\n// //   const navigate = useNavigate();\r\n// //   const { fullName, email } = location.state || {};\r\n\r\n// //   const [questions, setQuestions] = useState([]);\r\n// //   const [answers, setAnswers] = useState({});\r\n// //   const [currentIdx, setCurrentIdx] = useState(0);\r\n// //   const [loading, setLoading] = useState(true);\r\n// //   const [submitted, setSubmitted] = useState(false);\r\n// //   const [score, setScore] = useState(0);\r\n// //   const [resultSaved, setResultSaved] = useState(false);\r\n// //   const [testEnded, setTestEnded] = useState(false);\r\n// //   const [testNotStarted, setTestNotStarted] = useState(false);\r\n// //   const [timeLeft, setTimeLeft] = useState(null);\r\n\r\n// //   // 🟢 Fetch questions ONLY when admin starts test (fully backend controlled)\r\n// //   useEffect(() => {\r\n// //     if (!fullName || !email) {\r\n// //       navigate(\"/\");\r\n// //       return;\r\n// //     }\r\n\r\n// //     const fetchQuestions = async () => {\r\n// //       try {\r\n// //         const res = await API.questions.getAll();\r\n\r\n// //         // 🛑 If admin hasn't started the test\r\n// //         if (res.data?.error) {\r\n// //           setTestNotStarted(true);\r\n// //           setLoading(false);\r\n// //           return;\r\n// //         }\r\n\r\n// //         // ✅ Admin-defined number of questions & time limit\r\n// //         setQuestions(res.data.questions || []);\r\n// //         setTimeLeft((res.data.timeLimit || 10) * 60); // Convert minutes → seconds\r\n// //       } catch (err) {\r\n// //         console.error(\"❌ Error fetching questions:\", err);\r\n// //         alert(\"Please wait for admin to start the test.\");\r\n// //         setTestNotStarted(true);\r\n// //       } finally {\r\n// //         setLoading(false);\r\n// //       }\r\n// //     };\r\n\r\n// //     fetchQuestions();\r\n// //   }, [fullName, email, navigate]);\r\n\r\n// //   // 🕒 Countdown timer based on admin-defined time\r\n// //   useEffect(() => {\r\n// //     if (timeLeft === null) return;\r\n// //     if (timeLeft <= 0) {\r\n// //       alert(\"⏰ Time’s up! Submitting your test automatically.\");\r\n// //       handleSubmit();\r\n// //       return;\r\n// //     }\r\n\r\n// //     const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r\n// //     return () => clearTimeout(timer);\r\n// //   }, [timeLeft]);\r\n\r\n// //   // 🛑 Detect tab switch, reload, or page exit → terminate test\r\n// //   useEffect(() => {\r\n// //     const handleBeforeUnload = (e) => {\r\n// //       e.preventDefault();\r\n// //       e.returnValue = \"\";\r\n// //       setTestEnded(true);\r\n// //     };\r\n\r\n// //     const handleVisibilityChange = () => {\r\n// //       if (document.hidden) {\r\n// //         setTestEnded(true);\r\n// //       }\r\n// //     };\r\n\r\n// //     window.addEventListener(\"beforeunload\", handleBeforeUnload);\r\n// //     document.addEventListener(\"visibilitychange\", handleVisibilityChange);\r\n\r\n// //     return () => {\r\n// //       window.removeEventListener(\"beforeunload\", handleBeforeUnload);\r\n// //       document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\r\n// //     };\r\n// //   }, []);\r\n\r\n// //   // 🟢 Record answer\r\n// //   const handleSelect = (questionId, value) => {\r\n// //     setAnswers({ ...answers, [questionId]: value });\r\n// //   };\r\n\r\n// //   // 🟢 Navigation\r\n// //   const goNext = () => {\r\n// //     if (currentIdx < questions.length - 1) setCurrentIdx(currentIdx + 1);\r\n// //   };\r\n// //   const goPrev = () => {\r\n// //     if (currentIdx > 0) setCurrentIdx(currentIdx - 1);\r\n// //   };\r\n\r\n// //   // 🟢 Submit test (auto or manual)\r\n// //   const handleSubmit = async () => {\r\n// //     if (submitted) return;\r\n// //     if (Object.keys(answers).length < questions.length) {\r\n// //       if (!window.confirm(\"Some questions are unanswered. Submit anyway?\")) return;\r\n// //     }\r\n\r\n// //     let s = 0;\r\n// //     questions.forEach((q) => {\r\n// //       if (q.questionType === \"MCQ\" && answers[q._id] === q.correctAnswer) s += 1;\r\n// //     });\r\n\r\n// //     setScore(s);\r\n// //     setSubmitted(true);\r\n\r\n// //     const formattedAnswers = questions.map((q) => ({\r\n// //       question: q.questionText,\r\n// //       userAnswer: answers[q._id] || \"Not answered\",\r\n// //       correctAnswer: q.correctAnswer || \"\",\r\n// //       isCorrect: q.questionType === \"MCQ\" ? answers[q._id] === q.correctAnswer : null,\r\n// //       type: q.questionType || \"Theory\",\r\n// //     }));\r\n\r\n// //     try {\r\n// //       await API.tests.submit({\r\n// //         name: fullName,\r\n// //         email,\r\n// //         answers: formattedAnswers,\r\n// //         totalQuestions: questions.length,\r\n// //         correctAnswers: s,\r\n// //         scorePercent: ((s / questions.length) * 100).toFixed(2),\r\n// //       });\r\n// //       setResultSaved(true);\r\n// //     } catch (err) {\r\n// //       console.error(\"❌ Error saving result:\", err);\r\n// //       alert(\"Failed to save result to server.\");\r\n// //     }\r\n// //   };\r\n\r\n// //   // 🛑 If user switched tab or reloaded\r\n// //   if (testEnded) {\r\n// //     return (\r\n// //       <div className=\"container container-center\">\r\n// //         <div className=\"card card-clean p-4 text-center\">\r\n// //           <h3 className=\"text-danger\">⚠️ Test Ended</h3>\r\n// //           <p>Your session ended because you switched tabs, reloaded, or left the page.</p>\r\n// //           <h4 className=\"mt-3 text-success\">Thank you for your time!</h4>\r\n// //           <button className=\"btn btn-primary mt-3\" onClick={() => navigate(\"/\")}>\r\n// //             Go to Home\r\n// //           </button>\r\n// //         </div>\r\n// //       </div>\r\n// //     );\r\n// //   }\r\n\r\n// //   // 🛑 If test not started by admin\r\n// //   if (testNotStarted) {\r\n// //     return (\r\n// //       <div className=\"container container-center\">\r\n// //         <div className=\"card card-clean p-4 text-center\">\r\n// //           <h3 className=\"text-warning\">⚠️ Test Not Active</h3>\r\n// //           <p>The test has not been started by the administrator.</p>\r\n// //           <h5 className=\"mt-2\">Please contact admin to start your test.</h5>\r\n// //           <button className=\"btn btn-primary mt-3\" onClick={() => navigate(\"/\")}>\r\n// //             Back to Home\r\n// //           </button>\r\n// //         </div>\r\n// //       </div>\r\n// //     );\r\n// //   }\r\n\r\n// //   // 🟢 Loading screen\r\n// //   if (loading)\r\n// //     return <div className=\"container container-center\">Loading questions…</div>;\r\n\r\n// //   if (!questions || questions.length === 0)\r\n// //     return (\r\n// //       <div className=\"container container-center\">\r\n// //         No questions available. Please try later.\r\n// //       </div>\r\n// //     );\r\n\r\n// //   // 🟢 After submission — review screen\r\n// //   if (submitted) {\r\n// //     return (\r\n// //       <div className=\"container container-center\">\r\n// //         <div className=\"card card-clean p-4\">\r\n// //           <h3 className=\"text-success\">Test Completed Successfully</h3>\r\n// //           <p>\r\n// //             <strong>{fullName}</strong> ({email})\r\n// //           </p>\r\n// //           <h4>\r\n// //             Your Score: {score} / {questions.length}\r\n// //           </h4>\r\n\r\n// //           {resultSaved && (\r\n// //             <div className=\"alert alert-success mt-2\">\r\n// //               ✅ Your result has been recorded successfully!\r\n// //             </div>\r\n// //           )}\r\n\r\n// //           <hr />\r\n// //           <h5>Review Answers</h5>\r\n// //           <div>\r\n// //             {questions.map((q, idx) => (\r\n// //               <div className=\"review-question\" key={q._id}>\r\n// //                 <b>Q{idx + 1}:</b> {q.questionText}\r\n// //                 <div>\r\n// //                   Your answer:{\" \"}\r\n// //                   <span\r\n// //                     className={\r\n// //                       q.questionType === \"MCQ\"\r\n// //                         ? answers[q._id] === q.correctAnswer\r\n// //                           ? \"text-success\"\r\n// //                           : \"text-danger\"\r\n// //                         : \"text-primary\"\r\n// //                     }\r\n// //                   >\r\n// //                     {answers[q._id] || \"Not answered\"}\r\n// //                   </span>\r\n// //                 </div>\r\n// //                 {q.questionType === \"MCQ\" && (\r\n// //                   <div>\r\n// //                     Correct answer:{\" \"}\r\n// //                     <span className=\"text-success\">{q.correctAnswer}</span>\r\n// //                   </div>\r\n// //                 )}\r\n// //               </div>\r\n// //             ))}\r\n// //           </div>\r\n\r\n// //           <div className=\"mt-4\">\r\n// //             <button className=\"btn btn-primary me-2\" onClick={() => navigate(\"/\")}>\r\n// //               Back to Home\r\n// //             </button>\r\n// //             <button\r\n// //               className=\"btn btn-outline-secondary\"\r\n// //               onClick={() => window.location.reload()}\r\n// //             >\r\n// //               Retake Test\r\n// //             </button>\r\n// //           </div>\r\n// //         </div>\r\n// //       </div>\r\n// //     );\r\n// //   }\r\n\r\n// //   // 🟢 Active test page\r\n// //   const currentQ = questions[currentIdx];\r\n// //   const selectedAnswer = answers[currentQ._id] || \"\";\r\n\r\n// //   return (\r\n// //     <div className=\"test-container\">\r\n// //       <div className=\"card test-card\">\r\n// //         {/* Header */}\r\n// //         <div className=\"test-header\">\r\n// //           <div>\r\n// //             <h5 className=\"text-danger fw-bold\">Candidate: {fullName}</h5>\r\n// //             <small className=\"text-muted\">{email}</small>\r\n// //           </div>\r\n// //           <div>\r\n// //             <span className=\"badge bg-primary me-2\">\r\n// //               Question {currentIdx + 1} / {questions.length}\r\n// //             </span>\r\n// //             <span className=\"badge bg-danger\">\r\n// //               ⏳ {Math.floor(timeLeft / 60)}:\r\n// //               {(timeLeft % 60).toString().padStart(2, \"0\")}\r\n// //             </span>\r\n// //           </div>\r\n// //         </div>\r\n\r\n// //         {/* Question Body */}\r\n// //         <div className=\"test-body\">\r\n// //           <h6 className=\"question-text\">\r\n// //             <b>Q{currentIdx + 1}:</b> {currentQ.questionText}\r\n// //           </h6>\r\n\r\n// //           {currentQ.questionType === \"MCQ\" && currentQ.options?.length > 0 ? (\r\n// //             <div className=\"options-container\">\r\n// //               {currentQ.options.map((opt, i) => (\r\n// //                 <label\r\n// //                   key={i}\r\n// //                   className={`option-item ${\r\n// //                     selectedAnswer === opt ? \"selected\" : \"\"\r\n// //                   }`}\r\n// //                 >\r\n// //                   <input\r\n// //                     type=\"radio\"\r\n// //                     name={`question-${currentQ._id}`}\r\n// //                     value={opt}\r\n// //                     checked={selectedAnswer === opt}\r\n// //                     onChange={(e) => handleSelect(currentQ._id, e.target.value)}\r\n// //                   />\r\n// //                   {opt}\r\n// //                 </label>\r\n// //               ))}\r\n// //             </div>\r\n// //           ) : (\r\n// //             <textarea\r\n// //               className=\"theory-input\"\r\n// //               placeholder=\"Type your answer here...\"\r\n// //               value={selectedAnswer}\r\n// //               onChange={(e) => handleSelect(currentQ._id, e.target.value)}\r\n// //               rows={5}\r\n// //             ></textarea>\r\n// //           )}\r\n// //         </div>\r\n\r\n// //         {/* Footer */}\r\n// //         <div className=\"test-footer\">\r\n// //           <div>\r\n// //             <button\r\n// //               className=\"btn btn-secondary me-3\"\r\n// //               onClick={goPrev}\r\n// //               disabled={currentIdx === 0}\r\n// //             >\r\n// //               Previous\r\n// //             </button>\r\n// //             <button\r\n// //               className=\"btn btn-secondary\"\r\n// //               onClick={goNext}\r\n// //               disabled={currentIdx === questions.length - 1}\r\n// //             >\r\n// //               Next\r\n// //             </button>\r\n// //           </div>\r\n\r\n// //           <div>\r\n// //             <button className=\"btn btn-success\" onClick={handleSubmit}>\r\n// //               Submit Test\r\n// //             </button>\r\n// //           </div>\r\n// //         </div>\r\n// //       </div>\r\n// //     </div>\r\n// //   );\r\n// // }\r\n\r\n// import React, { useState } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import \"../styles/Home.css\";\r\n\r\n// export default function Home() {\r\n//   const [fullName, setFullName] = useState(\"\");\r\n//   const [email, setEmail] = useState(\"\");\r\n//   const [numQ, setNumQ] = useState(10);\r\n//   const navigate = useNavigate();\r\n\r\n//   const handleStart = () => {\r\n//     if (!fullName.trim() || !email.trim()) {\r\n//       return alert(\"Please enter your full name and email.\");\r\n//     }\r\n//     // Navigate to test page with state (we pass via router state)\r\n//     navigate(\"/test\", { state: { fullName, email, numQ } });\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container container-center\">\r\n//       <div className=\"header-banner mb-4\">\r\n//         <h1 className=\"display-6\">VLSI Interview Assessment</h1>\r\n//         <p className=\"lead\">Test your knowledge of Very Large Scale Integration (VLSI) concepts</p>\r\n//       </div>\r\n\r\n//       <div className=\"card card-clean p-4 mb-4\">\r\n//         <h5>Start Your Interview Test</h5>\r\n//         <p className=\"text-muted\">You will be presented with randomly selected questions. Please answer to the best of your ability.</p>\r\n\r\n//         <div className=\"row g-3\">\r\n//           <div className=\"col-md-6\">\r\n//             <label className=\"form-label\">Full Name *</label>\r\n//             <input className=\"form-control\" placeholder=\"Enter your full name\" value={fullName} onChange={(e) => setFullName(e.target.value)} />\r\n//           </div>\r\n\r\n//           <div className=\"col-md-6\">\r\n//             <label className=\"form-label\">Email Address *</label>\r\n//             <input className=\"form-control\" placeholder=\"Enter your email\" value={email} onChange={(e) => setEmail(e.target.value)} />\r\n//           </div>\r\n\r\n//           {/* <div className=\"col-md-6\">\r\n//             <label className=\"form-label\">Number of Questions</label>\r\n//             <select className=\"form-select\" value={numQ} onChange={(e) => setNumQ(Number(e.target.value))}>\r\n//               <option value={5}>5 Questions</option>\r\n//               <option value={10}>10 Questions</option>\r\n//             </select>\r\n//           </div> */}\r\n\r\n//           <div className=\"col-12 mt-3\">\r\n//             <button className=\"btn btn-primary btn-lg w-100\" onClick={handleStart}>Start Test</button>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n\r\n//       <div className=\"card card-clean p-3\">\r\n//         <h6>Instructions</h6>\r\n//         <ul>\r\n//           <li>Read each question carefully before answering.</li>\r\n//           <li>Use Next and Previous to navigate.</li>\r\n//           <li>Submit once all questions are answered.</li>\r\n//         </ul>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n"],"mappings":"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A;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAb,EAAA,CApdwBD,IAAI;EAAA,QAITH,WAAW;AAAA;AAAAyB,EAAA,GAJNtB,IAAI;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}