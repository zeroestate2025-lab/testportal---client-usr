{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Downloads\\\\INTERVIEW PROCESS\\\\INTERVIEW PROCESS\\\\client\\\\src\\\\pages\\\\AdminDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport API from \"../services/api\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"../styles/AdminDashboard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AdminDashboard() {\n  _s();\n  const navigate = useNavigate();\n  const [questions, setQuestions] = useState([]);\n  const [results, setResults] = useState([]);\n  const [activeTab, setActiveTab] = useState(\"questions\");\n  const [form, setForm] = useState({\n    questionText: \"\",\n    answerText: \"\"\n  });\n  const [file, setFile] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [loadingResults, setLoadingResults] = useState(false);\n  const [editingId, setEditingId] = useState(null);\n\n  // 🧩 Test control state\n  const [testControl, setTestControl] = useState({\n    isActive: false,\n    questionLimit: 10,\n    timeLimit: 30\n  });\n\n  // 🟢 Check admin login\n  useEffect(() => {\n    const token = localStorage.getItem(\"adminToken\");\n    if (!token) navigate(\"/admin/login\");\n  }, [navigate]);\n\n  // 🟢 Initial fetch\n  useEffect(() => {\n    fetchQuestions();\n    fetchResults();\n    fetchTestControl();\n  }, []);\n\n  // ✅ Fetch Test Control\n  const fetchTestControl = async () => {\n    try {\n      const res = await API.testcontrol.get();\n      if (res.data) setTestControl(res.data);\n    } catch (err) {\n      console.error(\"Error fetching test control:\", err);\n    }\n  };\n\n  // ✅ Update Test Control + Activate users\n  const handleStartTest = async () => {\n    try {\n      // 1️⃣ Start the test\n      await API.testcontrol.update({\n        isActive: true,\n        questionLimit: testControl.questionLimit,\n        timeLimit: testControl.timeLimit\n      });\n\n      // 2️⃣ Activate all waiting users\n      const res = await API.user.activateAll();\n      alert(res.data.message || \"✅ Test started, all users activated!\");\n      await fetchWaitingUsers();\n    } catch (err) {\n      console.error(\"❌ Failed to start test:\", err);\n      alert(\"❌ Failed to start test.\");\n    }\n  };\n\n  // ✅ Stop test\n  const handleStopTest = async () => {\n    try {\n      await API.testcontrol.update({\n        isActive: false\n      });\n      alert(\"⏹️ Test stopped successfully!\");\n      await fetchTestControl();\n    } catch (err) {\n      console.error(\"❌ Error stopping test:\", err);\n      alert(\"Failed to stop test.\");\n    }\n  };\n\n  // ✅ Clear last waiting user\n  const handleClearLastWaitingUser = async () => {\n    if (!window.confirm(\"Are you sure you want to delete the last waiting user?\")) return;\n    try {\n      const res = await API.waitingUsers.deleteLast();\n      alert(res.data.message || \"Last waiting user deleted.\");\n      await fetchWaitingUsers();\n    } catch (err) {\n      var _err$response, _err$response$data;\n      console.error(\"❌ Error deleting last waiting user:\", err);\n      alert(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || \"Failed to delete last waiting user.\");\n    }\n  };\n\n  // ✅ Fetch Questions\n  const fetchQuestions = async () => {\n    try {\n      const res = await API.questions.getAll();\n      const data = Array.isArray(res.data) ? res.data : res.data.questions || [];\n      setQuestions(data);\n    } catch (err) {\n      console.error(err);\n      alert(\"❌ Failed to load questions.\");\n    }\n  };\n\n  // ✅ Fetch Results\n  const fetchResults = async () => {\n    setLoadingResults(true);\n    try {\n      const res = await API.tests.getAll();\n      setResults(res.data || []);\n    } catch (err) {\n      console.error(err);\n      alert(\"❌ Failed to load test results.\");\n    } finally {\n      setLoadingResults(false);\n    }\n  };\n\n  // 🟢 Waiting Users\n  const [waitingUsers, setWaitingUsers] = useState([]);\n  const [waitingCount, setWaitingCount] = useState(0);\n  const fetchWaitingUsers = async () => {\n    try {\n      var _res$data;\n      const res = await API.waitingUsers.getAll();\n      setWaitingUsers(res.data || []);\n      setWaitingCount(((_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.length) || 0);\n    } catch (err) {\n      console.error(\"❌ Error fetching waiting users:\", err);\n    }\n  };\n\n  // 🔄 Periodically fetch users\n  useEffect(() => {\n    fetchWaitingUsers();\n    const interval = setInterval(fetchWaitingUsers, 5000);\n    return () => clearInterval(interval);\n  }, []);\n  const handleLogout = () => {\n    localStorage.removeItem(\"adminToken\");\n    navigate(\"/admin/login\");\n  };\n  const handleViewValidation = id => {\n    navigate(`/admin/result/${id}`);\n  };\n\n  // ✅ Add / Update Question\n  const handleAddOrUpdate = async e => {\n    e.preventDefault();\n    if (!form.questionText.trim()) {\n      return alert(\"Please enter question text.\");\n    }\n    setLoading(true);\n    try {\n      const payload = {\n        questionType: \"Theory\",\n        questionText: form.questionText,\n        correctAnswer: form.answerText\n      };\n      if (editingId) {\n        await API.questions.update(editingId, payload);\n        alert(\"✅ Question updated successfully!\");\n      } else {\n        await API.questions.create(payload);\n        alert(\"✅ Question added successfully!\");\n      }\n      setForm({\n        questionText: \"\",\n        answerText: \"\"\n      });\n      setEditingId(null);\n      await fetchQuestions();\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      console.error(err);\n      alert(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.error) || \"❌ Operation failed.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleEdit = q => {\n    setEditingId(q._id);\n    setForm({\n      questionText: q.questionText,\n      answerText: q.correctAnswer || \"\"\n    });\n    window.scrollTo({\n      top: 0,\n      behavior: \"smooth\"\n    });\n  };\n  const handleDelete = async id => {\n    if (!window.confirm(\"Are you sure you want to delete this question?\")) return;\n    try {\n      await API.questions.delete(id);\n      alert(\"🗑️ Question deleted successfully!\");\n      await fetchQuestions();\n    } catch (err) {\n      console.error(err);\n      alert(\"❌ Failed to delete question.\");\n    }\n  };\n  const handleUpload = async () => {\n    if (!file) return alert(\"Please select a file to upload.\");\n    const fd = new FormData();\n    fd.append(\"file\", file);\n    try {\n      const res = await API.questions.uploadDoc(fd);\n      alert(res.data.message || \"✅ File uploaded successfully!\");\n      await fetchQuestions();\n    } catch (err) {\n      var _err$response3, _err$response3$data;\n      console.error(err);\n      alert(((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.error) || \"❌ File upload failed.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"admin-dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"admin-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Admin Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"logout-btn\",\n        onClick: handleLogout,\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tab-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `tab-btn ${activeTab === \"questions\" ? \"active\" : \"\"}`,\n        onClick: () => setActiveTab(\"questions\"),\n        children: \"\\uD83E\\uDDE9 Questions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `tab-btn ${activeTab === \"results\" ? \"active\" : \"\"}`,\n        onClick: () => setActiveTab(\"results\"),\n        children: \"\\uD83D\\uDCCA Test Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this), activeTab === \"questions\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tab-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card form-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"\\uD83D\\uDD79\\uFE0F Test Control Panel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card form-section mt-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex justify-content-between align-items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              children: \"\\uD83D\\uDD52 Live Waiting Users\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-sm btn-outline-danger\",\n              onClick: handleClearLastWaitingUser,\n              disabled: waitingUsers.length === 0,\n              children: \"\\uD83D\\uDDD1\\uFE0F Clear Last Entry\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-muted mb-2\",\n            children: [\"Total Waiting: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: waitingCount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 32\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 15\n          }, this), waitingUsers.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-secondary small\",\n            children: \"No users are waiting currently.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"table table-sm table-bordered\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"#\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 278,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Full Name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 279,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Email\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 280,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Status\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 281,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 277,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: waitingUsers.map((user, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: index + 1\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 287,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: user.fullName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 288,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: user.email\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 289,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: user.status\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 290,\n                  columnNumber: 25\n                }, this)]\n              }, user._id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 286,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Number of Questions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            className: \"form-control\",\n            value: testControl.questionLimit,\n            onChange: e => setTestControl({\n              ...testControl,\n              questionLimit: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Time Limit (minutes)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            className: \"form-control\",\n            value: testControl.timeLimit,\n            onChange: e => setTestControl({\n              ...testControl,\n              timeLimit: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Status: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `ms-2 fw-bold ${testControl.isActive ? \"text-success\" : \"text-danger\"}`,\n            children: testControl.isActive ? \"Active\" : \"Inactive\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex gap-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-success\",\n            onClick: handleStartTest,\n            children: \"\\u25B6\\uFE0F Start Test\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-danger\",\n            onClick: handleStopTest,\n            children: \"\\u23F9\\uFE0F Stop Test\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 9\n    }, this) :\n    /*#__PURE__*/\n    // ✅ Test Results Tab\n    _jsxDEV(\"div\", {\n      className: \"tab-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card results-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Candidate Test Results\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 13\n        }, this), loadingResults ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading test results...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 15\n        }, this) : results.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-muted\",\n          children: \"No test results yet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"results-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 362,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Email\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 363,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Total\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 364,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Correct\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 365,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Score %\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 366,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Status\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 367,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Submitted At\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 368,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Action\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 369,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 361,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: results.map((res, idx) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: res.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 375,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: res.email\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 376,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: res.totalQuestions\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 377,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: res.correctAnswers\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 378,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [res.scorePercent, \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 379,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    color: res.status === \"Validated\" ? \"green\" : \"orange\",\n                    fontWeight: 600\n                  },\n                  children: res.status || \"Validation Pending\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 381,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 380,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: new Date(res.submittedAt).toLocaleString()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 391,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btn-sm btn-primary\",\n                  onClick: () => handleViewValidation(res._id),\n                  children: \"View / Validate\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 393,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 392,\n                columnNumber: 23\n              }, this)]\n            }, idx, true, {\n              fileName: _jsxFileName,\n              lineNumber: 374,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 225,\n    columnNumber: 5\n  }, this);\n}\n\n// import React, { useEffect, useState } from \"react\";\n// import API from \"../services/api\";\n// import { useNavigate } from \"react-router-dom\";\n// import \"../styles/AdminDashboard.css\";\n\n// export default function AdminDashboard() {\n//   const navigate = useNavigate();\n//   const [questions, setQuestions] = useState([]);\n//   const [results, setResults] = useState([]);\n//   const [activeTab, setActiveTab] = useState(\"questions\");\n//   const [form, setForm] = useState({\n//     questionText: \"\",\n//     answerText: \"\",\n//   });\n//   const [file, setFile] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [loadingResults, setLoadingResults] = useState(false);\n//   const [editingId, setEditingId] = useState(null);\n\n//   // 🧩 Test control state\n//   const [testControl, setTestControl] = useState({\n//     isActive: false,\n//     questionLimit: 10,\n//     timeLimit: 30,\n//   });\n\n//   // 🟢 Check admin login\n//   useEffect(() => {\n//     const token = localStorage.getItem(\"adminToken\");\n//     if (!token) navigate(\"/admin/login\");\n//   }, [navigate]);\n\n//   // 🟢 Initial fetch\n//   useEffect(() => {\n//     fetchQuestions();\n//     fetchResults();\n//     fetchTestControl();\n//   }, []);\n\n//   // ✅ Fetch Test Control\n//   const fetchTestControl = async () => {\n//     try {\n//       const res = await API.testcontrol.get();\n//       if (res.data) setTestControl(res.data);\n//     } catch (err) {\n//       console.error(\"Error fetching test control:\", err);\n//     }\n//   };\n\n//     const handleClearLastWaitingUser = async () => {\n//     if (!window.confirm(\"Are you sure you want to delete the last waiting user?\")) return;\n//     try {\n//       const res = await API.waitingUsers.deleteLast();\n//       alert(res.data.message || \"Last waiting user deleted.\");\n//       // Refresh the waiting list immediately\n//       const updated = await API.waitingUsers.getAll();\n//       setWaitingUsers(updated.data || []);\n//       setWaitingCount(updated.data?.length || 0);\n//     } catch (err) {\n//       console.error(\"❌ Error deleting last waiting user:\", err);\n//       alert(err.response?.data?.error || \"Failed to delete last waiting user.\");\n//     }\n//   };\n\n//   // ✅ Update Test Control\n//   const updateTestControl = async (updates) => {\n//     try {\n//       const res = await API.testcontrol.update(updates);\n//       if (res.data) setTestControl(res.data);\n//       alert(\"✅ Test control updated successfully!\");\n//     } catch (err) {\n//       console.error(\"❌ Failed to update test control:\", err);\n//       alert(\"❌ Failed to update test control.\");\n//     }\n//   };\n\n//   // ✅ Fetch Questions\n//   const fetchQuestions = async () => {\n//     try {\n//       const res = await API.questions.getAll();\n//       const data = Array.isArray(res.data)\n//         ? res.data\n//         : res.data.questions || [];\n//       setQuestions(data);\n//     } catch (err) {\n//       console.error(err);\n//       alert(\"❌ Failed to load questions.\");\n//     }\n//   };\n\n//   // ✅ Fetch Results\n//   const fetchResults = async () => {\n//     setLoadingResults(true);\n//     try {\n//       const res = await API.tests.getAll();\n//       setResults(res.data || []);\n//     } catch (err) {\n//       console.error(err);\n//       alert(\"❌ Failed to load test results.\");\n//     } finally {\n//       setLoadingResults(false);\n//     }\n//   };\n\n//   // ✅ Add / Update Question\n//   const handleAddOrUpdate = async (e) => {\n//     e.preventDefault();\n\n//     if (!form.questionText.trim()) {\n//       return alert(\"Please enter question text.\");\n//     }\n\n//     setLoading(true);\n//     try {\n//       const payload = {\n//         questionType: \"Theory\",\n//         questionText: form.questionText,\n//         correctAnswer: form.answerText,\n//       };\n\n//       if (editingId) {\n//         await API.questions.update(editingId, payload);\n//         alert(\"✅ Question updated successfully!\");\n//       } else {\n//         await API.questions.create(payload);\n//         alert(\"✅ Question added successfully!\");\n//       }\n\n//       setForm({ questionText: \"\", answerText: \"\" });\n//       setEditingId(null);\n//       await fetchQuestions();\n//     } catch (err) {\n//       console.error(err);\n//       alert(err.response?.data?.error || \"❌ Operation failed.\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // ✅ Delete Question\n//   const handleDelete = async (id) => {\n//     if (!window.confirm(\"Are you sure you want to delete this question?\")) return;\n//     try {\n//       await API.questions.delete(id);\n//       alert(\"🗑️ Question deleted successfully!\");\n//       await fetchQuestions();\n//     } catch (err) {\n//       console.error(err);\n//       alert(\"❌ Failed to delete question.\");\n//     }\n//   };\n\n//   // ✅ Edit Question\n//   const handleEdit = (q) => {\n//     setEditingId(q._id);\n//     setForm({\n//       questionText: q.questionText,\n//       answerText: q.correctAnswer || \"\",\n//     });\n//     window.scrollTo({ top: 0, behavior: \"smooth\" });\n//   };\n\n//   // ✅ Upload File\n//   const handleUpload = async () => {\n//     if (!file) return alert(\"Please select a file to upload.\");\n//     const fd = new FormData();\n//     fd.append(\"file\", file);\n\n//     try {\n//       const res = await API.questions.uploadDoc(fd);\n//       alert(res.data.message || \"✅ File uploaded successfully!\");\n//       await fetchQuestions();\n//     } catch (err) {\n//       console.error(err);\n//       alert(err.response?.data?.error || \"❌ File upload failed.\");\n//     }\n//   };\n\n//   const handleLogout = () => {\n//     localStorage.removeItem(\"adminToken\");\n//     navigate(\"/admin/login\");\n//   };\n\n//   const handleViewValidation = (id) => {\n//     navigate(`/admin/result/${id}`);\n//   };\n//     // 🟢 Waiting Users\n//   const [waitingUsers, setWaitingUsers] = useState([]);\n//   const [waitingCount, setWaitingCount] = useState(0);\n\n//   // 🔄 Fetch waiting users periodically\n//   useEffect(() => {\n//     const fetchWaitingUsers = async () => {\n//       try {\n//         const res = await API.waitingUsers.getAll();\n//         setWaitingUsers(res.data || []);\n//         setWaitingCount(res.data?.length || 0);\n//       } catch (err) {\n//         console.error(\"❌ Error fetching waiting users:\", err);\n//       }\n//     };\n\n//     fetchWaitingUsers();\n//     const interval = setInterval(fetchWaitingUsers, 5000); // refresh every 5s\n//     return () => clearInterval(interval);\n//   }, []);\n\n//   return (\n//     <div className=\"admin-dashboard\">\n//       {/* Header */}\n//       <div className=\"admin-header\">\n//         <h2>Admin Dashboard</h2>\n//         <button className=\"logout-btn\" onClick={handleLogout}>\n//           Logout\n//         </button>\n//       </div>\n\n//       {/* Tabs */}\n//       <div className=\"tab-buttons\">\n//         <button\n//           className={`tab-btn ${activeTab === \"questions\" ? \"active\" : \"\"}`}\n//           onClick={() => setActiveTab(\"questions\")}\n//         >\n//           🧩 Questions\n//         </button>\n//         <button\n//           className={`tab-btn ${activeTab === \"results\" ? \"active\" : \"\"}`}\n//           onClick={() => setActiveTab(\"results\")}\n//         >\n//           📊 Test Results\n//         </button>\n//       </div>\n\n//       {activeTab === \"questions\" ? (\n//         <div className=\"tab-content\">\n//           {/* ✅ Test Control Panel */}\n//           <div className=\"card form-section\">\n//             <h5>🕹️ Test Control Panel</h5>\n\n//           {/* ✅ Live Waiting Users Section */}\n// <div className=\"card form-section mt-4\">\n//   <div className=\"d-flex justify-content-between align-items-center\">\n//     <h5>🕒 Live Waiting Users</h5>\n//     <button\n//       className=\"btn btn-sm btn-outline-danger\"\n//       onClick={handleClearLastWaitingUser}\n//       disabled={waitingUsers.length === 0}\n//     >\n//       🗑️ Clear Last Entry\n//     </button>\n//   </div>\n\n//   <p className=\"text-muted mb-2\">\n//     Total Waiting: <strong>{waitingCount}</strong>\n//   </p>\n\n//   {waitingUsers.length === 0 ? (\n//     <div className=\"text-secondary small\">No users are waiting currently.</div>\n//   ) : (\n//     <table className=\"table table-sm table-bordered\">\n//       <thead>\n//         <tr>\n//           <th>#</th>\n//           <th>Full Name</th>\n//           <th>Email</th>\n//         </tr>\n//       </thead>\n//       <tbody>\n//         {waitingUsers.map((user, index) => (\n//           <tr key={user._id}>\n//             <td>{index + 1}</td>\n//             <td>{user.fullName}</td>\n//             <td>{user.email}</td>\n//           </tr>\n//         ))}\n//       </tbody>\n//     </table>\n//   )}\n// </div>\n\n//             <div className=\"mb-3\">\n//               <label>Number of Questions</label>\n//               <input\n//                 type=\"number\"\n//                 className=\"form-control\"\n//                 value={testControl.questionLimit}\n//                 onChange={(e) =>\n//                   setTestControl({\n//                     ...testControl,\n//                     questionLimit: e.target.value,\n//                   })\n//                 }\n//               />\n//             </div>\n\n//             <div className=\"mb-3\">\n//               <label>Time Limit (minutes)</label>\n//               <input\n//                 type=\"number\"\n//                 className=\"form-control\"\n//                 value={testControl.timeLimit}\n//                 onChange={(e) =>\n//                   setTestControl({\n//                     ...testControl,\n//                     timeLimit: e.target.value,\n//                   })\n//                 }\n//               />\n//             </div>\n\n//             <div className=\"mb-3\">\n//               <label>Status: </label>\n//               <span\n//                 className={`ms-2 fw-bold ${\n//                   testControl.isActive ? \"text-success\" : \"text-danger\"\n//                 }`}\n//               >\n//                 {testControl.isActive ? \"Active\" : \"Inactive\"}\n//               </span>\n//             </div>\n\n//             <div className=\"d-flex gap-2\">\n//               <button\n//                 className=\"btn btn-success\"\n//                 onClick={() =>\n//                   updateTestControl({\n//                     isActive: true,\n//                     questionLimit: testControl.questionLimit,\n//                     timeLimit: testControl.timeLimit,\n//                   })\n//                 }\n//               >\n//                 ▶️ Start Test\n//               </button>\n//               <button\n//                 className=\"btn btn-danger\"\n//                 onClick={() =>\n//                   updateTestControl({\n//                     isActive: false,\n//                   })\n//                 }\n//               >\n//                 ⏹️ Stop Test\n//               </button>\n//             </div>\n//           </div>\n\n//           {/* ✅ Question Form */}\n//           <div className=\"card form-section mt-4\">\n//             <h5>\n//               {editingId ? \"✏️ Edit Theory Question\" : \"➕ Add / Upload Questions\"}\n//             </h5>\n\n//             <form onSubmit={handleAddOrUpdate}>\n//               <div className=\"mb-3\">\n//                 <label className=\"form-label\">Question Text</label>\n//                 <textarea\n//                   className=\"form-control\"\n//                   rows={3}\n//                   value={form.questionText}\n//                   onChange={(e) =>\n//                     setForm({ ...form, questionText: e.target.value })\n//                   }\n//                   placeholder=\"Enter your theory question here...\"\n//                 />\n//               </div>\n\n//               <div className=\"mb-3\">\n//                 <label className=\"form-label\">Model Answer</label>\n//                 <textarea\n//                   className=\"form-control\"\n//                   rows={4}\n//                   value={form.answerText}\n//                   onChange={(e) =>\n//                     setForm({ ...form, answerText: e.target.value })\n//                   }\n//                   placeholder=\"Enter model answer for theory question\"\n//                 />\n//               </div>\n\n//               <div className=\"d-flex gap-2\">\n//                 <button\n//                   className=\"btn btn-success\"\n//                   type=\"submit\"\n//                   disabled={loading}\n//                 >\n//                   {loading\n//                     ? \"Saving...\"\n//                     : editingId\n//                     ? \"Update Question\"\n//                     : \"Add Question\"}\n//                 </button>\n//                 <button\n//                   type=\"button\"\n//                   className=\"btn btn-secondary\"\n//                   onClick={() => {\n//                     setForm({ questionText: \"\", answerText: \"\" });\n//                     setEditingId(null);\n//                   }}\n//                 >\n//                   Clear\n//                 </button>\n//               </div>\n//             </form>\n\n//             <hr className=\"my-4\" />\n\n//             {/* ✅ Upload Section */}\n//             <div className=\"upload-section\">\n//               <label className=\"form-label\">Upload File (.txt / .docx)</label>\n//               <input\n//                 type=\"file\"\n//                 className=\"form-control\"\n//                 accept=\".txt,.docx\"\n//                 onChange={(e) => setFile(e.target.files[0])}\n//               />\n//               <div className=\"mt-2\">\n//                 <button className=\"btn btn-primary\" onClick={handleUpload}>\n//                   Upload\n//                 </button>\n//               </div>\n//             </div>\n//           </div>\n\n//           {/* ✅ Available Questions */}\n//           <div className=\"card available-questions mt-4\">\n//             <h5>Available Theory Questions</h5>\n\n//             {Array.isArray(questions) &&\n//               questions.length === 0 && (\n//                 <div className=\"text-muted\">No theory questions yet</div>\n//               )}\n\n//             {Array.isArray(questions) &&\n//               questions.map((q, idx) => (\n//                 <div key={q._id} className=\"question-item\">\n//                   <strong>Q{idx + 1}:</strong> {q.questionText}\n//                   {q.correctAnswer && (\n//                     <div className=\"small text-success\">\n//                       <b>Model Answer:</b> {q.correctAnswer}\n//                     </div>\n//                   )}\n//                   <div className=\"action-buttons\">\n//                     <button\n//                       className=\"btn btn-sm btn-warning\"\n//                       onClick={() => handleEdit(q)}\n//                     >\n//                       Edit\n//                     </button>\n//                     <button\n//                       className=\"btn btn-sm btn-danger\"\n//                       onClick={() => handleDelete(q._id)}\n//                     >\n//                       Delete\n//                     </button>\n//                   </div>\n//                 </div>\n//               ))}\n//           </div>\n//         </div>\n//       ) : (\n//         // ✅ Test Results Tab\n//         <div className=\"tab-content\">\n//           <div className=\"card results-section\">\n//             <h5>Candidate Test Results</h5>\n//             {loadingResults ? (\n//               <div>Loading test results...</div>\n//             ) : results.length === 0 ? (\n//               <div className=\"text-muted\">No test results yet</div>\n//             ) : (\n//               <table className=\"results-table\">\n//                 <thead>\n//                   <tr>\n//                     <th>Name</th>\n//                     <th>Email</th>\n//                     <th>Total</th>\n//                     <th>Correct</th>\n//                     <th>Score %</th>\n//                     <th>Status</th>\n//                     <th>Submitted At</th>\n//                     <th>Action</th>\n//                   </tr>\n//                 </thead>\n//                 <tbody>\n//                   {results.map((res, idx) => (\n//                     <tr key={idx}>\n//                       <td>{res.name}</td>\n//                       <td>{res.email}</td>\n//                       <td>{res.totalQuestions}</td>\n//                       <td>{res.correctAnswers}</td>\n//                       <td>{res.scorePercent}%</td>\n//                       <td>\n//                         <span\n//                           style={{\n//                             color:\n//                               res.status === \"Validated\" ? \"green\" : \"orange\",\n//                             fontWeight: 600,\n//                           }}\n//                         >\n//                           {res.status || \"Validation Pending\"}\n//                         </span>\n//                       </td>\n//                       <td>{new Date(res.submittedAt).toLocaleString()}</td>\n//                       <td>\n//                         <button\n//                           className=\"btn btn-sm btn-primary\"\n//                           onClick={() => handleViewValidation(res._id)}\n//                         >\n//                           View / Validate\n//                         </button>\n//                       </td>\n//                     </tr>\n//                   ))}\n//                 </tbody>\n//               </table>\n//             )}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n// // import React, { useEffect, useState } from \"react\";\n// // import API from \"../services/api\";\n// // import { useNavigate } from \"react-router-dom\";\n// // import \"../styles/AdminDashboard.css\";\n\n// // export default function AdminDashboard() {\n// //   const navigate = useNavigate();\n// //   const [questions, setQuestions] = useState([]);\n// //   const [results, setResults] = useState([]);\n// //   const [activeTab, setActiveTab] = useState(\"questions\");\n// //   const [form, setForm] = useState({\n// //     questionText: \"\",\n// //     answerText: \"\",\n// //   });\n// //   const [file, setFile] = useState(null);\n// //   const [loading, setLoading] = useState(false);\n// //   const [loadingResults, setLoadingResults] = useState(false);\n// //   const [editingId, setEditingId] = useState(null);\n\n// //   // 🧩 Test control state\n// //   const [testControl, setTestControl] = useState({\n// //     isActive: false,\n// //     questionLimit: 10,\n// //     timeLimit: 30,\n// //   });\n\n// //   // 🟢 Check admin login\n// //   useEffect(() => {\n// //     const token = localStorage.getItem(\"adminToken\");\n// //     if (!token) navigate(\"/admin/login\");\n// //   }, [navigate]);\n\n// //   // 🟢 Initial fetch\n// //   useEffect(() => {\n// //     fetchQuestions();\n// //     fetchResults();\n// //     fetchTestControl();\n// //   }, []);\n\n// //   // ✅ Fetch Test Control\n// //   const fetchTestControl = async () => {\n// //     try {\n// //       const res = await API.testcontrol.get();\n// //       if (res.data) setTestControl(res.data);\n// //     } catch (err) {\n// //       console.error(\"Error fetching test control:\", err);\n// //     }\n// //   };\n\n// //   // ✅ Update Test Control\n// //   const updateTestControl = async (updates) => {\n// //     try {\n// //       const res = await API.testcontrol.update(updates);\n// //       if (res.data) setTestControl(res.data);\n// //       alert(\"✅ Test control updated successfully!\");\n// //     } catch (err) {\n// //       console.error(\"❌ Failed to update test control:\", err);\n// //       alert(\"❌ Failed to update test control.\");\n// //     }\n// //   };\n\n// //   // ✅ Fetch Questions\n// //   const fetchQuestions = async () => {\n// //     try {\n// //       const res = await API.questions.getAll();\n// //       const data = Array.isArray(res.data)\n// //         ? res.data\n// //         : res.data.questions || [];\n// //       setQuestions(data);\n// //     } catch (err) {\n// //       console.error(err);\n// //       alert(\"❌ Failed to load questions.\");\n// //     }\n// //   };\n\n// //   // ✅ Fetch Results\n// //   const fetchResults = async () => {\n// //     setLoadingResults(true);\n// //     try {\n// //       const res = await API.tests.getAll();\n// //       setResults(res.data || []);\n// //     } catch (err) {\n// //       console.error(err);\n// //       alert(\"❌ Failed to load test results.\");\n// //     } finally {\n// //       setLoadingResults(false);\n// //     }\n// //   };\n// //   const [waitingCount, setWaitingCount] = useState(0);\n\n// // const fetchWaitingCount = async () => {\n// //   try {\n// //     const res = await API.get(\"/waiting-users/count\");\n// //     setWaitingCount(res.data.count);\n// //   } catch (err) {\n// //     console.error(\"Error fetching waiting users count:\", err);\n// //   }\n// // };\n\n// // // Fetch waiting count once when page loads\n// // useEffect(() => {\n// //   fetchWaitingCount();\n// //   const interval = setInterval(fetchWaitingCount, 10000); // refresh every 10s\n// //   return () => clearInterval(interval);\n// // }, []);\n\n// //   // ✅ Add / Update Question\n// //   const handleAddOrUpdate = async (e) => {\n// //     e.preventDefault();\n\n// //     if (!form.questionText.trim()) {\n// //       return alert(\"Please enter question text.\");\n// //     }\n\n// //     setLoading(true);\n// //     try {\n// //       const payload = {\n// //         questionType: \"Theory\",\n// //         questionText: form.questionText,\n// //         correctAnswer: form.answerText,\n// //       };\n\n// //       if (editingId) {\n// //         await API.questions.update(editingId, payload);\n// //         alert(\"✅ Question updated successfully!\");\n// //       } else {\n// //         await API.questions.create(payload);\n// //         alert(\"✅ Question added successfully!\");\n// //       }\n\n// //       setForm({ questionText: \"\", answerText: \"\" });\n// //       setEditingId(null);\n// //       await fetchQuestions();\n// //     } catch (err) {\n// //       console.error(err);\n// //       alert(err.response?.data?.error || \"❌ Operation failed.\");\n// //     } finally {\n// //       setLoading(false);\n// //     }\n// //   };\n\n// //   // ✅ Delete Question\n// //   const handleDelete = async (id) => {\n// //     if (!window.confirm(\"Are you sure you want to delete this question?\")) return;\n// //     try {\n// //       await API.questions.delete(id);\n// //       alert(\"🗑️ Question deleted successfully!\");\n// //       await fetchQuestions();\n// //     } catch (err) {\n// //       console.error(err);\n// //       alert(\"❌ Failed to delete question.\");\n// //     }\n// //   };\n\n// //   // ✅ Edit Question\n// //   const handleEdit = (q) => {\n// //     setEditingId(q._id);\n// //     setForm({\n// //       questionText: q.questionText,\n// //       answerText: q.correctAnswer || \"\",\n// //     });\n// //     window.scrollTo({ top: 0, behavior: \"smooth\" });\n// //   };\n\n// //   // ✅ Upload File\n// //   const handleUpload = async () => {\n// //     if (!file) return alert(\"Please select a file to upload.\");\n// //     const fd = new FormData();\n// //     fd.append(\"file\", file);\n\n// //     try {\n// //       const res = await API.questions.uploadDoc(fd);\n// //       alert(res.data.message || \"✅ File uploaded successfully!\");\n// //       await fetchQuestions();\n// //     } catch (err) {\n// //       console.error(err);\n// //       alert(err.response?.data?.error || \"❌ File upload failed.\");\n// //     }\n// //   };\n\n// //   const handleLogout = () => {\n// //     localStorage.removeItem(\"adminToken\");\n// //     navigate(\"/admin/login\");\n// //   };\n\n// //   const handleViewValidation = (id) => {\n// //     navigate(`/admin/result/${id}`);\n// //   };\n\n// //   return (\n// //     <div className=\"admin-dashboard\">\n// //       {/* Header */}\n// //       <div className=\"admin-header\">\n// //         <h2>Admin Dashboard</h2>\n// //         <button className=\"logout-btn\" onClick={handleLogout}>\n// //           Logout\n// //         </button>\n// //       </div>\n\n// //       {/* Tabs */}\n// //       <div className=\"tab-buttons\">\n// //         <button\n// //           className={`tab-btn ${activeTab === \"questions\" ? \"active\" : \"\"}`}\n// //           onClick={() => setActiveTab(\"questions\")}\n// //         >\n// //           🧩 Questions\n// //         </button>\n// //         <button\n// //           className={`tab-btn ${activeTab === \"results\" ? \"active\" : \"\"}`}\n// //           onClick={() => setActiveTab(\"results\")}\n// //         >\n// //           📊 Test Results\n// //         </button>\n// //       </div>\n\n// //       {activeTab === \"questions\" ? (\n// //         <div className=\"tab-content\">\n// //           {/* ✅ Test Control Panel */}\n// //           <div className=\"card form-section\">\n// //             <h5>🕹️ Test Control Panel</h5>\n\n// //             <div className=\"mb-3\">\n// //               <label>Number of Questions</label>\n// //               <input\n// //                 type=\"number\"\n// //                 className=\"form-control\"\n// //                 value={testControl.questionLimit}\n// //                 onChange={(e) =>\n// //                   setTestControl({\n// //                     ...testControl,\n// //                     questionLimit: e.target.value,\n// //                   })\n// //                 }\n// //               />\n// //             </div>\n\n// //                   <div className=\"card form-section mt-4\">\n// //         <h5>🧍‍♂️ Waiting Users</h5>\n// //         <p className=\"text-muted\">\n// //           Number of candidates waiting to start the test:\n// //         </p>\n// //         <h3 className=\"fw-bold text-primary\">{waitingCount}</h3>\n// //       </div>\n\n// //             <div className=\"mb-3\">\n// //               <label>Time Limit (minutes)</label>\n// //               <input\n// //                 type=\"number\"\n// //                 className=\"form-control\"\n// //                 value={testControl.timeLimit}\n// //                 onChange={(e) =>\n// //                   setTestControl({\n// //                     ...testControl,\n// //                     timeLimit: e.target.value,\n// //                   })\n// //                 }\n// //               />\n// //             </div>\n\n// //             <div className=\"mb-3\">\n// //               <label>Status: </label>\n// //               <span\n// //                 className={`ms-2 fw-bold ${\n// //                   testControl.isActive ? \"text-success\" : \"text-danger\"\n// //                 }`}\n// //               >\n// //                 {testControl.isActive ? \"Active\" : \"Inactive\"}\n// //               </span>\n// //             </div>\n\n// //             <div className=\"d-flex gap-2\">\n// //               <button\n// //                 className=\"btn btn-success\"\n// //                 onClick={() =>\n// //                   updateTestControl({\n// //                     isActive: true,\n// //                     questionLimit: testControl.questionLimit,\n// //                     timeLimit: testControl.timeLimit,\n// //                   })\n// //                 }\n// //               >\n// //                 ▶️ Start Test\n// //               </button>\n// //               <button\n// //                 className=\"btn btn-danger\"\n// //                 onClick={() =>\n// //                   updateTestControl({\n// //                     isActive: false,\n// //                   })\n// //                 }\n// //               >\n// //                 ⏹️ Stop Test\n// //               </button>\n// //             </div>\n// //           </div>\n\n// //           {/* ✅ Question Form */}\n// //           <div className=\"card form-section mt-4\">\n// //             <h5>\n// //               {editingId ? \"✏️ Edit Theory Question\" : \"➕ Add / Upload Questions\"}\n// //             </h5>\n\n// //             <form onSubmit={handleAddOrUpdate}>\n// //               <div className=\"mb-3\">\n// //                 <label className=\"form-label\">Question Text</label>\n// //                 <textarea\n// //                   className=\"form-control\"\n// //                   rows={3}\n// //                   value={form.questionText}\n// //                   onChange={(e) =>\n// //                     setForm({ ...form, questionText: e.target.value })\n// //                   }\n// //                   placeholder=\"Enter your theory question here...\"\n// //                 />\n// //               </div>\n\n// //               <div className=\"mb-3\">\n// //                 <label className=\"form-label\">Model Answer</label>\n// //                 <textarea\n// //                   className=\"form-control\"\n// //                   rows={4}\n// //                   value={form.answerText}\n// //                   onChange={(e) =>\n// //                     setForm({ ...form, answerText: e.target.value })\n// //                   }\n// //                   placeholder=\"Enter model answer for theory question\"\n// //                 />\n// //               </div>\n\n// //               <div className=\"d-flex gap-2\">\n// //                 <button\n// //                   className=\"btn btn-success\"\n// //                   type=\"submit\"\n// //                   disabled={loading}\n// //                 >\n// //                   {loading\n// //                     ? \"Saving...\"\n// //                     : editingId\n// //                     ? \"Update Question\"\n// //                     : \"Add Question\"}\n// //                 </button>\n// //                 <button\n// //                   type=\"button\"\n// //                   className=\"btn btn-secondary\"\n// //                   onClick={() => {\n// //                     setForm({ questionText: \"\", answerText: \"\" });\n// //                     setEditingId(null);\n// //                   }}\n// //                 >\n// //                   Clear\n// //                 </button>\n// //               </div>\n// //             </form>\n\n// //             <hr className=\"my-4\" />\n\n// //             {/* ✅ Upload Section */}\n// //             <div className=\"upload-section\">\n// //               <label className=\"form-label\">Upload File (.txt / .docx)</label>\n// //               <input\n// //                 type=\"file\"\n// //                 className=\"form-control\"\n// //                 accept=\".txt,.docx\"\n// //                 onChange={(e) => setFile(e.target.files[0])}\n// //               />\n// //               <div className=\"mt-2\">\n// //                 <button className=\"btn btn-primary\" onClick={handleUpload}>\n// //                   Upload\n// //                 </button>\n// //               </div>\n// //             </div>\n// //           </div>\n\n// //           {/* ✅ Available Questions */}\n// //           <div className=\"card available-questions mt-4\">\n// //             <h5>Available Theory Questions</h5>\n\n// //             {Array.isArray(questions) &&\n// //               questions.length === 0 && (\n// //                 <div className=\"text-muted\">No theory questions yet</div>\n// //               )}\n\n// //             {Array.isArray(questions) &&\n// //               questions.map((q, idx) => (\n// //                 <div key={q._id} className=\"question-item\">\n// //                   <strong>Q{idx + 1}:</strong> {q.questionText}\n// //                   {q.correctAnswer && (\n// //                     <div className=\"small text-success\">\n// //                       <b>Model Answer:</b> {q.correctAnswer}\n// //                     </div>\n// //                   )}\n// //                   <div className=\"action-buttons\">\n// //                     <button\n// //                       className=\"btn btn-sm btn-warning\"\n// //                       onClick={() => handleEdit(q)}\n// //                     >\n// //                       Edit\n// //                     </button>\n// //                     <button\n// //                       className=\"btn btn-sm btn-danger\"\n// //                       onClick={() => handleDelete(q._id)}\n// //                     >\n// //                       Delete\n// //                     </button>\n// //                   </div>\n// //                 </div>\n// //               ))}\n// //           </div>\n// //         </div>\n// //       ) : (\n// //         // ✅ Test Results Tab\n// //         <div className=\"tab-content\">\n// //           <div className=\"card results-section\">\n// //             <h5>Candidate Test Results</h5>\n// //             {loadingResults ? (\n// //               <div>Loading test results...</div>\n// //             ) : results.length === 0 ? (\n// //               <div className=\"text-muted\">No test results yet</div>\n// //             ) : (\n// //               <table className=\"results-table\">\n// //                 <thead>\n// //                   <tr>\n// //                     <th>Name</th>\n// //                     <th>Email</th>\n// //                     <th>Total</th>\n// //                     <th>Correct</th>\n// //                     <th>Score %</th>\n// //                     <th>Status</th>\n// //                     <th>Submitted At</th>\n// //                     <th>Action</th>\n// //                   </tr>\n// //                 </thead>\n// //                 <tbody>\n// //                   {results.map((res, idx) => (\n// //                     <tr key={idx}>\n// //                       <td>{res.name}</td>\n// //                       <td>{res.email}</td>\n// //                       <td>{res.totalQuestions}</td>\n// //                       <td>{res.correctAnswers}</td>\n// //                       <td>{res.scorePercent}%</td>\n// //                       <td>\n// //                         <span\n// //                           style={{\n// //                             color:\n// //                               res.status === \"Validated\" ? \"green\" : \"orange\",\n// //                             fontWeight: 600,\n// //                           }}\n// //                         >\n// //                           {res.status || \"Validation Pending\"}\n// //                         </span>\n// //                       </td>\n// //                       <td>{new Date(res.submittedAt).toLocaleString()}</td>\n// //                       <td>\n// //                         <button\n// //                           className=\"btn btn-sm btn-primary\"\n// //                           onClick={() => handleViewValidation(res._id)}\n// //                         >\n// //                           View / Validate\n// //                         </button>\n// //                       </td>\n// //                     </tr>\n// //                   ))}\n// //                 </tbody>\n// //               </table>\n// //             )}\n// //           </div>\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // }\n\n// // // import React, { useEffect, useState } from \"react\";\n// // // import API from \"../services/api\";\n// // // import { useNavigate } from \"react-router-dom\";\n// // // import \"../styles/AdminDashboard.css\";\n\n// // // export default function AdminDashboard() {\n// // //   const navigate = useNavigate();\n// // //   const [questions, setQuestions] = useState([]);\n// // //   const [results, setResults] = useState([]);\n// // //   const [activeTab, setActiveTab] = useState(\"questions\");\n// // //   const [form, setForm] = useState({\n// // //     questionText: \"\",\n// // //     answerText: \"\",\n// // //   });\n// // //   const [file, setFile] = useState(null);\n// // //   const [loading, setLoading] = useState(false);\n// // //   const [loadingResults, setLoadingResults] = useState(false);\n// // //   const [editingId, setEditingId] = useState(null);\n\n// // //   // 🧠 Test Control\n// // //   const [control, setControl] = useState({\n// // //     isActive: false,\n// // //     questionLimit: 10,\n// // //     timeLimit: 10,\n// // //   });\n\n// // //   // 🟢 Check admin login\n// // //   useEffect(() => {\n// // //     const token = localStorage.getItem(\"adminToken\");\n// // //     if (!token) navigate(\"/admin/login\");\n// // //   }, [navigate]);\n\n// // //   // 🟢 Initial fetch\n// // //   useEffect(() => {\n// // //     fetchControl();\n// // //     fetchQuestions();\n// // //     fetchResults();\n// // //   }, []);\n\n// // //   const fetchControl = async () => {\n// // //     try {\n// // //       const res = await API.get(\"/testcontrol\");\n// // //       if (res.data) setControl(res.data);\n// // //     } catch (err) {\n// // //       console.error(err);\n// // //     }\n// // //   };\n\n// // //   const updateControl = async () => {\n// // //     try {\n// // //       await API.post(\"/testcontrol/update\", control, {\n// // //         headers: { Authorization: localStorage.getItem(\"adminToken\") },\n// // //       });\n// // //       alert(\"✅ Test control updated successfully!\");\n// // //       await fetchControl();\n// // //     } catch (err) {\n// // //       console.error(err);\n// // //       alert(\"❌ Failed to update test control.\");\n// // //     }\n// // //   };\n\n// // //  const fetchQuestions = async () => {\n// // //   try {\n// // //     const res = await API.questions.getAll();\n// // //     // Handle both array or object response\n// // //     const data = Array.isArray(res.data)\n// // //       ? res.data\n// // //       : res.data.questions || [];\n// // //     setQuestions(data);\n// // //   } catch (err) {\n// // //     console.error(err);\n// // //     alert(\"❌ Failed to load questions.\");\n// // //   }\n// // // };\n\n// // //   const fetchResults = async () => {\n// // //     setLoadingResults(true);\n// // //     try {\n// // //       const res = await API.tests.getAll();\n// // //       setResults(res.data || []);\n// // //     } catch (err) {\n// // //       console.error(err);\n// // //       alert(\"❌ Failed to load test results.\");\n// // //     } finally {\n// // //       setLoadingResults(false);\n// // //     }\n// // //   };\n\n// // //   // 🟢 Add or Update Question (Theory only)\n// // //   const handleAddOrUpdate = async (e) => {\n// // //     e.preventDefault();\n// // //     if (!form.questionText.trim()) {\n// // //       return alert(\"Please enter question text.\");\n// // //     }\n\n// // //     setLoading(true);\n// // //     try {\n// // //       const payload = {\n// // //         questionType: \"Theory\",\n// // //         questionText: form.questionText,\n// // //         correctAnswer: form.answerText,\n// // //       };\n\n// // //       if (editingId) {\n// // //         await API.questions.update(editingId, payload);\n// // //         alert(\"✅ Question updated successfully!\");\n// // //       } else {\n// // //         await API.questions.create(payload);\n// // //         alert(\"✅ Question added successfully!\");\n// // //       }\n\n// // //       setForm({ questionText: \"\", answerText: \"\" });\n// // //       setEditingId(null);\n// // //       await fetchQuestions();\n// // //     } catch (err) {\n// // //       console.error(err);\n// // //       alert(err.response?.data?.error || \"❌ Operation failed.\");\n// // //     } finally {\n// // //       setLoading(false);\n// // //     }\n// // //   };\n\n// // //   // 🟢 Delete Question\n// // //   const handleDelete = async (id) => {\n// // //     if (!window.confirm(\"Are you sure you want to delete this question?\")) return;\n// // //     try {\n// // //       await API.questions.delete(id);\n// // //       alert(\"🗑️ Question deleted successfully!\");\n// // //       await fetchQuestions();\n// // //     } catch (err) {\n// // //       console.error(err);\n// // //       alert(\"❌ Failed to delete question.\");\n// // //     }\n// // //   };\n\n// // //   // 🟢 Edit Question\n// // //   const handleEdit = (q) => {\n// // //     setEditingId(q._id);\n// // //     setForm({\n// // //       questionText: q.questionText,\n// // //       answerText: q.correctAnswer || \"\",\n// // //     });\n// // //     window.scrollTo({ top: 0, behavior: \"smooth\" });\n// // //   };\n\n// // //   // 🟢 Upload File (TXT or DOCX)\n// // //   const handleUpload = async () => {\n// // //     if (!file) return alert(\"Please select a file to upload.\");\n// // //     const fd = new FormData();\n// // //     fd.append(\"file\", file);\n\n// // //     try {\n// // //       const res = await API.questions.uploadDoc(fd);\n// // //       alert(res.data.message || \"✅ File uploaded successfully!\");\n// // //       await fetchQuestions();\n// // //     } catch (err) {\n// // //       console.error(err);\n// // //       alert(err.response?.data?.error || \"❌ File upload failed.\");\n// // //     }\n// // //   };\n\n// // //   const handleLogout = () => {\n// // //     localStorage.removeItem(\"adminToken\");\n// // //     navigate(\"/admin/login\");\n// // //   };\n\n// // //   const handleViewValidation = (id) => {\n// // //     navigate(`/admin/result/${id}`);\n// // //   };\n\n// // //   return (\n// // //     <div className=\"admin-dashboard\">\n// // //       {/* 🔧 Test Control Panel */}\n// // //       <div className=\"card control-panel\">\n// // //         <h4>🕹️ Test Control Panel</h4>\n// // //         <div className=\"row\">\n// // //           <div className=\"col\">\n// // //             <label>Number of Questions</label>\n// // //             <input\n// // //               type=\"number\"\n// // //               className=\"form-control\"\n// // //               value={control.questionLimit}\n// // //               onChange={(e) =>\n// // //                 setControl({ ...control, questionLimit: e.target.value })\n// // //               }\n// // //             />\n// // //           </div>\n// // //           <div className=\"col\">\n// // //             <label>Time Limit (minutes)</label>\n// // //             <input\n// // //               type=\"number\"\n// // //               className=\"form-control\"\n// // //               value={control.timeLimit}\n// // //               onChange={(e) =>\n// // //                 setControl({ ...control, timeLimit: e.target.value })\n// // //               }\n// // //             />\n// // //           </div>\n// // //           <div className=\"col\">\n// // //             <label>Status</label>\n// // //             <select\n// // //               className=\"form-select\"\n// // //               value={control.isActive ? \"true\" : \"false\"}\n// // //               onChange={(e) =>\n// // //                 setControl({ ...control, isActive: e.target.value === \"true\" })\n// // //               }\n// // //             >\n// // //               <option value=\"false\">Inactive</option>\n// // //               <option value=\"true\">Active</option>\n// // //             </select>\n// // //           </div>\n// // //         </div>\n// // //         <button onClick={updateControl} className=\"btn btn-primary mt-3\">\n// // //           Update Test Control\n// // //         </button>\n// // //       </div>\n\n// // //       {/* Tabs */}\n// // //       <div className=\"tab-buttons mt-4\">\n// // //         <button\n// // //           className={`tab-btn ${activeTab === \"questions\" ? \"active\" : \"\"}`}\n// // //           onClick={() => setActiveTab(\"questions\")}\n// // //         >\n// // //           🧩 Questions\n// // //         </button>\n// // //         <button\n// // //           className={`tab-btn ${activeTab === \"results\" ? \"active\" : \"\"}`}\n// // //           onClick={() => setActiveTab(\"results\")}\n// // //         >\n// // //           📊 Test Results\n// // //         </button>\n// // //       </div>\n\n// // //       {/* 🧩 THEORY QUESTIONS TAB */}\n// // //       {activeTab === \"questions\" ? (\n// // //         <div className=\"tab-content\">\n// // //           <div className=\"card form-section\">\n// // //             <h5>{editingId ? \"✏️ Edit Theory Question\" : \"➕ Add or Upload Theory Questions\"}</h5>\n\n// // //             <form onSubmit={handleAddOrUpdate}>\n// // //               <div className=\"mb-3\">\n// // //                 <label className=\"form-label\">Question Text</label>\n// // //                 <textarea\n// // //                   className=\"form-control\"\n// // //                   rows={3}\n// // //                   value={form.questionText}\n// // //                   onChange={(e) => setForm({ ...form, questionText: e.target.value })}\n// // //                   placeholder=\"Enter your theory question here...\"\n// // //                 />\n// // //               </div>\n\n// // //               <div className=\"mb-3\">\n// // //                 <label className=\"form-label\">Model Answer</label>\n// // //                 <textarea\n// // //                   className=\"form-control\"\n// // //                   rows={4}\n// // //                   value={form.answerText}\n// // //                   onChange={(e) => setForm({ ...form, answerText: e.target.value })}\n// // //                   placeholder=\"Enter model answer for theory question\"\n// // //                 />\n// // //               </div>\n\n// // //               <div className=\"d-flex gap-2\">\n// // //                 <button className=\"btn btn-success\" type=\"submit\" disabled={loading}>\n// // //                   {loading ? \"Saving...\" : editingId ? \"Update Question\" : \"Add Question\"}\n// // //                 </button>\n// // //                 <button\n// // //                   type=\"button\"\n// // //                   className=\"btn btn-secondary\"\n// // //                   onClick={() => {\n// // //                     setForm({ questionText: \"\", answerText: \"\" });\n// // //                     setEditingId(null);\n// // //                   }}\n// // //                 >\n// // //                   Clear\n// // //                 </button>\n// // //               </div>\n// // //             </form>\n\n// // //             <hr className=\"my-4\" />\n\n// // //             <div className=\"upload-section\">\n// // //               <label className=\"form-label\">Upload File (.txt or .docx)</label>\n// // //               <input\n// // //                 type=\"file\"\n// // //                 className=\"form-control\"\n// // //                 accept=\".txt,.docx\"\n// // //                 onChange={(e) => setFile(e.target.files[0])}\n// // //               />\n// // //               <div className=\"mt-2\">\n// // //                 <button className=\"btn btn-primary\" onClick={handleUpload}>\n// // //                   Upload\n// // //                 </button>\n// // //               </div>\n// // //             </div>\n// // //           </div>\n\n// // //           <div className=\"card available-questions\">\n// // //             <h5>Available Theory Questions</h5>\n\n// // //             {questions.filter((q) => q.questionType === \"Theory\").length === 0 && (\n// // //               <div className=\"text-muted\">No theory questions yet</div>\n// // //             )}\n\n// // //             {questions\n// // //               .filter((q) => q.questionType === \"Theory\")\n// // //               .map((q, idx) => (\n// // //                 <div key={q._id} className=\"question-item\">\n// // //                   <strong>Q{idx + 1}:</strong> {q.questionText}\n// // //                   {q.correctAnswer && (\n// // //                     <div className=\"small text-success\">\n// // //                       <b>Model Answer:</b> {q.correctAnswer}\n// // //                     </div>\n// // //                   )}\n// // //                   <div className=\"action-buttons\">\n// // //                     <button\n// // //                       className=\"btn btn-sm btn-warning\"\n// // //                       onClick={() => handleEdit(q)}\n// // //                     >\n// // //                       Edit\n// // //                     </button>\n// // //                     <button\n// // //                       className=\"btn btn-sm btn-danger\"\n// // //                       onClick={() => handleDelete(q._id)}\n// // //                     >\n// // //                       Delete\n// // //                     </button>\n// // //                   </div>\n// // //                 </div>\n// // //               ))}\n// // //           </div>\n// // //         </div>\n// // //       ) : (\n// // //         // 📊 TEST RESULTS TAB\n// // //         <div className=\"tab-content\">\n// // //           <div className=\"card results-section\">\n// // //             <h5>Candidate Test Results</h5>\n// // //             {loadingResults ? (\n// // //               <div>Loading test results...</div>\n// // //             ) : results.length === 0 ? (\n// // //               <div className=\"text-muted\">No test results yet</div>\n// // //             ) : (\n// // //               <table className=\"results-table\">\n// // //                 <thead>\n// // //                   <tr>\n// // //                     <th>Name</th>\n// // //                     <th>Email</th>\n// // //                     <th>Total</th>\n// // //                     <th>Correct</th>\n// // //                     <th>Score %</th>\n// // //                     <th>Status</th>\n// // //                     <th>Submitted At</th>\n// // //                     <th>Action</th>\n// // //                   </tr>\n// // //                 </thead>\n// // //                 <tbody>\n// // //                   {results.map((res, idx) => (\n// // //                     <tr key={idx}>\n// // //                       <td>{res.name}</td>\n// // //                       <td>{res.email}</td>\n// // //                       <td>{res.totalQuestions}</td>\n// // //                       <td>{res.correctAnswers}</td>\n// // //                       <td>{res.scorePercent}%</td>\n// // //                       <td>\n// // //                         <span\n// // //                           style={{\n// // //                             color: res.status === \"Validated\" ? \"green\" : \"orange\",\n// // //                             fontWeight: 600,\n// // //                           }}\n// // //                         >\n// // //                           {res.status || \"Validation Pending\"}\n// // //                         </span>\n// // //                       </td>\n// // //                       <td>{new Date(res.submittedAt).toLocaleString()}</td>\n// // //                       <td>\n// // //                         <button\n// // //                           className=\"btn btn-sm btn-primary\"\n// // //                           onClick={() => handleViewValidation(res._id)}\n// // //                         >\n// // //                           View / Validate\n// // //                         </button>\n// // //                       </td>\n// // //                     </tr>\n// // //                   ))}\n// // //                 </tbody>\n// // //               </table>\n// // //             )}\n// // //           </div>\n// // //         </div>\n// // //       )}\n// // //     </div>\n// // //   );\n// // // }\n\n// // // // import React, { useEffect, useState } from \"react\";\n// // // // import API from \"../services/api\";\n// // // // import { useNavigate } from \"react-router-dom\";\n// // // // import \"../styles/AdminDashboard.css\";\n\n// // // // export default function AdminDashboard() {\n// // // //   const navigate = useNavigate();\n// // // //   const [questions, setQuestions] = useState([]);\n// // // //   const [results, setResults] = useState([]);\n// // // //   const [activeTab, setActiveTab] = useState(\"questions\");\n// // // //   const [form, setForm] = useState({\n// // // //     questionText: \"\",\n// // // //     answerText: \"\", // admin-entered model answer for theory\n// // // //   });\n// // // //   const [file, setFile] = useState(null);\n// // // //   const [loading, setLoading] = useState(false);\n// // // //   const [loadingResults, setLoadingResults] = useState(false);\n// // // //   const [editingId, setEditingId] = useState(null);\n\n// // // //   // 🟢 Check admin login\n// // // //   useEffect(() => {\n// // // //     const token = localStorage.getItem(\"adminToken\");\n// // // //     if (!token) navigate(\"/admin/login\");\n// // // //   }, [navigate]);\n\n// // // //   // 🟢 Initial fetch\n// // // //   useEffect(() => {\n// // // //     fetchQuestions();\n// // // //     fetchResults();\n// // // //   }, []);\n\n// // // //   const fetchQuestions = async () => {\n// // // //     try {\n// // // //       const res = await API.questions.getAll();\n// // // //       setQuestions(res.data || []);\n// // // //     } catch (err) {\n// // // //       console.error(err);\n// // // //       alert(\"❌ Failed to load questions.\");\n// // // //     }\n// // // //   };\n\n// // // //   const fetchResults = async () => {\n// // // //     setLoadingResults(true);\n// // // //     try {\n// // // //       const res = await API.tests.getAll();\n// // // //       setResults(res.data || []);\n// // // //     } catch (err) {\n// // // //       console.error(err);\n// // // //       alert(\"❌ Failed to load test results.\");\n// // // //     } finally {\n// // // //       setLoadingResults(false);\n// // // //     }\n// // // //   };\n\n// // // //   // 🟢 Add or Update Question (Theory only)\n// // // //   const handleAddOrUpdate = async (e) => {\n// // // //     e.preventDefault();\n\n// // // //     if (!form.questionText.trim()) {\n// // // //       return alert(\"Please enter question text.\");\n// // // //     }\n\n// // // //     setLoading(true);\n// // // //     try {\n// // // //       const payload = {\n// // // //         questionType: \"Theory\",\n// // // //         questionText: form.questionText,\n// // // //         correctAnswer: form.answerText,\n// // // //       };\n// // // //       console.log(\"Submitting payload ->\", payload);\n\n// // // //       if (editingId) {\n// // // //         await API.questions.update(editingId, payload);\n// // // //         alert(\"✅ Question updated successfully!\");\n// // // //       } else {\n// // // //         await API.questions.create(payload);\n// // // //         alert(\"✅ Question added successfully!\");\n// // // //       }\n\n// // // //       setForm({ questionText: \"\", answerText: \"\" });\n// // // //       setEditingId(null);\n// // // //       await fetchQuestions();\n// // // //     } catch (err) {\n// // // //       console.error(err);\n// // // //       alert(err.response?.data?.error || \"❌ Operation failed.\");\n// // // //     } finally {\n// // // //       setLoading(false);\n// // // //     }\n// // // //   };\n\n// // // //   // 🟢 Delete Question\n// // // //   const handleDelete = async (id) => {\n// // // //     if (!window.confirm(\"Are you sure you want to delete this question?\")) return;\n// // // //     try {\n// // // //       await API.questions.delete(id);\n// // // //       alert(\"🗑️ Question deleted successfully!\");\n// // // //       await fetchQuestions();\n// // // //     } catch (err) {\n// // // //       console.error(err);\n// // // //       alert(\"❌ Failed to delete question.\");\n// // // //     }\n// // // //   };\n\n// // // //   // 🟢 Edit Question\n// // // //   const handleEdit = (q) => {\n// // // //     setEditingId(q._id);\n// // // //     setForm({\n// // // //       questionText: q.questionText,\n// // // //       answerText: q.correctAnswer || \"\",\n// // // //     });\n// // // //     window.scrollTo({ top: 0, behavior: \"smooth\" });\n// // // //   };\n\n// // // //   // 🟢 Upload File (TXT or DOCX for Theory)\n// // // //   const handleUpload = async () => {\n// // // //     if (!file) return alert(\"Please select a file to upload.\");\n// // // //     const fd = new FormData();\n// // // //     fd.append(\"file\", file);\n\n// // // //     try {\n// // // //       const res = await API.questions.uploadDoc(fd);\n// // // //       alert(res.data.message || \"✅ File uploaded successfully!\");\n// // // //       await fetchQuestions();\n// // // //     } catch (err) {\n// // // //       console.error(err);\n// // // //       alert(err.response?.data?.error || \"❌ File upload failed.\");\n// // // //     }\n// // // //   };\n\n// // // //   const handleLogout = () => {\n// // // //     localStorage.removeItem(\"adminToken\");\n// // // //     navigate(\"/admin/login\");\n// // // //   };\n\n// // // //   // 🟢 Navigate to validation page\n// // // //   const handleViewValidation = (id) => {\n// // // //     navigate(`/admin/result/${id}`);\n// // // //   };\n\n// // // //   return (\n// // // //     <div className=\"admin-dashboard\">\n// // // //       {/* Tabs */}\n// // // //       <div className=\"tab-buttons\">\n// // // //         <button\n// // // //           className={`tab-btn ${activeTab === \"questions\" ? \"active\" : \"\"}`}\n// // // //           onClick={() => setActiveTab(\"questions\")}\n// // // //         >\n// // // //           🧩 Questions\n// // // //         </button>\n// // // //         <button\n// // // //           className={`tab-btn ${activeTab === \"results\" ? \"active\" : \"\"}`}\n// // // //           onClick={() => setActiveTab(\"results\")}\n// // // //         >\n// // // //           📊 Test Results\n// // // //         </button>\n// // // //       </div>\n\n// // // //       {/* 🧩 THEORY QUESTIONS TAB */}\n// // // //       {activeTab === \"questions\" ? (\n// // // //         <div className=\"tab-content\">\n// // // //           <div className=\"card form-section\">\n// // // //             <h5>{editingId ? \"✏️ Edit Theory Question\" : \"➕ Add or Upload Theory Questions\"}</h5>\n\n// // // //             <form onSubmit={handleAddOrUpdate}>\n// // // //               <div className=\"mb-3\">\n// // // //                 <label className=\"form-label\">Question Text</label>\n// // // //                 <textarea\n// // // //                   className=\"form-control\"\n// // // //                   rows={3}\n// // // //                   value={form.questionText}\n// // // //                   onChange={(e) => setForm({ ...form, questionText: e.target.value })}\n// // // //                   placeholder=\"Enter your theory question here...\"\n// // // //                 />\n// // // //               </div>\n\n// // // //               <div className=\"mb-3\">\n// // // //                 <label className=\"form-label\">Model Answer</label>\n// // // //                 <textarea\n// // // //                   className=\"form-control\"\n// // // //                   rows={4}\n// // // //                   value={form.answerText}\n// // // //                   onChange={(e) => setForm({ ...form, answerText: e.target.value })}\n// // // //                   placeholder=\"Enter model answer for theory question\"\n// // // //                 />\n// // // //               </div>\n\n// // // //               <div className=\"d-flex gap-2\">\n// // // //                 <button className=\"btn btn-success\" type=\"submit\" disabled={loading}>\n// // // //                   {loading\n// // // //                     ? \"Saving...\"\n// // // //                     : editingId\n// // // //                     ? \"Update Question\"\n// // // //                     : \"Add Question\"}\n// // // //                 </button>\n// // // //                 <button\n// // // //                   type=\"button\"\n// // // //                   className=\"btn btn-secondary\"\n// // // //                   onClick={() => {\n// // // //                     setForm({ questionText: \"\", answerText: \"\" });\n// // // //                     setEditingId(null);\n// // // //                   }}\n// // // //                 >\n// // // //                   Clear\n// // // //                 </button>\n// // // //               </div>\n// // // //             </form>\n\n// // // //             <hr className=\"my-4\" />\n\n// // // //             {/* Upload Section */}\n// // // //             <div className=\"upload-section\">\n// // // //               <label className=\"form-label\">Upload File (.txt or .docx)</label>\n// // // //               <input\n// // // //                 type=\"file\"\n// // // //                 className=\"form-control\"\n// // // //                 accept=\".txt,.docx\"\n// // // //                 onChange={(e) => setFile(e.target.files[0])}\n// // // //               />\n// // // //               <div className=\"mt-2\">\n// // // //                 <button className=\"btn btn-primary\" onClick={handleUpload}>\n// // // //                   Upload\n// // // //                 </button>\n// // // //               </div>\n// // // //             </div>\n// // // //           </div>\n\n// // // //           {/* Display Theory Questions */}\n// // // //           <div className=\"card available-questions\">\n// // // //             <h5>Available Theory Questions</h5>\n\n// // // //             {questions.filter((q) => q.questionType === \"Theory\").length === 0 && (\n// // // //               <div className=\"text-muted\">No theory questions yet</div>\n// // // //             )}\n\n// // // //             {questions\n// // // //               .filter((q) => q.questionType === \"Theory\")\n// // // //               .map((q, idx) => (\n// // // //                 <div key={q._id} className=\"question-item\">\n// // // //                   <strong>Q{idx + 1}:</strong> {q.questionText}\n// // // //                   {q.correctAnswer && (\n// // // //                     <div className=\"small text-success\">\n// // // //                       <b>Model Answer:</b> {q.correctAnswer}\n// // // //                     </div>\n// // // //                   )}\n// // // //                   <div className=\"action-buttons\">\n// // // //                     <button\n// // // //                       className=\"btn btn-sm btn-warning\"\n// // // //                       onClick={() => handleEdit(q)}\n// // // //                     >\n// // // //                       Edit\n// // // //                     </button>\n// // // //                     <button\n// // // //                       className=\"btn btn-sm btn-danger\"\n// // // //                       onClick={() => handleDelete(q._id)}\n// // // //                     >\n// // // //                       Delete\n// // // //                     </button>\n// // // //                   </div>\n// // // //                 </div>\n// // // //               ))}\n// // // //           </div>\n// // // //         </div>\n// // // //       ) : (\n// // // //         // 📊 TEST RESULTS TAB\n// // // //         <div className=\"tab-content\">\n// // // //           <div className=\"card results-section\">\n// // // //             <h5>Candidate Test Results</h5>\n// // // //             {loadingResults ? (\n// // // //               <div>Loading test results...</div>\n// // // //             ) : results.length === 0 ? (\n// // // //               <div className=\"text-muted\">No test results yet</div>\n// // // //             ) : (\n// // // //               <table className=\"results-table\">\n// // // //                 <thead>\n// // // //                   <tr>\n// // // //                     <th>Name</th>\n// // // //                     <th>Email</th>\n// // // //                     <th>Total</th>\n// // // //                     <th>Correct</th>\n// // // //                     <th>Score %</th>\n// // // //                     <th>Status</th>\n// // // //                     <th>Submitted At</th>\n// // // //                     <th>Action</th>\n// // // //                   </tr>\n// // // //                 </thead>\n// // // //                 <tbody>\n// // // //                   {results.map((res, idx) => (\n// // // //                     <tr key={idx}>\n// // // //                       <td>{res.name}</td>\n// // // //                       <td>{res.email}</td>\n// // // //                       <td>{res.totalQuestions}</td>\n// // // //                       <td>{res.correctAnswers}</td>\n// // // //                       <td>{res.scorePercent}%</td>\n// // // //                       <td>\n// // // //                         <span\n// // // //                           style={{\n// // // //                             color:\n// // // //                               res.status === \"Validated\" ? \"green\" : \"orange\",\n// // // //                             fontWeight: 600,\n// // // //                           }}\n// // // //                         >\n// // // //                           {res.status || \"Validation Pending\"}\n// // // //                         </span>\n// // // //                       </td>\n// // // //                       <td>{new Date(res.submittedAt).toLocaleString()}</td>\n// // // //                       <td>\n// // // //                         <button\n// // // //                           className=\"btn btn-sm btn-primary\"\n// // // //                           onClick={() => handleViewValidation(res._id)}\n// // // //                         >\n// // // //                           View / Validate\n// // // //                         </button>\n// // // //                       </td>\n// // // //                     </tr>\n// // // //                   ))}\n// // // //                 </tbody>\n// // // //               </table>\n// // // //             )}\n// // // //           </div>\n// // // //         </div>\n// // // //       )}\n// // // //     </div>\n// // // //   );\n// // // // }\n\n// // // // // import React, { useEffect, useState } from \"react\";\n// // // // // import API from \"../services/api\";\n// // // // // import { useNavigate } from \"react-router-dom\";\n// // // // // import \"../styles/AdminDashboard.css\";\n\n// // // // // export default function AdminDashboard() {\n// // // // //   const navigate = useNavigate();\n// // // // //   const [questions, setQuestions] = useState([]);\n// // // // //   const [results, setResults] = useState([]);\n// // // // //   const [activeTab, setActiveTab] = useState(\"questions\");\n// // // // //   const [form, setForm] = useState({\n// // // // //     questionText: \"\",\n// // // // //     optionsText: \"\",\n// // // // //     correctAnswer: \"\",\n// // // // //     answerText: \"\", // admin-entered model answer for theory\n// // // // //   });\n// // // // //   const [questionType, setQuestionType] = useState(\"MCQ\");\n// // // // //   const [file, setFile] = useState(null);\n// // // // //   const [loading, setLoading] = useState(false);\n// // // // //   const [loadingResults, setLoadingResults] = useState(false);\n// // // // //   const [editingId, setEditingId] = useState(null);\n\n// // // // //   // 🟢 Check admin login\n// // // // //   useEffect(() => {\n// // // // //     const token = localStorage.getItem(\"adminToken\");\n// // // // //     if (!token) navigate(\"/admin/login\");\n// // // // //   }, [navigate]);\n\n// // // // //   // 🟢 Initial fetch\n// // // // //   useEffect(() => {\n// // // // //     fetchQuestions();\n// // // // //     fetchResults();\n// // // // //   }, []);\n\n// // // // //   const fetchQuestions = async () => {\n// // // // //     try {\n// // // // //       const res = await API.questions.getAll();\n// // // // //       setQuestions(res.data || []);\n// // // // //     } catch (err) {\n// // // // //       console.error(err);\n// // // // //       alert(\"❌ Failed to load questions.\");\n// // // // //     }\n// // // // //   };\n\n// // // // //   const fetchResults = async () => {\n// // // // //     setLoadingResults(true);\n// // // // //     try {\n// // // // //       const res = await API.tests.getAll();\n// // // // //       setResults(res.data || []);\n// // // // //     } catch (err) {\n// // // // //       console.error(err);\n// // // // //       alert(\"❌ Failed to load test results.\");\n// // // // //     } finally {\n// // // // //       setLoadingResults(false);\n// // // // //     }\n// // // // //   };\n\n// // // // //   // 🟢 Add or Update Question\n// // // // //   const handleAddOrUpdate = async (e) => {\n// // // // //     e.preventDefault();\n// // // // //     const opts =\n// // // // //       questionType === \"MCQ\"\n// // // // //         ? form.optionsText.split(\"|\").map((s) => s.trim()).filter(Boolean)\n// // // // //         : [];\n\n// // // // //     if (!form.questionText.trim()) {\n// // // // //       return alert(\"Please enter question text.\");\n// // // // //     }\n\n// // // // //     setLoading(true);\n// // // // //     try {\n// // // // //       const payload = {\n// // // // //         questionType,\n// // // // //         questionText: form.questionText,\n// // // // //         options: opts,\n// // // // //         correctAnswer: questionType === \"MCQ\" ? form.correctAnswer : form.answerText,\n// // // // //       };\n// // // // //       console.log(\"Submitting payload ->\", payload);\n\n// // // // //       if (editingId) {\n// // // // //         await API.questions.update(editingId, payload);\n// // // // //         alert(\"✅ Question updated successfully!\");\n// // // // //       } else {\n// // // // //         await API.questions.create(payload);\n// // // // //         alert(\"✅ Question added successfully!\");\n// // // // //       }\n\n// // // // //       setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\", answerText: \"\" });\n// // // // //       setEditingId(null);\n// // // // //       await fetchQuestions();\n// // // // //     } catch (err) {\n// // // // //       console.error(err);\n// // // // //       alert(err.response?.data?.error || \"❌ Operation failed.\");\n// // // // //     } finally {\n// // // // //       setLoading(false);\n// // // // //     }\n// // // // //   };\n\n// // // // //   // 🟢 Delete Question\n// // // // //   const handleDelete = async (id) => {\n// // // // //     if (!window.confirm(\"Are you sure you want to delete this question?\")) return;\n// // // // //     try {\n// // // // //       await API.questions.delete(id);\n// // // // //       alert(\"🗑️ Question deleted successfully!\");\n// // // // //       await fetchQuestions();\n// // // // //     } catch (err) {\n// // // // //       console.error(err);\n// // // // //       alert(\"❌ Failed to delete question.\");\n// // // // //     }\n// // // // //   };\n\n// // // // //   // 🟢 Edit Question\n// // // // //   const handleEdit = (q) => {\n// // // // //     setEditingId(q._id);\n// // // // //     setQuestionType(q.questionType);\n// // // // //     setForm({\n// // // // //       questionText: q.questionText,\n// // // // //       optionsText: q.options ? q.options.join(\" | \") : \"\",\n// // // // //       correctAnswer: q.correctAnswer || \"\",\n// // // // //       answerText: q.questionType === \"Theory\" ? q.correctAnswer || \"\" : \"\",\n// // // // //     });\n// // // // //     window.scrollTo({ top: 0, behavior: \"smooth\" });\n// // // // //   };\n\n// // // // //   // 🟢 Upload File\n// // // // //   const handleUpload = async () => {\n// // // // //     if (!file) return alert(\"Please select a file to upload.\");\n// // // // //     const fd = new FormData();\n// // // // //     fd.append(\"file\", file);\n\n// // // // //     try {\n// // // // //       const res = await API.questions.uploadDoc(fd);\n// // // // //       alert(res.data.message || \"✅ File uploaded successfully!\");\n// // // // //       await fetchQuestions();\n// // // // //     } catch (err) {\n// // // // //       console.error(err);\n// // // // //       alert(err.response?.data?.error || \"❌ File upload failed.\");\n// // // // //     }\n// // // // //   };\n\n// // // // //   const handleLogout = () => {\n// // // // //     localStorage.removeItem(\"adminToken\");\n// // // // //     navigate(\"/admin/login\");\n// // // // //   };\n\n// // // // //   // 🟢 Navigate to validation page\n// // // // //   const handleViewValidation = (id) => {\n// // // // //     navigate(`/admin/result/${id}`);\n// // // // //   };\n\n// // // // //   return (\n// // // // //     <div className=\"admin-dashboard\">\n// // // // //       {/* Header */}\n// // // // //       {/* <div className=\"admin-header\">\n// // // // //         <h2>Admin Dashboard</h2>\n// // // // //         <button className=\"logout-btn\" onClick={handleLogout}>\n// // // // //           Logout\n// // // // //         </button>\n// // // // //       </div> */}\n\n// // // // //       {/* Tabs */}\n// // // // //       <div className=\"tab-buttons\">\n// // // // //         <button\n// // // // //           className={`tab-btn ${activeTab === \"questions\" ? \"active\" : \"\"}`}\n// // // // //           onClick={() => setActiveTab(\"questions\")}\n// // // // //         >\n// // // // //           🧩 Questions\n// // // // //         </button>\n// // // // //         <button\n// // // // //           className={`tab-btn ${activeTab === \"results\" ? \"active\" : \"\"}`}\n// // // // //           onClick={() => setActiveTab(\"results\")}\n// // // // //         >\n// // // // //           📊 Test Results\n// // // // //         </button>\n// // // // //       </div>\n\n// // // // //       {/* 🧩 QUESTIONS TAB */}\n// // // // //       {activeTab === \"questions\" ? (\n// // // // //         <div className=\"tab-content\">\n// // // // //           <div className=\"card form-section\">\n// // // // //             <h5>{editingId ? \"✏️ Edit Question\" : \"➕ Add or Upload Questions\"}</h5>\n\n// // // // //             <form onSubmit={handleAddOrUpdate}>\n// // // // //               <div className=\"mb-3\">\n// // // // //                 <label className=\"form-label\">Question Type</label>\n// // // // //                 <select\n// // // // //                   className=\"form-select\"\n// // // // //                   value={questionType}\n// // // // //                   onChange={(e) => setQuestionType(e.target.value)}\n// // // // //                 >\n// // // // //                   <option value=\"MCQ\">MCQ</option>\n// // // // //                   <option value=\"Theory\">Theory</option>\n// // // // //                 </select>\n// // // // //               </div>\n\n// // // // //               <div className=\"mb-3\">\n// // // // //                 <label className=\"form-label\">Question Text</label>\n// // // // //                 <textarea\n// // // // //                   className=\"form-control\"\n// // // // //                   rows={questionType === \"Theory\" ? 3 : 2}\n// // // // //                   value={form.questionText}\n// // // // //                   onChange={(e) =>\n// // // // //                     setForm({ ...form, questionText: e.target.value })\n// // // // //                   }\n// // // // //                   placeholder=\"Enter your question here...\"\n// // // // //                 />\n// // // // //               </div>\n\n// // // // //               {questionType === \"Theory\" && (\n// // // // //                 <div className=\"mb-3\">\n// // // // //                   <label className=\"form-label\">Answer / Model Answer</label>\n// // // // //                   <textarea\n// // // // //                     className=\"form-control\"\n// // // // //                     rows={4}\n// // // // //                     value={form.answerText}\n// // // // //                     onChange={(e) =>\n// // // // //                       setForm({ ...form, answerText: e.target.value })\n// // // // //                     }\n// // // // //                     placeholder=\"Enter the model answer for theory questions (this will be stored as the correct answer)\"\n// // // // //                   />\n// // // // //                 </div>\n// // // // //               )}\n\n// // // // //               {questionType === \"MCQ\" && (\n// // // // //                 <>\n// // // // //                   <div className=\"mb-3\">\n// // // // //                     <label className=\"form-label\">Options (separate by |)</label>\n// // // // //                     <input\n// // // // //                       className=\"form-control\"\n// // // // //                       value={form.optionsText}\n// // // // //                       onChange={(e) =>\n// // // // //                         setForm({ ...form, optionsText: e.target.value })\n// // // // //                       }\n// // // // //                       placeholder=\"Option A | Option B | Option C | Option D\"\n// // // // //                     />\n// // // // //                   </div>\n\n// // // // //                   <div className=\"mb-3\">\n// // // // //                     <label className=\"form-label\">Correct Answer</label>\n// // // // //                     <input\n// // // // //                       className=\"form-control\"\n// // // // //                       value={form.correctAnswer}\n// // // // //                       onChange={(e) =>\n// // // // //                         setForm({ ...form, correctAnswer: e.target.value })\n// // // // //                       }\n// // // // //                       placeholder=\"Enter correct answer text\"\n// // // // //                     />\n// // // // //                   </div>\n// // // // //                 </>\n// // // // //               )}\n\n// // // // //               <div className=\"d-flex gap-2\">\n// // // // //                 <button className=\"btn btn-success\" type=\"submit\" disabled={loading}>\n// // // // //                   {loading\n// // // // //                     ? \"Saving...\"\n// // // // //                     : editingId\n// // // // //                     ? \"Update Question\"\n// // // // //                     : \"Add Question\"}\n// // // // //                 </button>\n// // // // //                 <button\n// // // // //                   type=\"button\"\n// // // // //                   className=\"btn btn-secondary\"\n// // // // //                   onClick={() => {\n// // // // //                     setForm({\n// // // // //                       questionText: \"\",\n// // // // //                       optionsText: \"\",\n// // // // //                       correctAnswer: \"\",\n// // // // //                       answerText: \"\",\n// // // // //                     });\n// // // // //                     setEditingId(null);\n// // // // //                   }}\n// // // // //                 >\n// // // // //                   Clear\n// // // // //                 </button>\n// // // // //               </div>\n// // // // //             </form>\n\n// // // // //             <hr className=\"my-4\" />\n\n// // // // //             {/* Upload Section */}\n// // // // //             <div className=\"upload-section\">\n// // // // //               <label className=\"form-label\">Upload Document (.docx)</label>\n// // // // //               <input\n// // // // //                 type=\"file\"\n// // // // //                 className=\"form-control\"\n// // // // //                 accept=\".docx\"\n// // // // //                 onChange={(e) => setFile(e.target.files[0])}\n// // // // //               />\n// // // // //               <div className=\"mt-2\">\n// // // // //                 <button className=\"btn btn-primary\" onClick={handleUpload}>\n// // // // //                   Upload\n// // // // //                 </button>\n// // // // //               </div>\n// // // // //             </div>\n// // // // //           </div>\n\n// // // // //           {/* Display Questions */}\n// // // // //           <div className=\"card available-questions\">\n// // // // //             <h5>Available Questions</h5>\n\n// // // // //             <h6 className=\"mt-3 text-primary\">MCQ Questions</h6>\n// // // // //             {questions.filter((q) => q.questionType === \"MCQ\").length === 0 && (\n// // // // //               <div className=\"text-muted\">No MCQs yet</div>\n// // // // //             )}\n// // // // //             {questions\n// // // // //               .filter((q) => q.questionType === \"MCQ\")\n// // // // //               .map((q, idx) => (\n// // // // //                 <div key={q._id} className=\"question-item\">\n// // // // //                   <strong>Q{idx + 1}:</strong> {q.questionText}\n// // // // //                   <div className=\"small text-muted\">\n// // // // //                     Options: {q.options.join(\" | \")}\n// // // // //                   </div>\n// // // // //                   <div className=\"small text-success\">\n// // // // //                     Correct: {q.correctAnswer}\n// // // // //                   </div>\n// // // // //                   <div className=\"action-buttons\">\n// // // // //                     <button\n// // // // //                       className=\"btn btn-sm btn-warning\"\n// // // // //                       onClick={() => handleEdit(q)}\n// // // // //                     >\n// // // // //                       Edit\n// // // // //                     </button>\n// // // // //                     <button\n// // // // //                       className=\"btn btn-sm btn-danger\"\n// // // // //                       onClick={() => handleDelete(q._id)}\n// // // // //                     >\n// // // // //                       Delete\n// // // // //                     </button>\n// // // // //                   </div>\n// // // // //                 </div>\n// // // // //               ))}\n\n// // // // //             <h6 className=\"mt-4 text-primary\">Theory Questions</h6>\n// // // // //             {questions.filter((q) => q.questionType === \"Theory\").length === 0 && (\n// // // // //               <div className=\"text-muted\">No theory questions yet</div>\n// // // // //             )}\n// // // // //             {questions\n// // // // //               .filter((q) => q.questionType === \"Theory\")\n// // // // //               .map((q, idx) => (\n// // // // //                 <div key={q._id} className=\"question-item\">\n// // // // //                   <strong>Q{idx + 1}:</strong> {q.questionText}\n// // // // //                   {q.correctAnswer && (\n// // // // //                     <div className=\"small text-success\">\n// // // // //                       <b>Model Answer:</b> {q.correctAnswer}\n// // // // //                     </div>\n// // // // //                   )}\n// // // // //                   <div className=\"action-buttons\">\n// // // // //                     <button\n// // // // //                       className=\"btn btn-sm btn-warning\"\n// // // // //                       onClick={() => handleEdit(q)}\n// // // // //                     >\n// // // // //                       Edit\n// // // // //                     </button>\n// // // // //                     <button\n// // // // //                       className=\"btn btn-sm btn-danger\"\n// // // // //                       onClick={() => handleDelete(q._id)}\n// // // // //                     >\n// // // // //                       Delete\n// // // // //                     </button>\n// // // // //                   </div>\n// // // // //                 </div>\n// // // // //               ))}\n// // // // //           </div>\n// // // // //         </div>\n// // // // //       ) : (\n// // // // //         // 📊 TEST RESULTS TAB\n// // // // //         <div className=\"tab-content\">\n// // // // //           <div className=\"card results-section\">\n// // // // //             <h5>Candidate Test Results</h5>\n// // // // //             {loadingResults ? (\n// // // // //               <div>Loading test results...</div>\n// // // // //             ) : results.length === 0 ? (\n// // // // //               <div className=\"text-muted\">No test results yet</div>\n// // // // //             ) : (\n// // // // //               <table className=\"results-table\">\n// // // // //                 <thead>\n// // // // //                   <tr>\n// // // // //                     <th>Name</th>\n// // // // //                     <th>Email</th>\n// // // // //                     <th>Total</th>\n// // // // //                     <th>Correct</th>\n// // // // //                     <th>Score %</th>\n// // // // //                     <th>Status</th>\n// // // // //                     <th>Submitted At</th>\n// // // // //                     <th>Action</th>\n// // // // //                   </tr>\n// // // // //                 </thead>\n// // // // //                 <tbody>\n// // // // //                   {results.map((res, idx) => (\n// // // // //                     <tr key={idx}>\n// // // // //                       <td>{res.name}</td>\n// // // // //                       <td>{res.email}</td>\n// // // // //                       <td>{res.totalQuestions}</td>\n// // // // //                       <td>{res.correctAnswers}</td>\n// // // // //                       <td>{res.scorePercent}%</td>\n// // // // //                       <td>\n// // // // //                         <span\n// // // // //                           style={{\n// // // // //                             color:\n// // // // //                               res.status === \"Validated\" ? \"green\" : \"orange\",\n// // // // //                             fontWeight: 600,\n// // // // //                           }}\n// // // // //                         >\n// // // // //                           {res.status || \"Validation Pending\"}\n// // // // //                         </span>\n// // // // //                       </td>\n// // // // //                       <td>{new Date(res.submittedAt).toLocaleString()}</td>\n// // // // //                       <td>\n// // // // //                         <button\n// // // // //                           className=\"btn btn-sm btn-primary\"\n// // // // //                           onClick={() => handleViewValidation(res._id)}\n// // // // //                         >\n// // // // //                           View / Validate\n// // // // //                         </button>\n// // // // //                       </td>\n// // // // //                     </tr>\n// // // // //                   ))}\n// // // // //                 </tbody>\n// // // // //               </table>\n// // // // //             )}\n// // // // //           </div>\n// // // // //         </div>\n// // // // //       )}\n// // // // //     </div>\n// // // // //   );\n// // // // // }\n\n// // // // // import React, { useEffect, useState } from \"react\";\n// // // // // import API from \"../services/api\";\n// // // // // import { useNavigate } from \"react-router-dom\";\n// // // // // import \"../styles/AdminDashboard.css\";\n\n// // // // // export default function AdminDashboard() {\n// // // // //   const navigate = useNavigate();\n// // // // //   const [questions, setQuestions] = useState([]);\n// // // // //   const [results, setResults] = useState([]);\n// // // // //   const [activeTab, setActiveTab] = useState(\"questions\");\n// // // // //   const [form, setForm] = useState({\n// // // // //     questionText: \"\",\n// // // // //     optionsText: \"\",\n// // // // //     correctAnswer: \"\",\n// // // // //     answerText: \"\", // <-- ADDED: admin-entered answer for Theory\n// // // // //   });\n// // // // //   const [questionType, setQuestionType] = useState(\"MCQ\");\n// // // // //   const [file, setFile] = useState(null);\n// // // // //   const [loading, setLoading] = useState(false);\n// // // // //   const [loadingResults, setLoadingResults] = useState(false);\n// // // // //   const [editingId, setEditingId] = useState(null);\n\n// // // // //   // 🟢 Check admin login\n// // // // //   useEffect(() => {\n// // // // //     const token = localStorage.getItem(\"adminToken\");\n// // // // //     if (!token) navigate(\"/admin/login\");\n// // // // //   }, [navigate]);\n\n// // // // //   // 🟢 Initial fetch\n// // // // //   useEffect(() => {\n// // // // //     fetchQuestions();\n// // // // //     fetchResults();\n// // // // //   }, []);\n\n// // // // //   const fetchQuestions = async () => {\n// // // // //     try {\n// // // // //       const res = await API.get(\"/questions\");\n// // // // //       setQuestions(res.data || []);\n// // // // //     } catch (err) {\n// // // // //       console.error(err);\n// // // // //       alert(\"❌ Failed to load questions.\");\n// // // // //     }\n// // // // //   };\n\n// // // // //   const fetchResults = async () => {\n// // // // //     setLoadingResults(true);\n// // // // //     try {\n// // // // //       const res = await API.get(\"/tests\");\n// // // // //       setResults(res.data || []);\n// // // // //     } catch (err) {\n// // // // //       console.error(err);\n// // // // //       alert(\"❌ Failed to load test results.\");\n// // // // //     } finally {\n// // // // //       setLoadingResults(false);\n// // // // //     }\n// // // // //   };\n\n// // // // //   // 🟢 Add or Update Question\n// // // // //   const handleAddOrUpdate = async (e) => {\n// // // // //     e.preventDefault();\n// // // // //     const opts =\n// // // // //       questionType === \"MCQ\"\n// // // // //         ? form.optionsText.split(\"|\").map((s) => s.trim()).filter(Boolean)\n// // // // //         : [];\n\n// // // // //     if (!form.questionText.trim()) {\n// // // // //       return alert(\"Please enter question text.\");\n// // // // //     }\n\n// // // // //     setLoading(true);\n// // // // //     try {\n// // // // //       const payload = {\n// // // // //         questionType,\n// // // // //         questionText: form.questionText,\n// // // // //         options: opts,\n// // // // //         // for MCQ use form.correctAnswer, for Theory use form.answerText as the 'correctAnswer' stored on backend\n// // // // //         correctAnswer: questionType === \"MCQ\" ? form.correctAnswer : form.answerText,\n// // // // //       };\n// // // // //        console.log(\"Submitting payload ->\", payload); // inspect this in Network/Console\n\n// // // // //       if (editingId) {\n// // // // //         await API.put(`/questions/${editingId}`, payload);\n// // // // //         alert(\"✅ Question updated successfully!\");\n// // // // //       } else {\n// // // // //         await API.post(\"/questions\", payload);\n// // // // //         alert(\"✅ Question added successfully!\");\n// // // // //       }\n\n// // // // //       setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\", answerText: \"\" });\n// // // // //       setEditingId(null);\n// // // // //       await fetchQuestions();\n// // // // //     } catch (err) {\n// // // // //       console.error(err);\n// // // // //       alert(err.response?.data?.error || \"❌ Operation failed.\");\n// // // // //     } finally {\n// // // // //       setLoading(false);\n// // // // //     }\n// // // // //   };\n\n// // // // //   // 🟢 Delete Question\n// // // // //   const handleDelete = async (id) => {\n// // // // //     if (!window.confirm(\"Are you sure you want to delete this question?\")) return;\n\n// // // // //     try {\n// // // // //       await API.delete(`/questions/${id}`);\n// // // // //       alert(\"🗑️ Question deleted successfully!\");\n// // // // //       await fetchQuestions();\n// // // // //     } catch (err) {\n// // // // //       console.error(err);\n// // // // //       alert(\"❌ Failed to delete question.\");\n// // // // //     }\n// // // // //   };\n\n// // // // //   // 🟢 Edit Question\n// // // // //   const handleEdit = (q) => {\n// // // // //     setEditingId(q._id);\n// // // // //     setQuestionType(q.questionType);\n// // // // //     setForm({\n// // // // //       questionText: q.questionText,\n// // // // //       optionsText: q.options ? q.options.join(\" | \") : \"\",\n// // // // //       correctAnswer: q.correctAnswer || \"\", // used for MCQ\n// // // // //       answerText: q.questionType === \"Theory\" ? (q.correctAnswer || \"\") : \"\", // <-- ADDED: populate answerText from stored correctAnswer for theory\n// // // // //     });\n// // // // //     window.scrollTo({ top: 0, behavior: \"smooth\" });\n// // // // //   };\n\n// // // // //   // 🟢 Upload File\n// // // // //   const handleUpload = async () => {\n// // // // //     if (!file) return alert(\"Please select a file to upload.\");\n// // // // //     const fd = new FormData();\n// // // // //     fd.append(\"file\", file);\n\n// // // // //     try {\n// // // // //       const res = await API.post(\"/questions/upload\", fd, {\n// // // // //         headers: { \"Content-Type\": \"multipart/form-data\" },\n// // // // //       });\n// // // // //       alert(res.data.message || \"✅ File uploaded successfully!\");\n// // // // //       await fetchQuestions();\n// // // // //     } catch (err) {\n// // // // //       console.error(err);\n// // // // //       alert(err.response?.data?.error || \"❌ File upload failed.\");\n// // // // //     }\n// // // // //   };\n\n// // // // //   const handleLogout = () => {\n// // // // //     localStorage.removeItem(\"adminToken\");\n// // // // //     navigate(\"/admin/login\");\n// // // // //   };\n\n// // // // //   return (\n// // // // //     <div className=\"admin-dashboard\">\n// // // // //       {/* Header */}\n// // // // //       <div className=\"admin-header\">\n// // // // //         <h2>Admin Dashboard</h2>\n// // // // //         <button className=\"logout-btn\" onClick={handleLogout}>\n// // // // //           Logout\n// // // // //         </button>\n// // // // //       </div>\n\n// // // // //       {/* Tabs */}\n// // // // //       <div className=\"tab-buttons\">\n// // // // //         <button\n// // // // //           className={`tab-btn ${activeTab === \"questions\" ? \"active\" : \"\"}`}\n// // // // //           onClick={() => setActiveTab(\"questions\")}\n// // // // //         >\n// // // // //           🧩 Questions\n// // // // //         </button>\n// // // // //         <button\n// // // // //           className={`tab-btn ${activeTab === \"results\" ? \"active\" : \"\"}`}\n// // // // //           onClick={() => setActiveTab(\"results\")}\n// // // // //         >\n// // // // //           📊 Test Results\n// // // // //         </button>\n// // // // //       </div>\n\n// // // // //       {/* 🧩 QUESTIONS TAB */}\n// // // // //       {activeTab === \"questions\" ? (\n// // // // //         <div className=\"tab-content\">\n// // // // //           <div className=\"card form-section\">\n// // // // //             <h5>{editingId ? \"✏️ Edit Question\" : \"➕ Add or Upload Questions\"}</h5>\n\n// // // // //             <form onSubmit={handleAddOrUpdate}>\n// // // // //               <div className=\"mb-3\">\n// // // // //                 <label className=\"form-label\">Question Type</label>\n// // // // //                 <select\n// // // // //                   className=\"form-select\"\n// // // // //                   value={questionType}\n// // // // //                   onChange={(e) => setQuestionType(e.target.value)}\n// // // // //                 >\n// // // // //                   <option value=\"MCQ\">MCQ</option>\n// // // // //                   <option value=\"Theory\">Theory</option>\n// // // // //                 </select>\n// // // // //               </div>\n\n// // // // //               <div className=\"mb-3\">\n// // // // //                 <label className=\"form-label\">Question Text</label>\n// // // // //                 <textarea\n// // // // //                   className=\"form-control\"\n// // // // //                   rows={questionType === \"Theory\" ? 3 : 2}\n// // // // //                   value={form.questionText}\n// // // // //                   onChange={(e) =>\n// // // // //                     setForm({ ...form, questionText: e.target.value })\n// // // // //                   }\n// // // // //                   placeholder=\"Enter your question here...\"\n// // // // //                 />\n// // // // //               </div>\n\n// // // // //               {/* Theory: show admin answer input */}\n// // // // //               {questionType === \"Theory\" && (\n// // // // //                 <div className=\"mb-3\">\n// // // // //                   <label className=\"form-label\">Answer / Model Answer</label>\n// // // // //                   <textarea\n// // // // //                     className=\"form-control\"\n// // // // //                     rows={4}\n// // // // //                     value={form.answerText}\n// // // // //                     onChange={(e) => setForm({ ...form, answerText: e.target.value })}\n// // // // //                     placeholder=\"Enter the model answer for theory questions (this will be stored as the correct answer)\"\n// // // // //                   />\n// // // // //                 </div>\n// // // // //               )}\n\n// // // // //               {questionType === \"MCQ\" && (\n// // // // //                 <>\n// // // // //                   <div className=\"mb-3\">\n// // // // //                     <label className=\"form-label\">Options (separate by |)</label>\n// // // // //                     <input\n// // // // //                       className=\"form-control\"\n// // // // //                       value={form.optionsText}\n// // // // //                       onChange={(e) =>\n// // // // //                         setForm({ ...form, optionsText: e.target.value })\n// // // // //                       }\n// // // // //                       placeholder=\"Option A | Option B | Option C | Option D\"\n// // // // //                     />\n// // // // //                   </div>\n\n// // // // //                   <div className=\"mb-3\">\n// // // // //                     <label className=\"form-label\">Correct Answer</label>\n// // // // //                     <input\n// // // // //                       className=\"form-control\"\n// // // // //                       value={form.correctAnswer}\n// // // // //                       onChange={(e) =>\n// // // // //                         setForm({ ...form, correctAnswer: e.target.value })\n// // // // //                       }\n// // // // //                       placeholder=\"Enter correct answer text\"\n// // // // //                     />\n// // // // //                   </div>\n// // // // //                 </>\n// // // // //               )}\n\n// // // // //               <div className=\"d-flex gap-2\">\n// // // // //                 <button className=\"btn btn-success\" type=\"submit\" disabled={loading}>\n// // // // //                   {loading\n// // // // //                     ? \"Saving...\"\n// // // // //                     : editingId\n// // // // //                     ? \"Update Question\"\n// // // // //                     : \"Add Question\"}\n// // // // //                 </button>\n// // // // //                 <button\n// // // // //                   type=\"button\"\n// // // // //                   className=\"btn btn-secondary\"\n// // // // //                   onClick={() => {\n// // // // //                     setForm({\n// // // // //                       questionText: \"\",\n// // // // //                       optionsText: \"\",\n// // // // //                       correctAnswer: \"\",\n// // // // //                       answerText: \"\", // <-- clear it\n// // // // //                     });\n// // // // //                     setEditingId(null);\n// // // // //                   }}\n// // // // //                 >\n// // // // //                   Clear\n// // // // //                 </button>\n// // // // //               </div>\n// // // // //             </form>\n\n// // // // //             <hr className=\"my-4\" />\n\n// // // // //             {/* Upload Section */}\n// // // // //             <div className=\"upload-section\">\n// // // // //               <label className=\"form-label\">Upload Document (.docx)</label>\n// // // // //               <input\n// // // // //                 type=\"file\"\n// // // // //                 className=\"form-control\"\n// // // // //                 accept=\".docx\"\n// // // // //                 onChange={(e) => setFile(e.target.files[0])}\n// // // // //               />\n// // // // //               <div className=\"mt-2\">\n// // // // //                 <button className=\"btn btn-primary\" onClick={handleUpload}>\n// // // // //                   Upload\n// // // // //                 </button>\n// // // // //               </div>\n// // // // //             </div>\n// // // // //           </div>\n\n// // // // //           {/* Display Questions */}\n// // // // //           <div className=\"card available-questions\">\n// // // // //             <h5>Available Questions</h5>\n\n// // // // //             {/* MCQ Section */}\n// // // // //             <h6 className=\"mt-3 text-primary\">MCQ Questions</h6>\n// // // // //             {questions.filter((q) => q.questionType === \"MCQ\").length === 0 && (\n// // // // //               <div className=\"text-muted\">No MCQs yet</div>\n// // // // //             )}\n// // // // //             {questions\n// // // // //               .filter((q) => q.questionType === \"MCQ\")\n// // // // //               .map((q, idx) => (\n// // // // //                 <div key={q._id} className=\"question-item\">\n// // // // //                   <strong>Q{idx + 1}:</strong> {q.questionText}\n// // // // //                   <div className=\"small text-muted\">\n// // // // //                     Options: {q.options.join(\" | \")}\n// // // // //                   </div>\n// // // // //                   <div className=\"small text-success\">\n// // // // //                     Correct: {q.correctAnswer}\n// // // // //                   </div>\n// // // // //                   <div className=\"action-buttons\">\n// // // // //                     <button\n// // // // //                       className=\"btn btn-sm btn-warning\"\n// // // // //                       onClick={() => handleEdit(q)}\n// // // // //                     >\n// // // // //                       Edit\n// // // // //                     </button>\n// // // // //                     <button\n// // // // //                       className=\"btn btn-sm btn-danger\"\n// // // // //                       onClick={() => handleDelete(q._id)}\n// // // // //                     >\n// // // // //                       Delete\n// // // // //                     </button>\n// // // // //                   </div>\n// // // // //                 </div>\n// // // // //               ))}\n\n// // // // //             {/* Theory Section */}\n// // // // //             <h6 className=\"mt-4 text-primary\">Theory Questions</h6>\n// // // // //             {questions.filter((q) => q.questionType === \"Theory\").length === 0 && (\n// // // // //               <div className=\"text-muted\">No theory questions yet</div>\n// // // // //             )}\n// // // // //             {questions\n// // // // //               .filter((q) => q.questionType === \"Theory\")\n// // // // //               .map((q, idx) => {\n// // // // //                 const relatedAnswers = results\n// // // // //                   .flatMap((r) => r.answers || [])\n// // // // //                   .filter(\n// // // // //                     (a) =>\n// // // // //                       a.question.trim().toLowerCase() ===\n// // // // //                       q.questionText.trim().toLowerCase()\n// // // // //                   );\n// // // // //                 return (\n// // // // //                   <div key={q._id} className=\"question-item\">\n// // // // //                     <strong>Q{idx + 1}:</strong> {q.questionText}\n// // // // //                     {/* show admin-provided model answer if exists */}\n// // // // //                     {q.correctAnswer ? (\n// // // // //                       <div className=\"small text-success\">\n// // // // //                         <b>Model Answer:</b> {q.correctAnswer}\n// // // // //                       </div>\n// // // // //                     ) : null}\n\n// // // // //                     {relatedAnswers.length > 0 ? (\n// // // // //                       <div className=\"theory-answers\">\n// // // // //                         <b>Answers:</b>\n// // // // //                         <ul>\n// // // // //                           {relatedAnswers.map((a, i) => (\n// // // // //                             <li key={i}>{a.userAnswer}</li>\n// // // // //                           ))}\n// // // // //                         </ul>\n// // // // //                       </div>\n// // // // //                     ) : (\n// // // // //                       <div className=\"text-muted small\">No answers yet</div>\n// // // // //                     )}\n// // // // //                     <div className=\"action-buttons\">\n// // // // //                       <button\n// // // // //                         className=\"btn btn-sm btn-warning\"\n// // // // //                         onClick={() => handleEdit(q)}\n// // // // //                       >\n// // // // //                         Edit\n// // // // //                       </button>\n// // // // //                       <button\n// // // // //                         className=\"btn btn-sm btn-danger\"\n// // // // //                         onClick={() => handleDelete(q._id)}\n// // // // //                       >\n// // // // //                         Delete\n// // // // //                       </button>\n// // // // //                     </div>\n// // // // //                   </div>\n// // // // //                 );\n// // // // //               })}\n// // // // //           </div>\n// // // // //         </div>\n// // // // //       ) : (\n// // // // //         // 📊 TEST RESULTS TAB\n// // // // //         <div className=\"tab-content\">\n// // // // //           <div className=\"card results-section\">\n// // // // //             <h5>Candidate Test Results</h5>\n// // // // //             {loadingResults ? (\n// // // // //               <div>Loading test results...</div>\n// // // // //             ) : results.length === 0 ? (\n// // // // //               <div className=\"text-muted\">No test results yet</div>\n// // // // //             ) : (\n// // // // //               <table className=\"results-table\">\n// // // // //                 <thead>\n// // // // //                   <tr>\n// // // // //                     <th>Name</th>\n// // // // //                     <th>Email</th>\n// // // // //                     <th>Total</th>\n// // // // //                     <th>Correct</th>\n// // // // //                     <th>Score %</th>\n// // // // //                     <th>Submitted At</th>\n// // // // //                   </tr>\n// // // // //                 </thead>\n// // // // //                 <tbody>\n// // // // //                   {results.map((res, idx) => (\n// // // // //                     <tr key={idx}>\n// // // // //                       <td>{res.name}</td>\n// // // // //                       <td>{res.email}</td>\n// // // // //                       <td>{res.totalQuestions}</td>\n// // // // //                       <td>{res.correctAnswers}</td>\n// // // // //                       <td>{res.scorePercent}%</td>\n// // // // //                       <td>{new Date(res.submittedAt).toLocaleString()}</td>\n// // // // //                     </tr>\n// // // // //                   ))}\n// // // // //                 </tbody>\n// // // // //               </table>\n// // // // //             )}\n// // // // //           </div>\n// // // // //         </div>\n// // // // //       )}\n// // // // //     </div>\n// // // // //   );\n// // // // // }\n\n// // // // // // import React, { useEffect, useState } from \"react\";\n// // // // // // import API from \"../services/api\";\n// // // // // // import { useNavigate } from \"react-router-dom\";\n// // // // // // import \"../styles/AdminDashboard.css\";\n\n// // // // // // export default function AdminDashboard() {\n// // // // // //   const navigate = useNavigate();\n// // // // // //   const [questions, setQuestions] = useState([]);\n// // // // // //   const [results, setResults] = useState([]);\n// // // // // //   const [activeTab, setActiveTab] = useState(\"questions\");\n// // // // // //   const [form, setForm] = useState({\n// // // // // //     questionText: \"\",\n// // // // // //     optionsText: \"\",\n// // // // // //     correctAnswer: \"\",\n// // // // // //   });\n// // // // // //   const [questionType, setQuestionType] = useState(\"MCQ\");\n// // // // // //   const [file, setFile] = useState(null);\n// // // // // //   const [loading, setLoading] = useState(false);\n// // // // // //   const [loadingResults, setLoadingResults] = useState(false);\n// // // // // //   const [editingId, setEditingId] = useState(null);\n\n// // // // // //   // 🟢 Check admin login\n// // // // // //   useEffect(() => {\n// // // // // //     const token = localStorage.getItem(\"adminToken\");\n// // // // // //     if (!token) navigate(\"/admin/login\");\n// // // // // //   }, [navigate]);\n\n// // // // // //   // 🟢 Initial fetch\n// // // // // //   useEffect(() => {\n// // // // // //     fetchQuestions();\n// // // // // //     fetchResults();\n// // // // // //   }, []);\n\n// // // // // //   const fetchQuestions = async () => {\n// // // // // //     try {\n// // // // // //       const res = await API.get(\"/questions\");\n// // // // // //       setQuestions(res.data || []);\n// // // // // //     } catch (err) {\n// // // // // //       console.error(err);\n// // // // // //       alert(\"❌ Failed to load questions.\");\n// // // // // //     }\n// // // // // //   };\n\n// // // // // //   const fetchResults = async () => {\n// // // // // //     setLoadingResults(true);\n// // // // // //     try {\n// // // // // //       const res = await API.get(\"/tests\");\n// // // // // //       setResults(res.data || []);\n// // // // // //     } catch (err) {\n// // // // // //       console.error(err);\n// // // // // //       alert(\"❌ Failed to load test results.\");\n// // // // // //     } finally {\n// // // // // //       setLoadingResults(false);\n// // // // // //     }\n// // // // // //   };\n\n// // // // // //   // 🟢 Add or Update Question\n// // // // // //   const handleAddOrUpdate = async (e) => {\n// // // // // //     e.preventDefault();\n// // // // // //     const opts =\n// // // // // //       questionType === \"MCQ\"\n// // // // // //         ? form.optionsText.split(\"|\").map((s) => s.trim()).filter(Boolean)\n// // // // // //         : [];\n\n// // // // // //     if (!form.questionText.trim()) {\n// // // // // //       return alert(\"Please enter question text.\");\n// // // // // //     }\n\n// // // // // //     setLoading(true);\n// // // // // //     try {\n// // // // // //       if (editingId) {\n// // // // // //         await API.put(`/questions/${editingId}`, {\n// // // // // //           questionType,\n// // // // // //           questionText: form.questionText,\n// // // // // //           options: opts,\n// // // // // //           correctAnswer: questionType === \"MCQ\" ? form.correctAnswer : \"\",\n// // // // // //         });\n// // // // // //         alert(\"✅ Question updated successfully!\");\n// // // // // //       } else {\n// // // // // //         await API.post(\"/questions\", {\n// // // // // //           questionType,\n// // // // // //           questionText: form.questionText,\n// // // // // //           options: opts,\n// // // // // //           correctAnswer: questionType === \"MCQ\" ? form.correctAnswer : \"\",\n// // // // // //         });\n// // // // // //         alert(\"✅ Question added successfully!\");\n// // // // // //       }\n\n// // // // // //       setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" });\n// // // // // //       setEditingId(null);\n// // // // // //       await fetchQuestions();\n// // // // // //     } catch (err) {\n// // // // // //       console.error(err);\n// // // // // //       alert(err.response?.data?.error || \"❌ Operation failed.\");\n// // // // // //     } finally {\n// // // // // //       setLoading(false);\n// // // // // //     }\n// // // // // //   };\n\n// // // // // //   // 🟢 Delete Question\n// // // // // //   const handleDelete = async (id) => {\n// // // // // //     if (!window.confirm(\"Are you sure you want to delete this question?\")) return;\n\n// // // // // //     try {\n// // // // // //       await API.delete(`/questions/${id}`);\n// // // // // //       alert(\"🗑️ Question deleted successfully!\");\n// // // // // //       await fetchQuestions();\n// // // // // //     } catch (err) {\n// // // // // //       console.error(err);\n// // // // // //       alert(\"❌ Failed to delete question.\");\n// // // // // //     }\n// // // // // //   };\n\n// // // // // //   // 🟢 Edit Question\n// // // // // //   const handleEdit = (q) => {\n// // // // // //     setEditingId(q._id);\n// // // // // //     setQuestionType(q.questionType);\n// // // // // //     setForm({\n// // // // // //       questionText: q.questionText,\n// // // // // //       optionsText: q.options ? q.options.join(\" | \") : \"\",\n// // // // // //       correctAnswer: q.correctAnswer || \"\",\n// // // // // //     });\n// // // // // //     window.scrollTo({ top: 0, behavior: \"smooth\" });\n// // // // // //   };\n\n// // // // // //   // 🟢 Upload File\n// // // // // //   const handleUpload = async () => {\n// // // // // //     if (!file) return alert(\"Please select a file to upload.\");\n// // // // // //     const fd = new FormData();\n// // // // // //     fd.append(\"file\", file);\n\n// // // // // //     try {\n// // // // // //       const res = await API.post(\"/questions/upload\", fd, {\n// // // // // //         headers: { \"Content-Type\": \"multipart/form-data\" },\n// // // // // //       });\n// // // // // //       alert(res.data.message || \"✅ File uploaded successfully!\");\n// // // // // //       await fetchQuestions();\n// // // // // //     } catch (err) {\n// // // // // //       console.error(err);\n// // // // // //       alert(err.response?.data?.error || \"❌ File upload failed.\");\n// // // // // //     }\n// // // // // //   };\n\n// // // // // //   const handleLogout = () => {\n// // // // // //     localStorage.removeItem(\"adminToken\");\n// // // // // //     navigate(\"/admin/login\");\n// // // // // //   };\n\n// // // // // //   return (\n// // // // // //     <div className=\"admin-dashboard\">\n// // // // // //       {/* Header */}\n// // // // // //       <div className=\"admin-header\">\n// // // // // //         <h2>Admin Dashboard</h2>\n// // // // // //         <button className=\"logout-btn\" onClick={handleLogout}>\n// // // // // //           Logout\n// // // // // //         </button>\n// // // // // //       </div>\n\n// // // // // //       {/* Tabs */}\n// // // // // //       <div className=\"tab-buttons\">\n// // // // // //         <button\n// // // // // //           className={`tab-btn ${activeTab === \"questions\" ? \"active\" : \"\"}`}\n// // // // // //           onClick={() => setActiveTab(\"questions\")}\n// // // // // //         >\n// // // // // //           🧩 Questions\n// // // // // //         </button>\n// // // // // //         <button\n// // // // // //           className={`tab-btn ${activeTab === \"results\" ? \"active\" : \"\"}`}\n// // // // // //           onClick={() => setActiveTab(\"results\")}\n// // // // // //         >\n// // // // // //           📊 Test Results\n// // // // // //         </button>\n// // // // // //       </div>\n\n// // // // // //       {/* 🧩 QUESTIONS TAB */}\n// // // // // //       {activeTab === \"questions\" ? (\n// // // // // //         <div className=\"tab-content\">\n// // // // // //           <div className=\"card form-section\">\n// // // // // //             <h5>{editingId ? \"✏️ Edit Question\" : \"➕ Add or Upload Questions\"}</h5>\n\n// // // // // //             <form onSubmit={handleAddOrUpdate}>\n// // // // // //               <div className=\"mb-3\">\n// // // // // //                 <label className=\"form-label\">Question Type</label>\n// // // // // //                 <select\n// // // // // //                   className=\"form-select\"\n// // // // // //                   value={questionType}\n// // // // // //                   onChange={(e) => setQuestionType(e.target.value)}\n// // // // // //                 >\n// // // // // //                   <option value=\"MCQ\">MCQ</option>\n// // // // // //                   <option value=\"Theory\">Theory</option>\n// // // // // //                 </select>\n// // // // // //               </div>\n\n// // // // // //               <div className=\"mb-3\">\n// // // // // //                 <label className=\"form-label\">Question Text</label>\n// // // // // //                 <textarea\n// // // // // //                   className=\"form-control\"\n// // // // // //                   rows={questionType === \"Theory\" ? 3 : 2}\n// // // // // //                   value={form.questionText}\n// // // // // //                   onChange={(e) =>\n// // // // // //                     setForm({ ...form, questionText: e.target.value })\n// // // // // //                   }\n// // // // // //                   placeholder=\"Enter your question here...\"\n// // // // // //                 />\n// // // // // //               </div>\n\n// // // // // //               {questionType === \"MCQ\" && (\n// // // // // //                 <>\n// // // // // //                   <div className=\"mb-3\">\n// // // // // //                     <label className=\"form-label\">Options (separate by |)</label>\n// // // // // //                     <input\n// // // // // //                       className=\"form-control\"\n// // // // // //                       value={form.optionsText}\n// // // // // //                       onChange={(e) =>\n// // // // // //                         setForm({ ...form, optionsText: e.target.value })\n// // // // // //                       }\n// // // // // //                       placeholder=\"Option A | Option B | Option C | Option D\"\n// // // // // //                     />\n// // // // // //                   </div>\n\n// // // // // //                   <div className=\"mb-3\">\n// // // // // //                     <label className=\"form-label\">Correct Answer</label>\n// // // // // //                     <input\n// // // // // //                       className=\"form-control\"\n// // // // // //                       value={form.correctAnswer}\n// // // // // //                       onChange={(e) =>\n// // // // // //                         setForm({ ...form, correctAnswer: e.target.value })\n// // // // // //                       }\n// // // // // //                       placeholder=\"Enter correct answer text\"\n// // // // // //                     />\n// // // // // //                   </div>\n// // // // // //                 </>\n// // // // // //               )}\n\n// // // // // //               <div className=\"d-flex gap-2\">\n// // // // // //                 <button className=\"btn btn-success\" type=\"submit\" disabled={loading}>\n// // // // // //                   {loading\n// // // // // //                     ? \"Saving...\"\n// // // // // //                     : editingId\n// // // // // //                     ? \"Update Question\"\n// // // // // //                     : \"Add Question\"}\n// // // // // //                 </button>\n// // // // // //                 <button\n// // // // // //                   type=\"button\"\n// // // // // //                   className=\"btn btn-secondary\"\n// // // // // //                   onClick={() => {\n// // // // // //                     setForm({\n// // // // // //                       questionText: \"\",\n// // // // // //                       optionsText: \"\",\n// // // // // //                       correctAnswer: \"\",\n// // // // // //                     });\n// // // // // //                     setEditingId(null);\n// // // // // //                   }}\n// // // // // //                 >\n// // // // // //                   Clear\n// // // // // //                 </button>\n// // // // // //               </div>\n// // // // // //             </form>\n\n// // // // // //             <hr className=\"my-4\" />\n\n// // // // // //             {/* Upload Section */}\n// // // // // //             <div className=\"upload-section\">\n// // // // // //               <label className=\"form-label\">Upload Document (.docx)</label>\n// // // // // //               <input\n// // // // // //                 type=\"file\"\n// // // // // //                 className=\"form-control\"\n// // // // // //                 accept=\".docx\"\n// // // // // //                 onChange={(e) => setFile(e.target.files[0])}\n// // // // // //               />\n// // // // // //               <div className=\"mt-2\">\n// // // // // //                 <button className=\"btn btn-primary\" onClick={handleUpload}>\n// // // // // //                   Upload\n// // // // // //                 </button>\n// // // // // //               </div>\n// // // // // //             </div>\n// // // // // //           </div>\n\n// // // // // //           {/* Display Questions */}\n// // // // // //           <div className=\"card available-questions\">\n// // // // // //             <h5>Available Questions</h5>\n\n// // // // // //             {/* MCQ Section */}\n// // // // // //             <h6 className=\"mt-3 text-primary\">MCQ Questions</h6>\n// // // // // //             {questions.filter((q) => q.questionType === \"MCQ\").length === 0 && (\n// // // // // //               <div className=\"text-muted\">No MCQs yet</div>\n// // // // // //             )}\n// // // // // //             {questions\n// // // // // //               .filter((q) => q.questionType === \"MCQ\")\n// // // // // //               .map((q, idx) => (\n// // // // // //                 <div key={q._id} className=\"question-item\">\n// // // // // //                   <strong>Q{idx + 1}:</strong> {q.questionText}\n// // // // // //                   <div className=\"small text-muted\">\n// // // // // //                     Options: {q.options.join(\" | \")}\n// // // // // //                   </div>\n// // // // // //                   <div className=\"small text-success\">\n// // // // // //                     Correct: {q.correctAnswer}\n// // // // // //                   </div>\n// // // // // //                   <div className=\"action-buttons\">\n// // // // // //                     <button\n// // // // // //                       className=\"btn btn-sm btn-warning\"\n// // // // // //                       onClick={() => handleEdit(q)}\n// // // // // //                     >\n// // // // // //                       Edit\n// // // // // //                     </button>\n// // // // // //                     <button\n// // // // // //                       className=\"btn btn-sm btn-danger\"\n// // // // // //                       onClick={() => handleDelete(q._id)}\n// // // // // //                     >\n// // // // // //                       Delete\n// // // // // //                     </button>\n// // // // // //                   </div>\n// // // // // //                 </div>\n// // // // // //               ))}\n\n// // // // // //             {/* Theory Section */}\n// // // // // //             <h6 className=\"mt-4 text-primary\">Theory Questions</h6>\n// // // // // //             {questions.filter((q) => q.questionType === \"Theory\").length === 0 && (\n// // // // // //               <div className=\"text-muted\">No theory questions yet</div>\n// // // // // //             )}\n// // // // // //             {questions\n// // // // // //               .filter((q) => q.questionType === \"Theory\")\n// // // // // //               .map((q, idx) => {\n// // // // // //                 const relatedAnswers = results\n// // // // // //                   .flatMap((r) => r.answers || [])\n// // // // // //                   .filter(\n// // // // // //                     (a) =>\n// // // // // //                       a.question.trim().toLowerCase() ===\n// // // // // //                       q.questionText.trim().toLowerCase()\n// // // // // //                   );\n// // // // // //                 return (\n// // // // // //                   <div key={q._id} className=\"question-item\">\n// // // // // //                     <strong>Q{idx + 1}:</strong> {q.questionText}\n// // // // // //                     {relatedAnswers.length > 0 ? (\n// // // // // //                       <div className=\"theory-answers\">\n// // // // // //                         <b>Answers:</b>\n// // // // // //                         <ul>\n// // // // // //                           {relatedAnswers.map((a, i) => (\n// // // // // //                             <li key={i}>{a.userAnswer}</li>\n// // // // // //                           ))}\n// // // // // //                         </ul>\n// // // // // //                       </div>\n// // // // // //                     ) : (\n// // // // // //                       <div className=\"text-muted small\">No answers yet</div>\n// // // // // //                     )}\n// // // // // //                     <div className=\"action-buttons\">\n// // // // // //                       <button\n// // // // // //                         className=\"btn btn-sm btn-warning\"\n// // // // // //                         onClick={() => handleEdit(q)}\n// // // // // //                       >\n// // // // // //                         Edit\n// // // // // //                       </button>\n// // // // // //                       <button\n// // // // // //                         className=\"btn btn-sm btn-danger\"\n// // // // // //                         onClick={() => handleDelete(q._id)}\n// // // // // //                       >\n// // // // // //                         Delete\n// // // // // //                       </button>\n// // // // // //                     </div>\n// // // // // //                   </div>\n// // // // // //                 );\n// // // // // //               })}\n// // // // // //           </div>\n// // // // // //         </div>\n// // // // // //       ) : (\n// // // // // //         // 📊 TEST RESULTS TAB\n// // // // // //         <div className=\"tab-content\">\n// // // // // //           <div className=\"card results-section\">\n// // // // // //             <h5>Candidate Test Results</h5>\n// // // // // //             {loadingResults ? (\n// // // // // //               <div>Loading test results...</div>\n// // // // // //             ) : results.length === 0 ? (\n// // // // // //               <div className=\"text-muted\">No test results yet</div>\n// // // // // //             ) : (\n// // // // // //               <table className=\"results-table\">\n// // // // // //                 <thead>\n// // // // // //                   <tr>\n// // // // // //                     <th>Name</th>\n// // // // // //                     <th>Email</th>\n// // // // // //                     <th>Total</th>\n// // // // // //                     <th>Correct</th>\n// // // // // //                     <th>Score %</th>\n// // // // // //                     <th>Submitted At</th>\n// // // // // //                   </tr>\n// // // // // //                 </thead>\n// // // // // //                 <tbody>\n// // // // // //                   {results.map((res, idx) => (\n// // // // // //                     <tr key={idx}>\n// // // // // //                       <td>{res.name}</td>\n// // // // // //                       <td>{res.email}</td>\n// // // // // //                       <td>{res.totalQuestions}</td>\n// // // // // //                       <td>{res.correctAnswers}</td>\n// // // // // //                       <td>{res.scorePercent}%</td>\n// // // // // //                       <td>{new Date(res.submittedAt).toLocaleString()}</td>\n// // // // // //                     </tr>\n// // // // // //                   ))}\n// // // // // //                 </tbody>\n// // // // // //               </table>\n// // // // // //             )}\n// // // // // //           </div>\n// // // // // //         </div>\n// // // // // //       )}\n// // // // // //     </div>\n// // // // // //   );\n// // // // // // }\n\n// // // // // // // import React, { useEffect, useState } from \"react\";\n// // // // // // // import API from \"../services/api\";\n// // // // // // // import { useNavigate } from \"react-router-dom\";\n// // // // // // // import \"../styles/AdminDashboard.css\";\n\n// // // // // // // export default function AdminDashboard() {\n// // // // // // //   const navigate = useNavigate();\n// // // // // // //   const [questions, setQuestions] = useState([]);\n// // // // // // //   const [results, setResults] = useState([]);\n// // // // // // //   const [activeTab, setActiveTab] = useState(\"questions\"); // 🔹 Switch tab\n// // // // // // //   const [form, setForm] = useState({\n// // // // // // //     questionText: \"\",\n// // // // // // //     optionsText: \"\",\n// // // // // // //     correctAnswer: \"\",\n// // // // // // //   });\n// // // // // // //   const [questionType, setQuestionType] = useState(\"MCQ\");\n// // // // // // //   const [file, setFile] = useState(null);\n// // // // // // //   const [loading, setLoading] = useState(false);\n// // // // // // //   const [loadingResults, setLoadingResults] = useState(false);\n\n// // // // // // //   // 🟢 Check admin login\n// // // // // // //   useEffect(() => {\n// // // // // // //     const token = localStorage.getItem(\"adminToken\");\n// // // // // // //     if (!token) navigate(\"/admin/login\");\n// // // // // // //   }, [navigate]);\n\n// // // // // // //   // 🟢 Fetch initial data\n// // // // // // //   useEffect(() => {\n// // // // // // //     fetchQuestions();\n// // // // // // //     fetchResults();\n// // // // // // //   }, []);\n\n// // // // // // //   const fetchQuestions = async () => {\n// // // // // // //     try {\n// // // // // // //       const res = await API.get(\"/questions\");\n// // // // // // //       setQuestions(res.data || []);\n// // // // // // //     } catch (err) {\n// // // // // // //       console.error(err);\n// // // // // // //       alert(\"❌ Failed to load questions.\");\n// // // // // // //     }\n// // // // // // //   };\n\n// // // // // // //   const fetchResults = async () => {\n// // // // // // //     setLoadingResults(true);\n// // // // // // //     try {\n// // // // // // //       const res = await API.get(\"/tests\");\n// // // // // // //       setResults(res.data || []);\n// // // // // // //     } catch (err) {\n// // // // // // //       console.error(err);\n// // // // // // //       alert(\"❌ Failed to load test results.\");\n// // // // // // //     } finally {\n// // // // // // //       setLoadingResults(false);\n// // // // // // //     }\n// // // // // // //   };\n\n// // // // // // //   // 🟢 Add Question\n// // // // // // //   const handleAddQuestion = async (e) => {\n// // // // // // //     e.preventDefault();\n// // // // // // //     const opts =\n// // // // // // //       questionType === \"MCQ\"\n// // // // // // //         ? form.optionsText.split(\"|\").map((s) => s.trim()).filter(Boolean)\n// // // // // // //         : [];\n\n// // // // // // //     if (!form.questionText.trim()) {\n// // // // // // //       return alert(\"Please enter question text.\");\n// // // // // // //     }\n// // // // // // //     if (questionType === \"MCQ\" && (opts.length < 2 || !form.correctAnswer.trim())) {\n// // // // // // //       return alert(\"Please enter at least 2 options and a correct answer.\");\n// // // // // // //     }\n\n// // // // // // //     setLoading(true);\n// // // // // // //     try {\n// // // // // // //       await API.post(\"/questions\", {\n// // // // // // //         questionType,\n// // // // // // //         questionText: form.questionText,\n// // // // // // //         options: opts,\n// // // // // // //         correctAnswer: questionType === \"MCQ\" ? form.correctAnswer : \"\",\n// // // // // // //       });\n\n// // // // // // //       setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" });\n// // // // // // //       await fetchQuestions();\n// // // // // // //       alert(\"✅ Question added successfully!\");\n// // // // // // //     } catch (err) {\n// // // // // // //       console.error(err);\n// // // // // // //       alert(err.response?.data?.error || \"Failed to add question.\");\n// // // // // // //     } finally {\n// // // // // // //       setLoading(false);\n// // // // // // //     }\n// // // // // // //   };\n\n// // // // // // //   // 🟢 Upload File\n// // // // // // //   const handleUpload = async () => {\n// // // // // // //     if (!file) return alert(\"Please select a file to upload.\");\n// // // // // // //     const fd = new FormData();\n// // // // // // //     fd.append(\"file\", file);\n\n// // // // // // //     try {\n// // // // // // //       const res = await API.post(\"/questions/upload\", fd, {\n// // // // // // //         headers: { \"Content-Type\": \"multipart/form-data\" },\n// // // // // // //       });\n// // // // // // //       alert(res.data.message || \"✅ File uploaded successfully!\");\n// // // // // // //       await fetchQuestions();\n// // // // // // //     } catch (err) {\n// // // // // // //       console.error(err);\n// // // // // // //       alert(err.response?.data?.error || \"❌ File upload failed.\");\n// // // // // // //     }\n// // // // // // //   };\n\n// // // // // // //   const handleLogout = () => {\n// // // // // // //     localStorage.removeItem(\"adminToken\");\n// // // // // // //     navigate(\"/admin/login\");\n// // // // // // //   };\n\n// // // // // // //   return (\n// // // // // // //     <div className=\"admin-dashboard\">\n// // // // // // //       {/* Header */}\n// // // // // // //       <div className=\"admin-header\">\n// // // // // // //         <h2>Admin Dashboard</h2>\n// // // // // // //         <button className=\"logout-btn\" onClick={handleLogout}>\n// // // // // // //           Logout\n// // // // // // //         </button>\n// // // // // // //       </div>\n\n// // // // // // //       {/* Tabs */}\n// // // // // // //       <div className=\"tab-buttons\">\n// // // // // // //         <button\n// // // // // // //           className={`tab-btn ${activeTab === \"questions\" ? \"active\" : \"\"}`}\n// // // // // // //           onClick={() => setActiveTab(\"questions\")}\n// // // // // // //         >\n// // // // // // //           🧩 Questions\n// // // // // // //         </button>\n// // // // // // //         <button\n// // // // // // //           className={`tab-btn ${activeTab === \"results\" ? \"active\" : \"\"}`}\n// // // // // // //           onClick={() => setActiveTab(\"results\")}\n// // // // // // //         >\n// // // // // // //           📊 Test Results\n// // // // // // //         </button>\n// // // // // // //       </div>\n\n// // // // // // //       {/* Content based on active tab */}\n// // // // // // //       {activeTab === \"questions\" ? (\n// // // // // // //         <div className=\"tab-content\">\n// // // // // // //           {/* Add Question / Upload Section */}\n// // // // // // //           <div className=\"card form-section\">\n// // // // // // //             <h5>Add or Upload Questions</h5>\n\n// // // // // // //             <form onSubmit={handleAddQuestion}>\n// // // // // // //               <div className=\"mb-3\">\n// // // // // // //                 <label className=\"form-label\">Question Type</label>\n// // // // // // //                 <select\n// // // // // // //                   className=\"form-select\"\n// // // // // // //                   value={questionType}\n// // // // // // //                   onChange={(e) => setQuestionType(e.target.value)}\n// // // // // // //                 >\n// // // // // // //                   <option value=\"MCQ\">MCQ</option>\n// // // // // // //                   <option value=\"Theory\">Theory</option>\n// // // // // // //                 </select>\n// // // // // // //               </div>\n\n// // // // // // //               <div className=\"mb-3\">\n// // // // // // //                 <label className=\"form-label\">Question Text</label>\n// // // // // // //                 <textarea\n// // // // // // //                   className=\"form-control\"\n// // // // // // //                   rows={questionType === \"Theory\" ? 3 : 2}\n// // // // // // //                   value={form.questionText}\n// // // // // // //                   onChange={(e) =>\n// // // // // // //                     setForm({ ...form, questionText: e.target.value })\n// // // // // // //                   }\n// // // // // // //                   placeholder=\"Enter your question here...\"\n// // // // // // //                 />\n// // // // // // //               </div>\n\n// // // // // // //               {questionType === \"MCQ\" && (\n// // // // // // //                 <>\n// // // // // // //                   <div className=\"mb-3\">\n// // // // // // //                     <label className=\"form-label\">Options (separate by |)</label>\n// // // // // // //                     <input\n// // // // // // //                       className=\"form-control\"\n// // // // // // //                       value={form.optionsText}\n// // // // // // //                       onChange={(e) =>\n// // // // // // //                         setForm({ ...form, optionsText: e.target.value })\n// // // // // // //                       }\n// // // // // // //                       placeholder=\"Option A | Option B | Option C | Option D\"\n// // // // // // //                     />\n// // // // // // //                   </div>\n\n// // // // // // //                   <div className=\"mb-3\">\n// // // // // // //                     <label className=\"form-label\">Correct Answer</label>\n// // // // // // //                     <input\n// // // // // // //                       className=\"form-control\"\n// // // // // // //                       value={form.correctAnswer}\n// // // // // // //                       onChange={(e) =>\n// // // // // // //                         setForm({ ...form, correctAnswer: e.target.value })\n// // // // // // //                       }\n// // // // // // //                       placeholder=\"Enter correct answer text\"\n// // // // // // //                     />\n// // // // // // //                   </div>\n// // // // // // //                 </>\n// // // // // // //               )}\n\n// // // // // // //               <div className=\"d-flex gap-2\">\n// // // // // // //                 <button className=\"btn btn-success\" type=\"submit\" disabled={loading}>\n// // // // // // //                   {loading ? \"Adding...\" : \"Add Question\"}\n// // // // // // //                 </button>\n// // // // // // //                 <button\n// // // // // // //                   type=\"button\"\n// // // // // // //                   className=\"btn btn-secondary\"\n// // // // // // //                   onClick={() =>\n// // // // // // //                     setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" })\n// // // // // // //                   }\n// // // // // // //                 >\n// // // // // // //                   Clear\n// // // // // // //                 </button>\n// // // // // // //               </div>\n// // // // // // //             </form>\n\n// // // // // // //             <hr className=\"my-4\" />\n\n// // // // // // //             {/* Upload Document Section */}\n// // // // // // //             <div className=\"upload-section\">\n// // // // // // //               <label className=\"form-label\">Upload Document (.docx)</label>\n// // // // // // //               <input\n// // // // // // //                 type=\"file\"\n// // // // // // //                 className=\"form-control\"\n// // // // // // //                 accept=\".docx\"\n// // // // // // //                 onChange={(e) => setFile(e.target.files[0])}\n// // // // // // //               />\n// // // // // // //               <div className=\"mt-2\">\n// // // // // // //                 <button className=\"btn btn-primary\" onClick={handleUpload}>\n// // // // // // //                   Upload\n// // // // // // //                 </button>\n// // // // // // //               </div>\n// // // // // // //             </div>\n// // // // // // //           </div>\n\n// // // // // // //           {/* Display Available Questions */}\n// // // // // // //           <div className=\"card available-questions\">\n// // // // // // //             <h5>Available Questions</h5>\n\n// // // // // // //             <h6 className=\"mt-3 text-primary\">MCQ Questions</h6>\n// // // // // // //             {questions.filter((q) => q.questionType === \"MCQ\").length === 0 && (\n// // // // // // //               <div className=\"text-muted\">No MCQs yet</div>\n// // // // // // //             )}\n// // // // // // //             {questions\n// // // // // // //               .filter((q) => q.questionType === \"MCQ\")\n// // // // // // //               .map((q, idx) => (\n// // // // // // //                 <div key={q._id} className=\"question-item\">\n// // // // // // //                   <strong>Q{idx + 1}:</strong> {q.questionText}\n// // // // // // //                   <div className=\"small text-muted\">\n// // // // // // //                     Options: {q.options.join(\" | \")}\n// // // // // // //                   </div>\n// // // // // // //                   <div className=\"small text-success\">\n// // // // // // //                     Correct: {q.correctAnswer}\n// // // // // // //                   </div>\n// // // // // // //                 </div>\n// // // // // // //               ))}\n\n// // // // // // //             <h6 className=\"mt-4 text-primary\">Theory Questions</h6>\n// // // // // // //             {questions.filter((q) => q.questionType === \"Theory\").length === 0 && (\n// // // // // // //               <div className=\"text-muted\">No theory questions yet</div>\n// // // // // // //             )}\n// // // // // // //             {questions\n// // // // // // //               .filter((q) => q.questionType === \"Theory\")\n// // // // // // //               .map((q, idx) => (\n// // // // // // //                 <div key={q._id} className=\"question-item\">\n// // // // // // //                   <strong>Q{idx + 1}:</strong> {q.questionText}\n// // // // // // //                 </div>\n// // // // // // //               ))}\n// // // // // // //           </div>\n// // // // // // //         </div>\n// // // // // // //       ) : (\n// // // // // // //         <div className=\"tab-content\">\n// // // // // // //           {/* Test Results Section */}\n// // // // // // //           <div className=\"card results-section\">\n// // // // // // //             <h5>Candidate Test Results</h5>\n\n// // // // // // //             {loadingResults ? (\n// // // // // // //               <div>Loading test results...</div>\n// // // // // // //             ) : results.length === 0 ? (\n// // // // // // //               <div className=\"text-muted\">No test results yet</div>\n// // // // // // //             ) : (\n// // // // // // //               <table className=\"results-table\">\n// // // // // // //                 <thead>\n// // // // // // //                   <tr>\n// // // // // // //                     <th>Name</th>\n// // // // // // //                     <th>Email</th>\n// // // // // // //                     <th>Total Questions</th>\n// // // // // // //                     <th>Correct</th>\n// // // // // // //                     <th>Score %</th>\n// // // // // // //                     <th>Submitted At</th>\n// // // // // // //                   </tr>\n// // // // // // //                 </thead>\n// // // // // // //                 <tbody>\n// // // // // // //                   {results.map((res, idx) => (\n// // // // // // //                     <tr key={idx}>\n// // // // // // //                       <td>{res.name}</td>\n// // // // // // //                       <td>{res.email}</td>\n// // // // // // //                       <td>{res.totalQuestions}</td>\n// // // // // // //                       <td>{res.correctAnswers}</td>\n// // // // // // //                       <td>{res.scorePercent}%</td>\n// // // // // // //                       <td>{new Date(res.submittedAt).toLocaleString()}</td>\n// // // // // // //                     </tr>\n// // // // // // //                   ))}\n// // // // // // //                 </tbody>\n// // // // // // //               </table>\n// // // // // // //             )}\n// // // // // // //           </div>\n// // // // // // //         </div>\n// // // // // // //       )}\n// // // // // // //     </div>\n// // // // // // //   );\n// // // // // // // }\n\n// // // // // // // // import React, { useEffect, useState } from \"react\";\n// // // // // // // // import API from \"../services/api\";\n// // // // // // // // import { useNavigate } from \"react-router-dom\";\n// // // // // // // // import \"../styles/AdminDashboard.css\";\n\n// // // // // // // // export default function AdminDashboard() {\n// // // // // // // //   const navigate = useNavigate();\n// // // // // // // //   const [questions, setQuestions] = useState([]);\n// // // // // // // //   const [results, setResults] = useState([]);\n// // // // // // // //   const [form, setForm] = useState({\n// // // // // // // //     questionText: \"\",\n// // // // // // // //     optionsText: \"\",\n// // // // // // // //     correctAnswer: \"\",\n// // // // // // // //   });\n// // // // // // // //   const [questionType, setQuestionType] = useState(\"MCQ\");\n// // // // // // // //   const [file, setFile] = useState(null);\n// // // // // // // //   const [loading, setLoading] = useState(false);\n// // // // // // // //   const [loadingResults, setLoadingResults] = useState(false);\n\n// // // // // // // //   // 🟢 Check admin login (token validation)\n// // // // // // // //   useEffect(() => {\n// // // // // // // //     const token = localStorage.getItem(\"adminToken\");\n// // // // // // // //     if (!token) navigate(\"/admin/login\");\n// // // // // // // //   }, [navigate]);\n\n// // // // // // // //   // 🟢 Fetch questions and test results on load\n// // // // // // // //   useEffect(() => {\n// // // // // // // //     fetchQuestions();\n// // // // // // // //     fetchResults();\n// // // // // // // //   }, []);\n\n// // // // // // // //   const fetchQuestions = async () => {\n// // // // // // // //     try {\n// // // // // // // //       const res = await API.get(\"/questions\");\n// // // // // // // //       setQuestions(res.data || []);\n// // // // // // // //     } catch (err) {\n// // // // // // // //       console.error(err);\n// // // // // // // //       alert(\"❌ Failed to load questions.\");\n// // // // // // // //     }\n// // // // // // // //   };\n\n// // // // // // // //   const fetchResults = async () => {\n// // // // // // // //     setLoadingResults(true);\n// // // // // // // //     try {\n// // // // // // // //       const res = await API.get(\"/tests\");\n// // // // // // // //       setResults(res.data || []);\n// // // // // // // //     } catch (err) {\n// // // // // // // //       console.error(err);\n// // // // // // // //       alert(\"❌ Failed to load test results.\");\n// // // // // // // //     } finally {\n// // // // // // // //       setLoadingResults(false);\n// // // // // // // //     }\n// // // // // // // //   };\n\n// // // // // // // //   // 🟢 Add Question Manually\n// // // // // // // //   const handleAddQuestion = async (e) => {\n// // // // // // // //     e.preventDefault();\n// // // // // // // //     const opts =\n// // // // // // // //       questionType === \"MCQ\"\n// // // // // // // //         ? form.optionsText.split(\"|\").map((s) => s.trim()).filter(Boolean)\n// // // // // // // //         : [];\n\n// // // // // // // //     if (!form.questionText.trim()) {\n// // // // // // // //       return alert(\"Please enter question text.\");\n// // // // // // // //     }\n// // // // // // // //     if (questionType === \"MCQ\" && (opts.length < 2 || !form.correctAnswer.trim())) {\n// // // // // // // //       return alert(\"Please enter at least 2 options and a correct answer.\");\n// // // // // // // //     }\n\n// // // // // // // //     setLoading(true);\n// // // // // // // //     try {\n// // // // // // // //       await API.post(\"/questions\", {\n// // // // // // // //         questionType,\n// // // // // // // //         questionText: form.questionText,\n// // // // // // // //         options: opts,\n// // // // // // // //         correctAnswer: questionType === \"MCQ\" ? form.correctAnswer : \"\",\n// // // // // // // //       });\n\n// // // // // // // //       setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" });\n// // // // // // // //       await fetchQuestions();\n// // // // // // // //       alert(\"✅ Question added successfully!\");\n// // // // // // // //     } catch (err) {\n// // // // // // // //       console.error(err);\n// // // // // // // //       alert(err.response?.data?.error || \"Failed to add question.\");\n// // // // // // // //     } finally {\n// // // // // // // //       setLoading(false);\n// // // // // // // //     }\n// // // // // // // //   };\n\n// // // // // // // //   // 🟢 Upload .docx question file\n// // // // // // // //   const handleUpload = async () => {\n// // // // // // // //     if (!file) return alert(\"Please select a file to upload.\");\n// // // // // // // //     const fd = new FormData();\n// // // // // // // //     fd.append(\"file\", file);\n\n// // // // // // // //     try {\n// // // // // // // //       const res = await API.post(\"/questions/upload\", fd, {\n// // // // // // // //         headers: { \"Content-Type\": \"multipart/form-data\" },\n// // // // // // // //       });\n// // // // // // // //       alert(res.data.message || \"✅ File uploaded successfully!\");\n// // // // // // // //       await fetchQuestions();\n// // // // // // // //     } catch (err) {\n// // // // // // // //       console.error(err);\n// // // // // // // //       alert(err.response?.data?.error || \"❌ File upload failed.\");\n// // // // // // // //     }\n// // // // // // // //   };\n\n// // // // // // // //   // 🟢 Logout\n// // // // // // // //   const handleLogout = () => {\n// // // // // // // //     localStorage.removeItem(\"adminToken\");\n// // // // // // // //     navigate(\"/admin/login\");\n// // // // // // // //   };\n\n// // // // // // // //   return (\n// // // // // // // //     <div className=\"container container-center py-4 admin-dashboard\">\n// // // // // // // //       {/* Header */}\n// // // // // // // //       <div className=\"d-flex justify-content-between align-items-center mb-3 admin-header\">\n// // // // // // // //         <h2>Admin Dashboard</h2>\n// // // // // // // //         <button className=\"btn btn-outline-danger btn-sm\" onClick={handleLogout}>\n// // // // // // // //           Logout\n// // // // // // // //         </button>\n// // // // // // // //       </div>\n\n// // // // // // // //       {/* Add Question / Upload Section */}\n// // // // // // // //       <div className=\"card card-clean p-4 mb-4 form-section\">\n// // // // // // // //         <h5>Add questions or upload documents that will be shown to candidates.</h5>\n\n// // // // // // // //         {/* Add Question Form */}\n// // // // // // // //         <form onSubmit={handleAddQuestion} className=\"mt-3\">\n// // // // // // // //           <div className=\"mb-3\">\n// // // // // // // //             <label className=\"form-label\">Question Type</label>\n// // // // // // // //             <select\n// // // // // // // //               className=\"form-select\"\n// // // // // // // //               value={questionType}\n// // // // // // // //               onChange={(e) => setQuestionType(e.target.value)}\n// // // // // // // //             >\n// // // // // // // //               <option value=\"MCQ\">MCQ</option>\n// // // // // // // //               <option value=\"Theory\">Theory</option>\n// // // // // // // //             </select>\n// // // // // // // //           </div>\n\n// // // // // // // //           <div className=\"mb-3\">\n// // // // // // // //             <label className=\"form-label\">Question Text</label>\n// // // // // // // //             <textarea\n// // // // // // // //               className=\"form-control\"\n// // // // // // // //               rows={questionType === \"Theory\" ? 3 : 2}\n// // // // // // // //               value={form.questionText}\n// // // // // // // //               onChange={(e) => setForm({ ...form, questionText: e.target.value })}\n// // // // // // // //               placeholder=\"Enter your question here...\"\n// // // // // // // //             />\n// // // // // // // //           </div>\n\n// // // // // // // //           {questionType === \"MCQ\" && (\n// // // // // // // //             <>\n// // // // // // // //               <div className=\"mb-3\">\n// // // // // // // //                 <label className=\"form-label\">Options (separate by |)</label>\n// // // // // // // //                 <input\n// // // // // // // //                   className=\"form-control\"\n// // // // // // // //                   value={form.optionsText}\n// // // // // // // //                   onChange={(e) =>\n// // // // // // // //                     setForm({ ...form, optionsText: e.target.value })\n// // // // // // // //                   }\n// // // // // // // //                   placeholder=\"Option A | Option B | Option C | Option D\"\n// // // // // // // //                 />\n// // // // // // // //               </div>\n\n// // // // // // // //               <div className=\"mb-3\">\n// // // // // // // //                 <label className=\"form-label\">\n// // // // // // // //                   Correct Answer (exact text of one option)\n// // // // // // // //                 </label>\n// // // // // // // //                 <input\n// // // // // // // //                   className=\"form-control\"\n// // // // // // // //                   value={form.correctAnswer}\n// // // // // // // //                   onChange={(e) =>\n// // // // // // // //                     setForm({ ...form, correctAnswer: e.target.value })\n// // // // // // // //                   }\n// // // // // // // //                   placeholder=\"Enter correct answer text\"\n// // // // // // // //                 />\n// // // // // // // //               </div>\n// // // // // // // //             </>\n// // // // // // // //           )}\n\n// // // // // // // //           <div className=\"mb-3 d-flex gap-2\">\n// // // // // // // //             <button\n// // // // // // // //               className=\"btn btn-success\"\n// // // // // // // //               type=\"submit\"\n// // // // // // // //               disabled={loading}\n// // // // // // // //             >\n// // // // // // // //               {loading ? \"Adding...\" : \"Add Question\"}\n// // // // // // // //             </button>\n// // // // // // // //             <button\n// // // // // // // //               type=\"button\"\n// // // // // // // //               className=\"btn btn-secondary\"\n// // // // // // // //               onClick={() =>\n// // // // // // // //                 setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" })\n// // // // // // // //               }\n// // // // // // // //             >\n// // // // // // // //               Clear\n// // // // // // // //             </button>\n// // // // // // // //           </div>\n// // // // // // // //         </form>\n\n// // // // // // // //         <hr className=\"my-4\" />\n\n// // // // // // // //         {/* Upload Document Section */}\n// // // // // // // //         <div className=\"mb-3 upload-section\">\n// // // // // // // //           <label className=\"form-label\">Upload Document (.docx)</label>\n// // // // // // // //           <input\n// // // // // // // //             type=\"file\"\n// // // // // // // //             className=\"form-control\"\n// // // // // // // //             accept=\".docx\"\n// // // // // // // //             onChange={(e) => setFile(e.target.files[0])}\n// // // // // // // //           />\n// // // // // // // //           <div className=\"mt-2\">\n// // // // // // // //             <button className=\"btn btn-primary\" onClick={handleUpload}>\n// // // // // // // //               Upload\n// // // // // // // //             </button>\n// // // // // // // //           </div>\n// // // // // // // //         </div>\n// // // // // // // //       </div>\n\n// // // // // // // //       {/* Available Questions */}\n// // // // // // // //       <div className=\"card card-clean p-4 mb-4 available-questions\">\n// // // // // // // //         <h5>Available Questions</h5>\n\n// // // // // // // //         {/* MCQ Section */}\n// // // // // // // //         <h6 className=\"mt-3 text-primary\">MCQ Questions</h6>\n// // // // // // // //         {questions.filter((q) => q.questionType === \"MCQ\").length === 0 && (\n// // // // // // // //           <div className=\"text-muted\">No MCQs yet</div>\n// // // // // // // //         )}\n// // // // // // // //         {questions\n// // // // // // // //           .filter((q) => q.questionType === \"MCQ\")\n// // // // // // // //           .map((q, idx) => (\n// // // // // // // //             <div key={q._id} className=\"mb-3 border-bottom pb-2\">\n// // // // // // // //               <strong>Q{idx + 1}:</strong> {q.questionText}\n// // // // // // // //               <div className=\"small text-muted\">\n// // // // // // // //                 Options: {q.options.join(\" | \")}\n// // // // // // // //               </div>\n// // // // // // // //               <div className=\"small text-success\">\n// // // // // // // //                 Correct: {q.correctAnswer}\n// // // // // // // //               </div>\n// // // // // // // //             </div>\n// // // // // // // //           ))}\n\n// // // // // // // //         {/* Theory Section */}\n// // // // // // // //         <h6 className=\"mt-4 text-primary\">Theory Questions</h6>\n// // // // // // // //         {questions.filter((q) => q.questionType === \"Theory\").length === 0 && (\n// // // // // // // //           <div className=\"text-muted\">No theory questions yet</div>\n// // // // // // // //         )}\n// // // // // // // //         {questions\n// // // // // // // //           .filter((q) => q.questionType === \"Theory\")\n// // // // // // // //           .map((q, idx) => (\n// // // // // // // //             <div key={q._id} className=\"mb-3 border-bottom pb-2\">\n// // // // // // // //               <strong>Q{idx + 1}:</strong> {q.questionText}\n// // // // // // // //             </div>\n// // // // // // // //           ))}\n// // // // // // // //       </div>\n\n// // // // // // // //       {/* Test Results Section */}\n// // // // // // // //       <div className=\"card card-clean p-4 mb-4 results-section\">\n// // // // // // // //         <h5>Candidate Test Results</h5>\n\n// // // // // // // //         {loadingResults ? (\n// // // // // // // //           <div>Loading test results...</div>\n// // // // // // // //         ) : results.length === 0 ? (\n// // // // // // // //           <div className=\"text-muted\">No test results yet</div>\n// // // // // // // //         ) : (\n// // // // // // // //           <table className=\"results-table\">\n// // // // // // // //             <thead>\n// // // // // // // //               <tr>\n// // // // // // // //                 <th>Name</th>\n// // // // // // // //                 <th>Email</th>\n// // // // // // // //                 <th>Total Questions</th>\n// // // // // // // //                 <th>Correct</th>\n// // // // // // // //                 <th>Score %</th>\n// // // // // // // //                 <th>Submitted At</th>\n// // // // // // // //               </tr>\n// // // // // // // //             </thead>\n// // // // // // // //             <tbody>\n// // // // // // // //               {results.map((res, idx) => (\n// // // // // // // //                 <tr key={idx}>\n// // // // // // // //                   <td>{res.name}</td>\n// // // // // // // //                   <td>{res.email}</td>\n// // // // // // // //                   <td>{res.totalQuestions}</td>\n// // // // // // // //                   <td>{res.correctAnswers}</td>\n// // // // // // // //                   <td>{res.scorePercent}%</td>\n// // // // // // // //                   <td>{new Date(res.submittedAt).toLocaleString()}</td>\n// // // // // // // //                 </tr>\n// // // // // // // //               ))}\n// // // // // // // //             </tbody>\n// // // // // // // //           </table>\n// // // // // // // //         )}\n// // // // // // // //       </div>\n// // // // // // // //     </div>\n// // // // // // // //   );\n// // // // // // // // }\n\n// // // // // // // // // import React, { useEffect, useState } from \"react\";\n// // // // // // // // // import API from \"../services/api\";\n// // // // // // // // // import { useNavigate } from \"react-router-dom\";\n// // // // // // // // // import \"../styles/AdminDashboard.css\";\n\n// // // // // // // // // export default function AdminDashboard() {\n// // // // // // // // //   const navigate = useNavigate();\n// // // // // // // // //   const [questions, setQuestions] = useState([]);\n// // // // // // // // //   const [form, setForm] = useState({\n// // // // // // // // //     questionText: \"\",\n// // // // // // // // //     optionsText: \"\",\n// // // // // // // // //     correctAnswer: \"\",\n// // // // // // // // //   });\n// // // // // // // // //   const [questionType, setQuestionType] = useState(\"MCQ\");\n// // // // // // // // //   const [file, setFile] = useState(null);\n// // // // // // // // //   const [loading, setLoading] = useState(false);\n\n// // // // // // // // //   // 🟢 Check admin login (token validation)\n// // // // // // // // //   useEffect(() => {\n// // // // // // // // //     const token = localStorage.getItem(\"adminToken\");\n// // // // // // // // //     if (!token) navigate(\"/admin/login\");\n// // // // // // // // //   }, [navigate]);\n\n// // // // // // // // //   // 🟢 Fetch questions from DB\n// // // // // // // // //   useEffect(() => {\n// // // // // // // // //     fetchQuestions();\n// // // // // // // // //   }, []);\n\n// // // // // // // // //   const fetchQuestions = async () => {\n// // // // // // // // //     try {\n// // // // // // // // //       const res = await API.get(\"/questions\");\n// // // // // // // // //       setQuestions(res.data || []);\n// // // // // // // // //     } catch (err) {\n// // // // // // // // //       console.error(err);\n// // // // // // // // //       alert(\"Failed to load questions.\");\n// // // // // // // // //     }\n// // // // // // // // //   };\n\n// // // // // // // // //   // 🟢 Add Question Manually\n// // // // // // // // //   const handleAddQuestion = async (e) => {\n// // // // // // // // //     e.preventDefault();\n// // // // // // // // //     const opts =\n// // // // // // // // //       questionType === \"MCQ\"\n// // // // // // // // //         ? form.optionsText.split(\"|\").map((s) => s.trim()).filter(Boolean)\n// // // // // // // // //         : [];\n\n// // // // // // // // //     if (!form.questionText.trim()) {\n// // // // // // // // //       return alert(\"Please enter question text.\");\n// // // // // // // // //     }\n// // // // // // // // //     if (questionType === \"MCQ\" && (opts.length < 2 || !form.correctAnswer.trim())) {\n// // // // // // // // //       return alert(\"Please enter at least 2 options and a correct answer.\");\n// // // // // // // // //     }\n\n// // // // // // // // //     setLoading(true);\n// // // // // // // // //     try {\n// // // // // // // // //       await API.post(\"/questions\", {\n// // // // // // // // //         questionType,\n// // // // // // // // //         questionText: form.questionText,\n// // // // // // // // //         options: opts,\n// // // // // // // // //         correctAnswer: questionType === \"MCQ\" ? form.correctAnswer : \"\",\n// // // // // // // // //       });\n\n// // // // // // // // //       setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" });\n// // // // // // // // //       await fetchQuestions();\n// // // // // // // // //       alert(\"✅ Question added successfully!\");\n// // // // // // // // //     } catch (err) {\n// // // // // // // // //       console.error(err);\n// // // // // // // // //       alert(err.response?.data?.error || \"Failed to add question.\");\n// // // // // // // // //     } finally {\n// // // // // // // // //       setLoading(false);\n// // // // // // // // //     }\n// // // // // // // // //   };\n\n// // // // // // // // //   // 🟢 Upload .docx question file\n// // // // // // // // //   const handleUpload = async () => {\n// // // // // // // // //     if (!file) return alert(\"Please select a file to upload.\");\n// // // // // // // // //     const fd = new FormData();\n// // // // // // // // //     fd.append(\"file\", file);\n\n// // // // // // // // //     try {\n// // // // // // // // //       const res = await API.post(\"/questions/upload\", fd, {\n// // // // // // // // //         headers: { \"Content-Type\": \"multipart/form-data\" },\n// // // // // // // // //       });\n// // // // // // // // //       alert(res.data.message || \"File uploaded successfully!\");\n// // // // // // // // //       await fetchQuestions();\n// // // // // // // // //     } catch (err) {\n// // // // // // // // //       console.error(err);\n// // // // // // // // //       alert(err.response?.data?.error || \"File upload failed.\");\n// // // // // // // // //     }\n// // // // // // // // //   };\n\n// // // // // // // // //   // 🟢 Logout\n// // // // // // // // //   const handleLogout = () => {\n// // // // // // // // //     localStorage.removeItem(\"adminToken\");\n// // // // // // // // //     navigate(\"/admin/login\");\n// // // // // // // // //   };\n\n// // // // // // // // //   return (\n// // // // // // // // //     <div className=\"container container-center py-4\">\n// // // // // // // // //       <div className=\"d-flex justify-content-between align-items-center mb-3\">\n// // // // // // // // //         <h2>Admin Dashboard</h2>\n// // // // // // // // //         <button className=\"btn btn-outline-danger btn-sm\" onClick={handleLogout}>\n// // // // // // // // //           Logout\n// // // // // // // // //         </button>\n// // // // // // // // //       </div>\n\n// // // // // // // // //       <div className=\"card card-clean p-4 mb-4\">\n// // // // // // // // //         <h5>Add questions or upload documents that will be shown to candidates.</h5>\n\n// // // // // // // // //         {/* Add Question Form */}\n// // // // // // // // //         <form onSubmit={handleAddQuestion} className=\"mt-3\">\n// // // // // // // // //           <div className=\"mb-3\">\n// // // // // // // // //             <label className=\"form-label\">Question Type</label>\n// // // // // // // // //             <select\n// // // // // // // // //               className=\"form-select\"\n// // // // // // // // //               value={questionType}\n// // // // // // // // //               onChange={(e) => setQuestionType(e.target.value)}\n// // // // // // // // //             >\n// // // // // // // // //               <option value=\"MCQ\">MCQ</option>\n// // // // // // // // //               <option value=\"Theory\">Theory</option>\n// // // // // // // // //             </select>\n// // // // // // // // //           </div>\n\n// // // // // // // // //           <div className=\"mb-3\">\n// // // // // // // // //             <label className=\"form-label\">Question Text</label>\n// // // // // // // // //             <textarea\n// // // // // // // // //               className=\"form-control\"\n// // // // // // // // //               rows={questionType === \"Theory\" ? 3 : 2}\n// // // // // // // // //               value={form.questionText}\n// // // // // // // // //               onChange={(e) => setForm({ ...form, questionText: e.target.value })}\n// // // // // // // // //               placeholder=\"Enter your question here...\"\n// // // // // // // // //             />\n// // // // // // // // //           </div>\n\n// // // // // // // // //           {questionType === \"MCQ\" && (\n// // // // // // // // //             <>\n// // // // // // // // //               <div className=\"mb-3\">\n// // // // // // // // //                 <label className=\"form-label\">Options (separate by |)</label>\n// // // // // // // // //                 <input\n// // // // // // // // //                   className=\"form-control\"\n// // // // // // // // //                   value={form.optionsText}\n// // // // // // // // //                   onChange={(e) =>\n// // // // // // // // //                     setForm({ ...form, optionsText: e.target.value })\n// // // // // // // // //                   }\n// // // // // // // // //                   placeholder=\"Option A | Option B | Option C | Option D\"\n// // // // // // // // //                 />\n// // // // // // // // //               </div>\n\n// // // // // // // // //               <div className=\"mb-3\">\n// // // // // // // // //                 <label className=\"form-label\">\n// // // // // // // // //                   Correct Answer (exact text of one option)\n// // // // // // // // //                 </label>\n// // // // // // // // //                 <input\n// // // // // // // // //                   className=\"form-control\"\n// // // // // // // // //                   value={form.correctAnswer}\n// // // // // // // // //                   onChange={(e) =>\n// // // // // // // // //                     setForm({ ...form, correctAnswer: e.target.value })\n// // // // // // // // //                   }\n// // // // // // // // //                   placeholder=\"Enter correct answer text\"\n// // // // // // // // //                 />\n// // // // // // // // //               </div>\n// // // // // // // // //             </>\n// // // // // // // // //           )}\n\n// // // // // // // // //           <div className=\"mb-3 d-flex gap-2\">\n// // // // // // // // //             <button\n// // // // // // // // //               className=\"btn btn-success\"\n// // // // // // // // //               type=\"submit\"\n// // // // // // // // //               disabled={loading}\n// // // // // // // // //             >\n// // // // // // // // //               {loading ? \"Adding...\" : \"Add Question\"}\n// // // // // // // // //             </button>\n// // // // // // // // //             <button\n// // // // // // // // //               type=\"button\"\n// // // // // // // // //               className=\"btn btn-secondary\"\n// // // // // // // // //               onClick={() =>\n// // // // // // // // //                 setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" })\n// // // // // // // // //               }\n// // // // // // // // //             >\n// // // // // // // // //               Clear\n// // // // // // // // //             </button>\n// // // // // // // // //           </div>\n// // // // // // // // //         </form>\n\n// // // // // // // // //         <hr className=\"my-4\" />\n\n// // // // // // // // //         {/* Upload Document Section */}\n// // // // // // // // //         <div className=\"mb-3\">\n// // // // // // // // //           <label className=\"form-label\">Upload Document (.docx)</label>\n// // // // // // // // //           <input\n// // // // // // // // //             type=\"file\"\n// // // // // // // // //             className=\"form-control\"\n// // // // // // // // //             accept=\".docx\"\n// // // // // // // // //             onChange={(e) => setFile(e.target.files[0])}\n// // // // // // // // //           />\n// // // // // // // // //           <div className=\"mt-2\">\n// // // // // // // // //             <button className=\"btn btn-primary\" onClick={handleUpload}>\n// // // // // // // // //               Upload\n// // // // // // // // //             </button>\n// // // // // // // // //           </div>\n// // // // // // // // //         </div>\n// // // // // // // // //       </div>\n\n// // // // // // // // //       {/* Display All Questions */}\n// // // // // // // // //       <div className=\"card card-clean p-4\">\n// // // // // // // // //         <h5>Available Questions</h5>\n\n// // // // // // // // //         {/* MCQ Section */}\n// // // // // // // // //         <h6 className=\"mt-3 text-primary\">MCQ Questions</h6>\n// // // // // // // // //         {questions.filter((q) => q.questionType === \"MCQ\").length === 0 && (\n// // // // // // // // //           <div className=\"text-muted\">No MCQs yet</div>\n// // // // // // // // //         )}\n// // // // // // // // //         {questions\n// // // // // // // // //           .filter((q) => q.questionType === \"MCQ\")\n// // // // // // // // //           .map((q, idx) => (\n// // // // // // // // //             <div key={q._id} className=\"mb-3 border-bottom pb-2\">\n// // // // // // // // //               <strong>Q{idx + 1}:</strong> {q.questionText}\n// // // // // // // // //               <div className=\"small text-muted\">\n// // // // // // // // //                 Options: {q.options.join(\" | \")}\n// // // // // // // // //               </div>\n// // // // // // // // //               <div className=\"small text-success\">\n// // // // // // // // //                 Correct: {q.correctAnswer}\n// // // // // // // // //               </div>\n// // // // // // // // //             </div>\n// // // // // // // // //           ))}\n\n// // // // // // // // //         {/* Theory Section */}\n// // // // // // // // //         <h6 className=\"mt-4 text-primary\">Theory Questions</h6>\n// // // // // // // // //         {questions.filter((q) => q.questionType === \"Theory\").length === 0 && (\n// // // // // // // // //           <div className=\"text-muted\">No theory questions yet</div>\n// // // // // // // // //         )}\n// // // // // // // // //         {questions\n// // // // // // // // //           .filter((q) => q.questionType === \"Theory\")\n// // // // // // // // //           .map((q, idx) => (\n// // // // // // // // //             <div key={q._id} className=\"mb-3 border-bottom pb-2\">\n// // // // // // // // //               <strong>Q{idx + 1}:</strong> {q.questionText}\n// // // // // // // // //             </div>\n// // // // // // // // //           ))}\n// // // // // // // // //       </div>\n// // // // // // // // //     </div>\n// // // // // // // // //   );\n// // // // // // // // // }\n_s(AdminDashboard, \"ttggjnx6US30VL6HncLz+UXrHws=\", false, function () {\n  return [useNavigate];\n});\n_c = AdminDashboard;\nvar _c;\n$RefreshReg$(_c, \"AdminDashboard\");","map":{"version":3,"names":["React","useEffect","useState","API","useNavigate","jsxDEV","_jsxDEV","AdminDashboard","_s","navigate","questions","setQuestions","results","setResults","activeTab","setActiveTab","form","setForm","questionText","answerText","file","setFile","loading","setLoading","loadingResults","setLoadingResults","editingId","setEditingId","testControl","setTestControl","isActive","questionLimit","timeLimit","token","localStorage","getItem","fetchQuestions","fetchResults","fetchTestControl","res","testcontrol","get","data","err","console","error","handleStartTest","update","user","activateAll","alert","message","fetchWaitingUsers","handleStopTest","handleClearLastWaitingUser","window","confirm","waitingUsers","deleteLast","_err$response","_err$response$data","response","getAll","Array","isArray","tests","setWaitingUsers","waitingCount","setWaitingCount","_res$data","length","interval","setInterval","clearInterval","handleLogout","removeItem","handleViewValidation","id","handleAddOrUpdate","e","preventDefault","trim","payload","questionType","correctAnswer","create","_err$response2","_err$response2$data","handleEdit","q","_id","scrollTo","top","behavior","handleDelete","delete","handleUpload","fd","FormData","append","uploadDoc","_err$response3","_err$response3$data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","map","index","fullName","email","status","type","value","onChange","target","idx","name","totalQuestions","correctAnswers","scorePercent","style","color","fontWeight","Date","submittedAt","toLocaleString","_c","$RefreshReg$"],"sources":["C:/Users/HP/Downloads/INTERVIEW PROCESS/INTERVIEW PROCESS/client/src/pages/AdminDashboard.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport API from \"../services/api\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"../styles/AdminDashboard.css\";\r\n\r\nexport default function AdminDashboard() {\r\n  const navigate = useNavigate();\r\n  const [questions, setQuestions] = useState([]);\r\n  const [results, setResults] = useState([]);\r\n  const [activeTab, setActiveTab] = useState(\"questions\");\r\n  const [form, setForm] = useState({\r\n    questionText: \"\",\r\n    answerText: \"\",\r\n  });\r\n  const [file, setFile] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingResults, setLoadingResults] = useState(false);\r\n  const [editingId, setEditingId] = useState(null);\r\n\r\n  // 🧩 Test control state\r\n  const [testControl, setTestControl] = useState({\r\n    isActive: false,\r\n    questionLimit: 10,\r\n    timeLimit: 30,\r\n  });\r\n\r\n  // 🟢 Check admin login\r\n  useEffect(() => {\r\n    const token = localStorage.getItem(\"adminToken\");\r\n    if (!token) navigate(\"/admin/login\");\r\n  }, [navigate]);\r\n\r\n  // 🟢 Initial fetch\r\n  useEffect(() => {\r\n    fetchQuestions();\r\n    fetchResults();\r\n    fetchTestControl();\r\n  }, []);\r\n\r\n  // ✅ Fetch Test Control\r\n  const fetchTestControl = async () => {\r\n    try {\r\n      const res = await API.testcontrol.get();\r\n      if (res.data) setTestControl(res.data);\r\n    } catch (err) {\r\n      console.error(\"Error fetching test control:\", err);\r\n    }\r\n  };\r\n\r\n  // ✅ Update Test Control + Activate users\r\n  const handleStartTest = async () => {\r\n    try {\r\n      // 1️⃣ Start the test\r\n      await API.testcontrol.update({\r\n        isActive: true,\r\n        questionLimit: testControl.questionLimit,\r\n        timeLimit: testControl.timeLimit,\r\n      });\r\n\r\n      // 2️⃣ Activate all waiting users\r\n      const res = await API.user.activateAll();\r\n      alert(res.data.message || \"✅ Test started, all users activated!\");\r\n      await fetchWaitingUsers();\r\n    } catch (err) {\r\n      console.error(\"❌ Failed to start test:\", err);\r\n      alert(\"❌ Failed to start test.\");\r\n    }\r\n  };\r\n\r\n  // ✅ Stop test\r\n  const handleStopTest = async () => {\r\n    try {\r\n      await API.testcontrol.update({ isActive: false });\r\n      alert(\"⏹️ Test stopped successfully!\");\r\n      await fetchTestControl();\r\n    } catch (err) {\r\n      console.error(\"❌ Error stopping test:\", err);\r\n      alert(\"Failed to stop test.\");\r\n    }\r\n  };\r\n\r\n  // ✅ Clear last waiting user\r\n  const handleClearLastWaitingUser = async () => {\r\n    if (!window.confirm(\"Are you sure you want to delete the last waiting user?\")) return;\r\n    try {\r\n      const res = await API.waitingUsers.deleteLast();\r\n      alert(res.data.message || \"Last waiting user deleted.\");\r\n      await fetchWaitingUsers();\r\n    } catch (err) {\r\n      console.error(\"❌ Error deleting last waiting user:\", err);\r\n      alert(err.response?.data?.error || \"Failed to delete last waiting user.\");\r\n    }\r\n  };\r\n\r\n  // ✅ Fetch Questions\r\n  const fetchQuestions = async () => {\r\n    try {\r\n      const res = await API.questions.getAll();\r\n      const data = Array.isArray(res.data)\r\n        ? res.data\r\n        : res.data.questions || [];\r\n      setQuestions(data);\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(\"❌ Failed to load questions.\");\r\n    }\r\n  };\r\n\r\n  // ✅ Fetch Results\r\n  const fetchResults = async () => {\r\n    setLoadingResults(true);\r\n    try {\r\n      const res = await API.tests.getAll();\r\n      setResults(res.data || []);\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(\"❌ Failed to load test results.\");\r\n    } finally {\r\n      setLoadingResults(false);\r\n    }\r\n  };\r\n\r\n  // 🟢 Waiting Users\r\n  const [waitingUsers, setWaitingUsers] = useState([]);\r\n  const [waitingCount, setWaitingCount] = useState(0);\r\n\r\n  const fetchWaitingUsers = async () => {\r\n    try {\r\n      const res = await API.waitingUsers.getAll();\r\n      setWaitingUsers(res.data || []);\r\n      setWaitingCount(res.data?.length || 0);\r\n    } catch (err) {\r\n      console.error(\"❌ Error fetching waiting users:\", err);\r\n    }\r\n  };\r\n\r\n  // 🔄 Periodically fetch users\r\n  useEffect(() => {\r\n    fetchWaitingUsers();\r\n    const interval = setInterval(fetchWaitingUsers, 5000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem(\"adminToken\");\r\n    navigate(\"/admin/login\");\r\n  };\r\n\r\n  const handleViewValidation = (id) => {\r\n    navigate(`/admin/result/${id}`);\r\n  };\r\n\r\n  // ✅ Add / Update Question\r\n  const handleAddOrUpdate = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!form.questionText.trim()) {\r\n      return alert(\"Please enter question text.\");\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      const payload = {\r\n        questionType: \"Theory\",\r\n        questionText: form.questionText,\r\n        correctAnswer: form.answerText,\r\n      };\r\n\r\n      if (editingId) {\r\n        await API.questions.update(editingId, payload);\r\n        alert(\"✅ Question updated successfully!\");\r\n      } else {\r\n        await API.questions.create(payload);\r\n        alert(\"✅ Question added successfully!\");\r\n      }\r\n\r\n      setForm({ questionText: \"\", answerText: \"\" });\r\n      setEditingId(null);\r\n      await fetchQuestions();\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(err.response?.data?.error || \"❌ Operation failed.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleEdit = (q) => {\r\n    setEditingId(q._id);\r\n    setForm({\r\n      questionText: q.questionText,\r\n      answerText: q.correctAnswer || \"\",\r\n    });\r\n    window.scrollTo({ top: 0, behavior: \"smooth\" });\r\n  };\r\n\r\n  const handleDelete = async (id) => {\r\n    if (!window.confirm(\"Are you sure you want to delete this question?\")) return;\r\n    try {\r\n      await API.questions.delete(id);\r\n      alert(\"🗑️ Question deleted successfully!\");\r\n      await fetchQuestions();\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(\"❌ Failed to delete question.\");\r\n    }\r\n  };\r\n\r\n  const handleUpload = async () => {\r\n    if (!file) return alert(\"Please select a file to upload.\");\r\n    const fd = new FormData();\r\n    fd.append(\"file\", file);\r\n\r\n    try {\r\n      const res = await API.questions.uploadDoc(fd);\r\n      alert(res.data.message || \"✅ File uploaded successfully!\");\r\n      await fetchQuestions();\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(err.response?.data?.error || \"❌ File upload failed.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"admin-dashboard\">\r\n      <div className=\"admin-header\">\r\n        <h2>Admin Dashboard</h2>\r\n        <button className=\"logout-btn\" onClick={handleLogout}>\r\n          Logout\r\n        </button>\r\n      </div>\r\n\r\n      {/* Tabs */}\r\n      <div className=\"tab-buttons\">\r\n        <button\r\n          className={`tab-btn ${activeTab === \"questions\" ? \"active\" : \"\"}`}\r\n          onClick={() => setActiveTab(\"questions\")}\r\n        >\r\n          🧩 Questions\r\n        </button>\r\n        <button\r\n          className={`tab-btn ${activeTab === \"results\" ? \"active\" : \"\"}`}\r\n          onClick={() => setActiveTab(\"results\")}\r\n        >\r\n          📊 Test Results\r\n        </button>\r\n      </div>\r\n\r\n      {activeTab === \"questions\" ? (\r\n        <div className=\"tab-content\">\r\n          {/* ✅ Test Control Panel */}\r\n          <div className=\"card form-section\">\r\n            <h5>🕹️ Test Control Panel</h5>\r\n\r\n            {/* ✅ Live Waiting Users Section */}\r\n            <div className=\"card form-section mt-4\">\r\n              <div className=\"d-flex justify-content-between align-items-center\">\r\n                <h5>🕒 Live Waiting Users</h5>\r\n                <button\r\n                  className=\"btn btn-sm btn-outline-danger\"\r\n                  onClick={handleClearLastWaitingUser}\r\n                  disabled={waitingUsers.length === 0}\r\n                >\r\n                  🗑️ Clear Last Entry\r\n                </button>\r\n              </div>\r\n\r\n              <p className=\"text-muted mb-2\">\r\n                Total Waiting: <strong>{waitingCount}</strong>\r\n              </p>\r\n\r\n              {waitingUsers.length === 0 ? (\r\n                <div className=\"text-secondary small\">No users are waiting currently.</div>\r\n              ) : (\r\n                <table className=\"table table-sm table-bordered\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>#</th>\r\n                      <th>Full Name</th>\r\n                      <th>Email</th>\r\n                      <th>Status</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {waitingUsers.map((user, index) => (\r\n                      <tr key={user._id}>\r\n                        <td>{index + 1}</td>\r\n                        <td>{user.fullName}</td>\r\n                        <td>{user.email}</td>\r\n                        <td>{user.status}</td>\r\n                      </tr>\r\n                    ))}\r\n                  </tbody>\r\n                </table>\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"mb-3\">\r\n              <label>Number of Questions</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                value={testControl.questionLimit}\r\n                onChange={(e) =>\r\n                  setTestControl({\r\n                    ...testControl,\r\n                    questionLimit: e.target.value,\r\n                  })\r\n                }\r\n              />\r\n            </div>\r\n\r\n            <div className=\"mb-3\">\r\n              <label>Time Limit (minutes)</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                value={testControl.timeLimit}\r\n                onChange={(e) =>\r\n                  setTestControl({\r\n                    ...testControl,\r\n                    timeLimit: e.target.value,\r\n                  })\r\n                }\r\n              />\r\n            </div>\r\n\r\n            <div className=\"mb-3\">\r\n              <label>Status: </label>\r\n              <span\r\n                className={`ms-2 fw-bold ${\r\n                  testControl.isActive ? \"text-success\" : \"text-danger\"\r\n                }`}\r\n              >\r\n                {testControl.isActive ? \"Active\" : \"Inactive\"}\r\n              </span>\r\n            </div>\r\n\r\n            <div className=\"d-flex gap-2\">\r\n              <button className=\"btn btn-success\" onClick={handleStartTest}>\r\n                ▶️ Start Test\r\n              </button>\r\n              <button className=\"btn btn-danger\" onClick={handleStopTest}>\r\n                ⏹️ Stop Test\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        // ✅ Test Results Tab\r\n        <div className=\"tab-content\">\r\n          <div className=\"card results-section\">\r\n            <h5>Candidate Test Results</h5>\r\n            {loadingResults ? (\r\n              <div>Loading test results...</div>\r\n            ) : results.length === 0 ? (\r\n              <div className=\"text-muted\">No test results yet</div>\r\n            ) : (\r\n              <table className=\"results-table\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Name</th>\r\n                    <th>Email</th>\r\n                    <th>Total</th>\r\n                    <th>Correct</th>\r\n                    <th>Score %</th>\r\n                    <th>Status</th>\r\n                    <th>Submitted At</th>\r\n                    <th>Action</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {results.map((res, idx) => (\r\n                    <tr key={idx}>\r\n                      <td>{res.name}</td>\r\n                      <td>{res.email}</td>\r\n                      <td>{res.totalQuestions}</td>\r\n                      <td>{res.correctAnswers}</td>\r\n                      <td>{res.scorePercent}%</td>\r\n                      <td>\r\n                        <span\r\n                          style={{\r\n                            color:\r\n                              res.status === \"Validated\" ? \"green\" : \"orange\",\r\n                            fontWeight: 600,\r\n                          }}\r\n                        >\r\n                          {res.status || \"Validation Pending\"}\r\n                        </span>\r\n                      </td>\r\n                      <td>{new Date(res.submittedAt).toLocaleString()}</td>\r\n                      <td>\r\n                        <button\r\n                          className=\"btn btn-sm btn-primary\"\r\n                          onClick={() => handleViewValidation(res._id)}\r\n                        >\r\n                          View / Validate\r\n                        </button>\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import API from \"../services/api\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import \"../styles/AdminDashboard.css\";\r\n\r\n// export default function AdminDashboard() {\r\n//   const navigate = useNavigate();\r\n//   const [questions, setQuestions] = useState([]);\r\n//   const [results, setResults] = useState([]);\r\n//   const [activeTab, setActiveTab] = useState(\"questions\");\r\n//   const [form, setForm] = useState({\r\n//     questionText: \"\",\r\n//     answerText: \"\",\r\n//   });\r\n//   const [file, setFile] = useState(null);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [loadingResults, setLoadingResults] = useState(false);\r\n//   const [editingId, setEditingId] = useState(null);\r\n\r\n//   // 🧩 Test control state\r\n//   const [testControl, setTestControl] = useState({\r\n//     isActive: false,\r\n//     questionLimit: 10,\r\n//     timeLimit: 30,\r\n//   });\r\n\r\n//   // 🟢 Check admin login\r\n//   useEffect(() => {\r\n//     const token = localStorage.getItem(\"adminToken\");\r\n//     if (!token) navigate(\"/admin/login\");\r\n//   }, [navigate]);\r\n\r\n//   // 🟢 Initial fetch\r\n//   useEffect(() => {\r\n//     fetchQuestions();\r\n//     fetchResults();\r\n//     fetchTestControl();\r\n//   }, []);\r\n\r\n//   // ✅ Fetch Test Control\r\n//   const fetchTestControl = async () => {\r\n//     try {\r\n//       const res = await API.testcontrol.get();\r\n//       if (res.data) setTestControl(res.data);\r\n//     } catch (err) {\r\n//       console.error(\"Error fetching test control:\", err);\r\n//     }\r\n//   };\r\n\r\n//     const handleClearLastWaitingUser = async () => {\r\n//     if (!window.confirm(\"Are you sure you want to delete the last waiting user?\")) return;\r\n//     try {\r\n//       const res = await API.waitingUsers.deleteLast();\r\n//       alert(res.data.message || \"Last waiting user deleted.\");\r\n//       // Refresh the waiting list immediately\r\n//       const updated = await API.waitingUsers.getAll();\r\n//       setWaitingUsers(updated.data || []);\r\n//       setWaitingCount(updated.data?.length || 0);\r\n//     } catch (err) {\r\n//       console.error(\"❌ Error deleting last waiting user:\", err);\r\n//       alert(err.response?.data?.error || \"Failed to delete last waiting user.\");\r\n//     }\r\n//   };\r\n\r\n\r\n\r\n//   // ✅ Update Test Control\r\n//   const updateTestControl = async (updates) => {\r\n//     try {\r\n//       const res = await API.testcontrol.update(updates);\r\n//       if (res.data) setTestControl(res.data);\r\n//       alert(\"✅ Test control updated successfully!\");\r\n//     } catch (err) {\r\n//       console.error(\"❌ Failed to update test control:\", err);\r\n//       alert(\"❌ Failed to update test control.\");\r\n//     }\r\n//   };\r\n\r\n//   // ✅ Fetch Questions\r\n//   const fetchQuestions = async () => {\r\n//     try {\r\n//       const res = await API.questions.getAll();\r\n//       const data = Array.isArray(res.data)\r\n//         ? res.data\r\n//         : res.data.questions || [];\r\n//       setQuestions(data);\r\n//     } catch (err) {\r\n//       console.error(err);\r\n//       alert(\"❌ Failed to load questions.\");\r\n//     }\r\n//   };\r\n\r\n//   // ✅ Fetch Results\r\n//   const fetchResults = async () => {\r\n//     setLoadingResults(true);\r\n//     try {\r\n//       const res = await API.tests.getAll();\r\n//       setResults(res.data || []);\r\n//     } catch (err) {\r\n//       console.error(err);\r\n//       alert(\"❌ Failed to load test results.\");\r\n//     } finally {\r\n//       setLoadingResults(false);\r\n//     }\r\n//   };\r\n\r\n//   // ✅ Add / Update Question\r\n//   const handleAddOrUpdate = async (e) => {\r\n//     e.preventDefault();\r\n\r\n//     if (!form.questionText.trim()) {\r\n//       return alert(\"Please enter question text.\");\r\n//     }\r\n\r\n//     setLoading(true);\r\n//     try {\r\n//       const payload = {\r\n//         questionType: \"Theory\",\r\n//         questionText: form.questionText,\r\n//         correctAnswer: form.answerText,\r\n//       };\r\n\r\n//       if (editingId) {\r\n//         await API.questions.update(editingId, payload);\r\n//         alert(\"✅ Question updated successfully!\");\r\n//       } else {\r\n//         await API.questions.create(payload);\r\n//         alert(\"✅ Question added successfully!\");\r\n//       }\r\n\r\n//       setForm({ questionText: \"\", answerText: \"\" });\r\n//       setEditingId(null);\r\n//       await fetchQuestions();\r\n//     } catch (err) {\r\n//       console.error(err);\r\n//       alert(err.response?.data?.error || \"❌ Operation failed.\");\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   // ✅ Delete Question\r\n//   const handleDelete = async (id) => {\r\n//     if (!window.confirm(\"Are you sure you want to delete this question?\")) return;\r\n//     try {\r\n//       await API.questions.delete(id);\r\n//       alert(\"🗑️ Question deleted successfully!\");\r\n//       await fetchQuestions();\r\n//     } catch (err) {\r\n//       console.error(err);\r\n//       alert(\"❌ Failed to delete question.\");\r\n//     }\r\n//   };\r\n\r\n//   // ✅ Edit Question\r\n//   const handleEdit = (q) => {\r\n//     setEditingId(q._id);\r\n//     setForm({\r\n//       questionText: q.questionText,\r\n//       answerText: q.correctAnswer || \"\",\r\n//     });\r\n//     window.scrollTo({ top: 0, behavior: \"smooth\" });\r\n//   };\r\n\r\n//   // ✅ Upload File\r\n//   const handleUpload = async () => {\r\n//     if (!file) return alert(\"Please select a file to upload.\");\r\n//     const fd = new FormData();\r\n//     fd.append(\"file\", file);\r\n\r\n//     try {\r\n//       const res = await API.questions.uploadDoc(fd);\r\n//       alert(res.data.message || \"✅ File uploaded successfully!\");\r\n//       await fetchQuestions();\r\n//     } catch (err) {\r\n//       console.error(err);\r\n//       alert(err.response?.data?.error || \"❌ File upload failed.\");\r\n//     }\r\n//   };\r\n\r\n//   const handleLogout = () => {\r\n//     localStorage.removeItem(\"adminToken\");\r\n//     navigate(\"/admin/login\");\r\n//   };\r\n\r\n//   const handleViewValidation = (id) => {\r\n//     navigate(`/admin/result/${id}`);\r\n//   };\r\n//     // 🟢 Waiting Users\r\n//   const [waitingUsers, setWaitingUsers] = useState([]);\r\n//   const [waitingCount, setWaitingCount] = useState(0);\r\n\r\n//   // 🔄 Fetch waiting users periodically\r\n//   useEffect(() => {\r\n//     const fetchWaitingUsers = async () => {\r\n//       try {\r\n//         const res = await API.waitingUsers.getAll();\r\n//         setWaitingUsers(res.data || []);\r\n//         setWaitingCount(res.data?.length || 0);\r\n//       } catch (err) {\r\n//         console.error(\"❌ Error fetching waiting users:\", err);\r\n//       }\r\n//     };\r\n\r\n//     fetchWaitingUsers();\r\n//     const interval = setInterval(fetchWaitingUsers, 5000); // refresh every 5s\r\n//     return () => clearInterval(interval);\r\n//   }, []);\r\n\r\n\r\n//   return (\r\n//     <div className=\"admin-dashboard\">\r\n//       {/* Header */}\r\n//       <div className=\"admin-header\">\r\n//         <h2>Admin Dashboard</h2>\r\n//         <button className=\"logout-btn\" onClick={handleLogout}>\r\n//           Logout\r\n//         </button>\r\n//       </div>\r\n\r\n//       {/* Tabs */}\r\n//       <div className=\"tab-buttons\">\r\n//         <button\r\n//           className={`tab-btn ${activeTab === \"questions\" ? \"active\" : \"\"}`}\r\n//           onClick={() => setActiveTab(\"questions\")}\r\n//         >\r\n//           🧩 Questions\r\n//         </button>\r\n//         <button\r\n//           className={`tab-btn ${activeTab === \"results\" ? \"active\" : \"\"}`}\r\n//           onClick={() => setActiveTab(\"results\")}\r\n//         >\r\n//           📊 Test Results\r\n//         </button>\r\n//       </div>\r\n\r\n//       {activeTab === \"questions\" ? (\r\n//         <div className=\"tab-content\">\r\n//           {/* ✅ Test Control Panel */}\r\n//           <div className=\"card form-section\">\r\n//             <h5>🕹️ Test Control Panel</h5>\r\n\r\n\r\n//           {/* ✅ Live Waiting Users Section */}\r\n// <div className=\"card form-section mt-4\">\r\n//   <div className=\"d-flex justify-content-between align-items-center\">\r\n//     <h5>🕒 Live Waiting Users</h5>\r\n//     <button\r\n//       className=\"btn btn-sm btn-outline-danger\"\r\n//       onClick={handleClearLastWaitingUser}\r\n//       disabled={waitingUsers.length === 0}\r\n//     >\r\n//       🗑️ Clear Last Entry\r\n//     </button>\r\n//   </div>\r\n\r\n//   <p className=\"text-muted mb-2\">\r\n//     Total Waiting: <strong>{waitingCount}</strong>\r\n//   </p>\r\n\r\n//   {waitingUsers.length === 0 ? (\r\n//     <div className=\"text-secondary small\">No users are waiting currently.</div>\r\n//   ) : (\r\n//     <table className=\"table table-sm table-bordered\">\r\n//       <thead>\r\n//         <tr>\r\n//           <th>#</th>\r\n//           <th>Full Name</th>\r\n//           <th>Email</th>\r\n//         </tr>\r\n//       </thead>\r\n//       <tbody>\r\n//         {waitingUsers.map((user, index) => (\r\n//           <tr key={user._id}>\r\n//             <td>{index + 1}</td>\r\n//             <td>{user.fullName}</td>\r\n//             <td>{user.email}</td>\r\n//           </tr>\r\n//         ))}\r\n//       </tbody>\r\n//     </table>\r\n//   )}\r\n// </div>\r\n\r\n \r\n//             <div className=\"mb-3\">\r\n//               <label>Number of Questions</label>\r\n//               <input\r\n//                 type=\"number\"\r\n//                 className=\"form-control\"\r\n//                 value={testControl.questionLimit}\r\n//                 onChange={(e) =>\r\n//                   setTestControl({\r\n//                     ...testControl,\r\n//                     questionLimit: e.target.value,\r\n//                   })\r\n//                 }\r\n//               />\r\n//             </div>\r\n\r\n//             <div className=\"mb-3\">\r\n//               <label>Time Limit (minutes)</label>\r\n//               <input\r\n//                 type=\"number\"\r\n//                 className=\"form-control\"\r\n//                 value={testControl.timeLimit}\r\n//                 onChange={(e) =>\r\n//                   setTestControl({\r\n//                     ...testControl,\r\n//                     timeLimit: e.target.value,\r\n//                   })\r\n//                 }\r\n//               />\r\n//             </div>\r\n\r\n//             <div className=\"mb-3\">\r\n//               <label>Status: </label>\r\n//               <span\r\n//                 className={`ms-2 fw-bold ${\r\n//                   testControl.isActive ? \"text-success\" : \"text-danger\"\r\n//                 }`}\r\n//               >\r\n//                 {testControl.isActive ? \"Active\" : \"Inactive\"}\r\n//               </span>\r\n//             </div>\r\n\r\n//             <div className=\"d-flex gap-2\">\r\n//               <button\r\n//                 className=\"btn btn-success\"\r\n//                 onClick={() =>\r\n//                   updateTestControl({\r\n//                     isActive: true,\r\n//                     questionLimit: testControl.questionLimit,\r\n//                     timeLimit: testControl.timeLimit,\r\n//                   })\r\n//                 }\r\n//               >\r\n//                 ▶️ Start Test\r\n//               </button>\r\n//               <button\r\n//                 className=\"btn btn-danger\"\r\n//                 onClick={() =>\r\n//                   updateTestControl({\r\n//                     isActive: false,\r\n//                   })\r\n//                 }\r\n//               >\r\n//                 ⏹️ Stop Test\r\n//               </button>\r\n//             </div>\r\n//           </div>\r\n\r\n//           {/* ✅ Question Form */}\r\n//           <div className=\"card form-section mt-4\">\r\n//             <h5>\r\n//               {editingId ? \"✏️ Edit Theory Question\" : \"➕ Add / Upload Questions\"}\r\n//             </h5>\r\n\r\n//             <form onSubmit={handleAddOrUpdate}>\r\n//               <div className=\"mb-3\">\r\n//                 <label className=\"form-label\">Question Text</label>\r\n//                 <textarea\r\n//                   className=\"form-control\"\r\n//                   rows={3}\r\n//                   value={form.questionText}\r\n//                   onChange={(e) =>\r\n//                     setForm({ ...form, questionText: e.target.value })\r\n//                   }\r\n//                   placeholder=\"Enter your theory question here...\"\r\n//                 />\r\n//               </div>\r\n\r\n//               <div className=\"mb-3\">\r\n//                 <label className=\"form-label\">Model Answer</label>\r\n//                 <textarea\r\n//                   className=\"form-control\"\r\n//                   rows={4}\r\n//                   value={form.answerText}\r\n//                   onChange={(e) =>\r\n//                     setForm({ ...form, answerText: e.target.value })\r\n//                   }\r\n//                   placeholder=\"Enter model answer for theory question\"\r\n//                 />\r\n//               </div>\r\n\r\n//               <div className=\"d-flex gap-2\">\r\n//                 <button\r\n//                   className=\"btn btn-success\"\r\n//                   type=\"submit\"\r\n//                   disabled={loading}\r\n//                 >\r\n//                   {loading\r\n//                     ? \"Saving...\"\r\n//                     : editingId\r\n//                     ? \"Update Question\"\r\n//                     : \"Add Question\"}\r\n//                 </button>\r\n//                 <button\r\n//                   type=\"button\"\r\n//                   className=\"btn btn-secondary\"\r\n//                   onClick={() => {\r\n//                     setForm({ questionText: \"\", answerText: \"\" });\r\n//                     setEditingId(null);\r\n//                   }}\r\n//                 >\r\n//                   Clear\r\n//                 </button>\r\n//               </div>\r\n//             </form>\r\n\r\n//             <hr className=\"my-4\" />\r\n\r\n//             {/* ✅ Upload Section */}\r\n//             <div className=\"upload-section\">\r\n//               <label className=\"form-label\">Upload File (.txt / .docx)</label>\r\n//               <input\r\n//                 type=\"file\"\r\n//                 className=\"form-control\"\r\n//                 accept=\".txt,.docx\"\r\n//                 onChange={(e) => setFile(e.target.files[0])}\r\n//               />\r\n//               <div className=\"mt-2\">\r\n//                 <button className=\"btn btn-primary\" onClick={handleUpload}>\r\n//                   Upload\r\n//                 </button>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n\r\n//           {/* ✅ Available Questions */}\r\n//           <div className=\"card available-questions mt-4\">\r\n//             <h5>Available Theory Questions</h5>\r\n\r\n//             {Array.isArray(questions) &&\r\n//               questions.length === 0 && (\r\n//                 <div className=\"text-muted\">No theory questions yet</div>\r\n//               )}\r\n\r\n//             {Array.isArray(questions) &&\r\n//               questions.map((q, idx) => (\r\n//                 <div key={q._id} className=\"question-item\">\r\n//                   <strong>Q{idx + 1}:</strong> {q.questionText}\r\n//                   {q.correctAnswer && (\r\n//                     <div className=\"small text-success\">\r\n//                       <b>Model Answer:</b> {q.correctAnswer}\r\n//                     </div>\r\n//                   )}\r\n//                   <div className=\"action-buttons\">\r\n//                     <button\r\n//                       className=\"btn btn-sm btn-warning\"\r\n//                       onClick={() => handleEdit(q)}\r\n//                     >\r\n//                       Edit\r\n//                     </button>\r\n//                     <button\r\n//                       className=\"btn btn-sm btn-danger\"\r\n//                       onClick={() => handleDelete(q._id)}\r\n//                     >\r\n//                       Delete\r\n//                     </button>\r\n//                   </div>\r\n//                 </div>\r\n//               ))}\r\n//           </div>\r\n//         </div>\r\n//       ) : (\r\n//         // ✅ Test Results Tab\r\n//         <div className=\"tab-content\">\r\n//           <div className=\"card results-section\">\r\n//             <h5>Candidate Test Results</h5>\r\n//             {loadingResults ? (\r\n//               <div>Loading test results...</div>\r\n//             ) : results.length === 0 ? (\r\n//               <div className=\"text-muted\">No test results yet</div>\r\n//             ) : (\r\n//               <table className=\"results-table\">\r\n//                 <thead>\r\n//                   <tr>\r\n//                     <th>Name</th>\r\n//                     <th>Email</th>\r\n//                     <th>Total</th>\r\n//                     <th>Correct</th>\r\n//                     <th>Score %</th>\r\n//                     <th>Status</th>\r\n//                     <th>Submitted At</th>\r\n//                     <th>Action</th>\r\n//                   </tr>\r\n//                 </thead>\r\n//                 <tbody>\r\n//                   {results.map((res, idx) => (\r\n//                     <tr key={idx}>\r\n//                       <td>{res.name}</td>\r\n//                       <td>{res.email}</td>\r\n//                       <td>{res.totalQuestions}</td>\r\n//                       <td>{res.correctAnswers}</td>\r\n//                       <td>{res.scorePercent}%</td>\r\n//                       <td>\r\n//                         <span\r\n//                           style={{\r\n//                             color:\r\n//                               res.status === \"Validated\" ? \"green\" : \"orange\",\r\n//                             fontWeight: 600,\r\n//                           }}\r\n//                         >\r\n//                           {res.status || \"Validation Pending\"}\r\n//                         </span>\r\n//                       </td>\r\n//                       <td>{new Date(res.submittedAt).toLocaleString()}</td>\r\n//                       <td>\r\n//                         <button\r\n//                           className=\"btn btn-sm btn-primary\"\r\n//                           onClick={() => handleViewValidation(res._id)}\r\n//                         >\r\n//                           View / Validate\r\n//                         </button>\r\n//                       </td>\r\n//                     </tr>\r\n//                   ))}\r\n//                 </tbody>\r\n//               </table>\r\n//             )}\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n// // import React, { useEffect, useState } from \"react\";\r\n// // import API from \"../services/api\";\r\n// // import { useNavigate } from \"react-router-dom\";\r\n// // import \"../styles/AdminDashboard.css\";\r\n\r\n// // export default function AdminDashboard() {\r\n// //   const navigate = useNavigate();\r\n// //   const [questions, setQuestions] = useState([]);\r\n// //   const [results, setResults] = useState([]);\r\n// //   const [activeTab, setActiveTab] = useState(\"questions\");\r\n// //   const [form, setForm] = useState({\r\n// //     questionText: \"\",\r\n// //     answerText: \"\",\r\n// //   });\r\n// //   const [file, setFile] = useState(null);\r\n// //   const [loading, setLoading] = useState(false);\r\n// //   const [loadingResults, setLoadingResults] = useState(false);\r\n// //   const [editingId, setEditingId] = useState(null);\r\n\r\n// //   // 🧩 Test control state\r\n// //   const [testControl, setTestControl] = useState({\r\n// //     isActive: false,\r\n// //     questionLimit: 10,\r\n// //     timeLimit: 30,\r\n// //   });\r\n\r\n// //   // 🟢 Check admin login\r\n// //   useEffect(() => {\r\n// //     const token = localStorage.getItem(\"adminToken\");\r\n// //     if (!token) navigate(\"/admin/login\");\r\n// //   }, [navigate]);\r\n\r\n// //   // 🟢 Initial fetch\r\n// //   useEffect(() => {\r\n// //     fetchQuestions();\r\n// //     fetchResults();\r\n// //     fetchTestControl();\r\n// //   }, []);\r\n\r\n// //   // ✅ Fetch Test Control\r\n// //   const fetchTestControl = async () => {\r\n// //     try {\r\n// //       const res = await API.testcontrol.get();\r\n// //       if (res.data) setTestControl(res.data);\r\n// //     } catch (err) {\r\n// //       console.error(\"Error fetching test control:\", err);\r\n// //     }\r\n// //   };\r\n\r\n// //   // ✅ Update Test Control\r\n// //   const updateTestControl = async (updates) => {\r\n// //     try {\r\n// //       const res = await API.testcontrol.update(updates);\r\n// //       if (res.data) setTestControl(res.data);\r\n// //       alert(\"✅ Test control updated successfully!\");\r\n// //     } catch (err) {\r\n// //       console.error(\"❌ Failed to update test control:\", err);\r\n// //       alert(\"❌ Failed to update test control.\");\r\n// //     }\r\n// //   };\r\n\r\n// //   // ✅ Fetch Questions\r\n// //   const fetchQuestions = async () => {\r\n// //     try {\r\n// //       const res = await API.questions.getAll();\r\n// //       const data = Array.isArray(res.data)\r\n// //         ? res.data\r\n// //         : res.data.questions || [];\r\n// //       setQuestions(data);\r\n// //     } catch (err) {\r\n// //       console.error(err);\r\n// //       alert(\"❌ Failed to load questions.\");\r\n// //     }\r\n// //   };\r\n\r\n// //   // ✅ Fetch Results\r\n// //   const fetchResults = async () => {\r\n// //     setLoadingResults(true);\r\n// //     try {\r\n// //       const res = await API.tests.getAll();\r\n// //       setResults(res.data || []);\r\n// //     } catch (err) {\r\n// //       console.error(err);\r\n// //       alert(\"❌ Failed to load test results.\");\r\n// //     } finally {\r\n// //       setLoadingResults(false);\r\n// //     }\r\n// //   };\r\n// //   const [waitingCount, setWaitingCount] = useState(0);\r\n\r\n// // const fetchWaitingCount = async () => {\r\n// //   try {\r\n// //     const res = await API.get(\"/waiting-users/count\");\r\n// //     setWaitingCount(res.data.count);\r\n// //   } catch (err) {\r\n// //     console.error(\"Error fetching waiting users count:\", err);\r\n// //   }\r\n// // };\r\n\r\n// // // Fetch waiting count once when page loads\r\n// // useEffect(() => {\r\n// //   fetchWaitingCount();\r\n// //   const interval = setInterval(fetchWaitingCount, 10000); // refresh every 10s\r\n// //   return () => clearInterval(interval);\r\n// // }, []);\r\n\r\n// //   // ✅ Add / Update Question\r\n// //   const handleAddOrUpdate = async (e) => {\r\n// //     e.preventDefault();\r\n\r\n// //     if (!form.questionText.trim()) {\r\n// //       return alert(\"Please enter question text.\");\r\n// //     }\r\n\r\n// //     setLoading(true);\r\n// //     try {\r\n// //       const payload = {\r\n// //         questionType: \"Theory\",\r\n// //         questionText: form.questionText,\r\n// //         correctAnswer: form.answerText,\r\n// //       };\r\n\r\n// //       if (editingId) {\r\n// //         await API.questions.update(editingId, payload);\r\n// //         alert(\"✅ Question updated successfully!\");\r\n// //       } else {\r\n// //         await API.questions.create(payload);\r\n// //         alert(\"✅ Question added successfully!\");\r\n// //       }\r\n\r\n// //       setForm({ questionText: \"\", answerText: \"\" });\r\n// //       setEditingId(null);\r\n// //       await fetchQuestions();\r\n// //     } catch (err) {\r\n// //       console.error(err);\r\n// //       alert(err.response?.data?.error || \"❌ Operation failed.\");\r\n// //     } finally {\r\n// //       setLoading(false);\r\n// //     }\r\n// //   };\r\n\r\n// //   // ✅ Delete Question\r\n// //   const handleDelete = async (id) => {\r\n// //     if (!window.confirm(\"Are you sure you want to delete this question?\")) return;\r\n// //     try {\r\n// //       await API.questions.delete(id);\r\n// //       alert(\"🗑️ Question deleted successfully!\");\r\n// //       await fetchQuestions();\r\n// //     } catch (err) {\r\n// //       console.error(err);\r\n// //       alert(\"❌ Failed to delete question.\");\r\n// //     }\r\n// //   };\r\n\r\n// //   // ✅ Edit Question\r\n// //   const handleEdit = (q) => {\r\n// //     setEditingId(q._id);\r\n// //     setForm({\r\n// //       questionText: q.questionText,\r\n// //       answerText: q.correctAnswer || \"\",\r\n// //     });\r\n// //     window.scrollTo({ top: 0, behavior: \"smooth\" });\r\n// //   };\r\n\r\n// //   // ✅ Upload File\r\n// //   const handleUpload = async () => {\r\n// //     if (!file) return alert(\"Please select a file to upload.\");\r\n// //     const fd = new FormData();\r\n// //     fd.append(\"file\", file);\r\n\r\n// //     try {\r\n// //       const res = await API.questions.uploadDoc(fd);\r\n// //       alert(res.data.message || \"✅ File uploaded successfully!\");\r\n// //       await fetchQuestions();\r\n// //     } catch (err) {\r\n// //       console.error(err);\r\n// //       alert(err.response?.data?.error || \"❌ File upload failed.\");\r\n// //     }\r\n// //   };\r\n\r\n// //   const handleLogout = () => {\r\n// //     localStorage.removeItem(\"adminToken\");\r\n// //     navigate(\"/admin/login\");\r\n// //   };\r\n\r\n// //   const handleViewValidation = (id) => {\r\n// //     navigate(`/admin/result/${id}`);\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div className=\"admin-dashboard\">\r\n// //       {/* Header */}\r\n// //       <div className=\"admin-header\">\r\n// //         <h2>Admin Dashboard</h2>\r\n// //         <button className=\"logout-btn\" onClick={handleLogout}>\r\n// //           Logout\r\n// //         </button>\r\n// //       </div>\r\n\r\n// //       {/* Tabs */}\r\n// //       <div className=\"tab-buttons\">\r\n// //         <button\r\n// //           className={`tab-btn ${activeTab === \"questions\" ? \"active\" : \"\"}`}\r\n// //           onClick={() => setActiveTab(\"questions\")}\r\n// //         >\r\n// //           🧩 Questions\r\n// //         </button>\r\n// //         <button\r\n// //           className={`tab-btn ${activeTab === \"results\" ? \"active\" : \"\"}`}\r\n// //           onClick={() => setActiveTab(\"results\")}\r\n// //         >\r\n// //           📊 Test Results\r\n// //         </button>\r\n// //       </div>\r\n\r\n// //       {activeTab === \"questions\" ? (\r\n// //         <div className=\"tab-content\">\r\n// //           {/* ✅ Test Control Panel */}\r\n// //           <div className=\"card form-section\">\r\n// //             <h5>🕹️ Test Control Panel</h5>\r\n\r\n// //             <div className=\"mb-3\">\r\n// //               <label>Number of Questions</label>\r\n// //               <input\r\n// //                 type=\"number\"\r\n// //                 className=\"form-control\"\r\n// //                 value={testControl.questionLimit}\r\n// //                 onChange={(e) =>\r\n// //                   setTestControl({\r\n// //                     ...testControl,\r\n// //                     questionLimit: e.target.value,\r\n// //                   })\r\n// //                 }\r\n// //               />\r\n// //             </div>\r\n\r\n// //                   <div className=\"card form-section mt-4\">\r\n// //         <h5>🧍‍♂️ Waiting Users</h5>\r\n// //         <p className=\"text-muted\">\r\n// //           Number of candidates waiting to start the test:\r\n// //         </p>\r\n// //         <h3 className=\"fw-bold text-primary\">{waitingCount}</h3>\r\n// //       </div>\r\n\r\n\r\n// //             <div className=\"mb-3\">\r\n// //               <label>Time Limit (minutes)</label>\r\n// //               <input\r\n// //                 type=\"number\"\r\n// //                 className=\"form-control\"\r\n// //                 value={testControl.timeLimit}\r\n// //                 onChange={(e) =>\r\n// //                   setTestControl({\r\n// //                     ...testControl,\r\n// //                     timeLimit: e.target.value,\r\n// //                   })\r\n// //                 }\r\n// //               />\r\n// //             </div>\r\n\r\n// //             <div className=\"mb-3\">\r\n// //               <label>Status: </label>\r\n// //               <span\r\n// //                 className={`ms-2 fw-bold ${\r\n// //                   testControl.isActive ? \"text-success\" : \"text-danger\"\r\n// //                 }`}\r\n// //               >\r\n// //                 {testControl.isActive ? \"Active\" : \"Inactive\"}\r\n// //               </span>\r\n// //             </div>\r\n\r\n// //             <div className=\"d-flex gap-2\">\r\n// //               <button\r\n// //                 className=\"btn btn-success\"\r\n// //                 onClick={() =>\r\n// //                   updateTestControl({\r\n// //                     isActive: true,\r\n// //                     questionLimit: testControl.questionLimit,\r\n// //                     timeLimit: testControl.timeLimit,\r\n// //                   })\r\n// //                 }\r\n// //               >\r\n// //                 ▶️ Start Test\r\n// //               </button>\r\n// //               <button\r\n// //                 className=\"btn btn-danger\"\r\n// //                 onClick={() =>\r\n// //                   updateTestControl({\r\n// //                     isActive: false,\r\n// //                   })\r\n// //                 }\r\n// //               >\r\n// //                 ⏹️ Stop Test\r\n// //               </button>\r\n// //             </div>\r\n// //           </div>\r\n\r\n// //           {/* ✅ Question Form */}\r\n// //           <div className=\"card form-section mt-4\">\r\n// //             <h5>\r\n// //               {editingId ? \"✏️ Edit Theory Question\" : \"➕ Add / Upload Questions\"}\r\n// //             </h5>\r\n\r\n// //             <form onSubmit={handleAddOrUpdate}>\r\n// //               <div className=\"mb-3\">\r\n// //                 <label className=\"form-label\">Question Text</label>\r\n// //                 <textarea\r\n// //                   className=\"form-control\"\r\n// //                   rows={3}\r\n// //                   value={form.questionText}\r\n// //                   onChange={(e) =>\r\n// //                     setForm({ ...form, questionText: e.target.value })\r\n// //                   }\r\n// //                   placeholder=\"Enter your theory question here...\"\r\n// //                 />\r\n// //               </div>\r\n\r\n// //               <div className=\"mb-3\">\r\n// //                 <label className=\"form-label\">Model Answer</label>\r\n// //                 <textarea\r\n// //                   className=\"form-control\"\r\n// //                   rows={4}\r\n// //                   value={form.answerText}\r\n// //                   onChange={(e) =>\r\n// //                     setForm({ ...form, answerText: e.target.value })\r\n// //                   }\r\n// //                   placeholder=\"Enter model answer for theory question\"\r\n// //                 />\r\n// //               </div>\r\n\r\n// //               <div className=\"d-flex gap-2\">\r\n// //                 <button\r\n// //                   className=\"btn btn-success\"\r\n// //                   type=\"submit\"\r\n// //                   disabled={loading}\r\n// //                 >\r\n// //                   {loading\r\n// //                     ? \"Saving...\"\r\n// //                     : editingId\r\n// //                     ? \"Update Question\"\r\n// //                     : \"Add Question\"}\r\n// //                 </button>\r\n// //                 <button\r\n// //                   type=\"button\"\r\n// //                   className=\"btn btn-secondary\"\r\n// //                   onClick={() => {\r\n// //                     setForm({ questionText: \"\", answerText: \"\" });\r\n// //                     setEditingId(null);\r\n// //                   }}\r\n// //                 >\r\n// //                   Clear\r\n// //                 </button>\r\n// //               </div>\r\n// //             </form>\r\n\r\n// //             <hr className=\"my-4\" />\r\n\r\n// //             {/* ✅ Upload Section */}\r\n// //             <div className=\"upload-section\">\r\n// //               <label className=\"form-label\">Upload File (.txt / .docx)</label>\r\n// //               <input\r\n// //                 type=\"file\"\r\n// //                 className=\"form-control\"\r\n// //                 accept=\".txt,.docx\"\r\n// //                 onChange={(e) => setFile(e.target.files[0])}\r\n// //               />\r\n// //               <div className=\"mt-2\">\r\n// //                 <button className=\"btn btn-primary\" onClick={handleUpload}>\r\n// //                   Upload\r\n// //                 </button>\r\n// //               </div>\r\n// //             </div>\r\n// //           </div>\r\n\r\n// //           {/* ✅ Available Questions */}\r\n// //           <div className=\"card available-questions mt-4\">\r\n// //             <h5>Available Theory Questions</h5>\r\n\r\n// //             {Array.isArray(questions) &&\r\n// //               questions.length === 0 && (\r\n// //                 <div className=\"text-muted\">No theory questions yet</div>\r\n// //               )}\r\n\r\n// //             {Array.isArray(questions) &&\r\n// //               questions.map((q, idx) => (\r\n// //                 <div key={q._id} className=\"question-item\">\r\n// //                   <strong>Q{idx + 1}:</strong> {q.questionText}\r\n// //                   {q.correctAnswer && (\r\n// //                     <div className=\"small text-success\">\r\n// //                       <b>Model Answer:</b> {q.correctAnswer}\r\n// //                     </div>\r\n// //                   )}\r\n// //                   <div className=\"action-buttons\">\r\n// //                     <button\r\n// //                       className=\"btn btn-sm btn-warning\"\r\n// //                       onClick={() => handleEdit(q)}\r\n// //                     >\r\n// //                       Edit\r\n// //                     </button>\r\n// //                     <button\r\n// //                       className=\"btn btn-sm btn-danger\"\r\n// //                       onClick={() => handleDelete(q._id)}\r\n// //                     >\r\n// //                       Delete\r\n// //                     </button>\r\n// //                   </div>\r\n// //                 </div>\r\n// //               ))}\r\n// //           </div>\r\n// //         </div>\r\n// //       ) : (\r\n// //         // ✅ Test Results Tab\r\n// //         <div className=\"tab-content\">\r\n// //           <div className=\"card results-section\">\r\n// //             <h5>Candidate Test Results</h5>\r\n// //             {loadingResults ? (\r\n// //               <div>Loading test results...</div>\r\n// //             ) : results.length === 0 ? (\r\n// //               <div className=\"text-muted\">No test results yet</div>\r\n// //             ) : (\r\n// //               <table className=\"results-table\">\r\n// //                 <thead>\r\n// //                   <tr>\r\n// //                     <th>Name</th>\r\n// //                     <th>Email</th>\r\n// //                     <th>Total</th>\r\n// //                     <th>Correct</th>\r\n// //                     <th>Score %</th>\r\n// //                     <th>Status</th>\r\n// //                     <th>Submitted At</th>\r\n// //                     <th>Action</th>\r\n// //                   </tr>\r\n// //                 </thead>\r\n// //                 <tbody>\r\n// //                   {results.map((res, idx) => (\r\n// //                     <tr key={idx}>\r\n// //                       <td>{res.name}</td>\r\n// //                       <td>{res.email}</td>\r\n// //                       <td>{res.totalQuestions}</td>\r\n// //                       <td>{res.correctAnswers}</td>\r\n// //                       <td>{res.scorePercent}%</td>\r\n// //                       <td>\r\n// //                         <span\r\n// //                           style={{\r\n// //                             color:\r\n// //                               res.status === \"Validated\" ? \"green\" : \"orange\",\r\n// //                             fontWeight: 600,\r\n// //                           }}\r\n// //                         >\r\n// //                           {res.status || \"Validation Pending\"}\r\n// //                         </span>\r\n// //                       </td>\r\n// //                       <td>{new Date(res.submittedAt).toLocaleString()}</td>\r\n// //                       <td>\r\n// //                         <button\r\n// //                           className=\"btn btn-sm btn-primary\"\r\n// //                           onClick={() => handleViewValidation(res._id)}\r\n// //                         >\r\n// //                           View / Validate\r\n// //                         </button>\r\n// //                       </td>\r\n// //                     </tr>\r\n// //                   ))}\r\n// //                 </tbody>\r\n// //               </table>\r\n// //             )}\r\n// //           </div>\r\n// //         </div>\r\n// //       )}\r\n// //     </div>\r\n// //   );\r\n// // }\r\n\r\n// // // import React, { useEffect, useState } from \"react\";\r\n// // // import API from \"../services/api\";\r\n// // // import { useNavigate } from \"react-router-dom\";\r\n// // // import \"../styles/AdminDashboard.css\";\r\n\r\n// // // export default function AdminDashboard() {\r\n// // //   const navigate = useNavigate();\r\n// // //   const [questions, setQuestions] = useState([]);\r\n// // //   const [results, setResults] = useState([]);\r\n// // //   const [activeTab, setActiveTab] = useState(\"questions\");\r\n// // //   const [form, setForm] = useState({\r\n// // //     questionText: \"\",\r\n// // //     answerText: \"\",\r\n// // //   });\r\n// // //   const [file, setFile] = useState(null);\r\n// // //   const [loading, setLoading] = useState(false);\r\n// // //   const [loadingResults, setLoadingResults] = useState(false);\r\n// // //   const [editingId, setEditingId] = useState(null);\r\n\r\n// // //   // 🧠 Test Control\r\n// // //   const [control, setControl] = useState({\r\n// // //     isActive: false,\r\n// // //     questionLimit: 10,\r\n// // //     timeLimit: 10,\r\n// // //   });\r\n\r\n// // //   // 🟢 Check admin login\r\n// // //   useEffect(() => {\r\n// // //     const token = localStorage.getItem(\"adminToken\");\r\n// // //     if (!token) navigate(\"/admin/login\");\r\n// // //   }, [navigate]);\r\n\r\n// // //   // 🟢 Initial fetch\r\n// // //   useEffect(() => {\r\n// // //     fetchControl();\r\n// // //     fetchQuestions();\r\n// // //     fetchResults();\r\n// // //   }, []);\r\n\r\n// // //   const fetchControl = async () => {\r\n// // //     try {\r\n// // //       const res = await API.get(\"/testcontrol\");\r\n// // //       if (res.data) setControl(res.data);\r\n// // //     } catch (err) {\r\n// // //       console.error(err);\r\n// // //     }\r\n// // //   };\r\n\r\n// // //   const updateControl = async () => {\r\n// // //     try {\r\n// // //       await API.post(\"/testcontrol/update\", control, {\r\n// // //         headers: { Authorization: localStorage.getItem(\"adminToken\") },\r\n// // //       });\r\n// // //       alert(\"✅ Test control updated successfully!\");\r\n// // //       await fetchControl();\r\n// // //     } catch (err) {\r\n// // //       console.error(err);\r\n// // //       alert(\"❌ Failed to update test control.\");\r\n// // //     }\r\n// // //   };\r\n\r\n// // //  const fetchQuestions = async () => {\r\n// // //   try {\r\n// // //     const res = await API.questions.getAll();\r\n// // //     // Handle both array or object response\r\n// // //     const data = Array.isArray(res.data)\r\n// // //       ? res.data\r\n// // //       : res.data.questions || [];\r\n// // //     setQuestions(data);\r\n// // //   } catch (err) {\r\n// // //     console.error(err);\r\n// // //     alert(\"❌ Failed to load questions.\");\r\n// // //   }\r\n// // // };\r\n\r\n// // //   const fetchResults = async () => {\r\n// // //     setLoadingResults(true);\r\n// // //     try {\r\n// // //       const res = await API.tests.getAll();\r\n// // //       setResults(res.data || []);\r\n// // //     } catch (err) {\r\n// // //       console.error(err);\r\n// // //       alert(\"❌ Failed to load test results.\");\r\n// // //     } finally {\r\n// // //       setLoadingResults(false);\r\n// // //     }\r\n// // //   };\r\n\r\n// // //   // 🟢 Add or Update Question (Theory only)\r\n// // //   const handleAddOrUpdate = async (e) => {\r\n// // //     e.preventDefault();\r\n// // //     if (!form.questionText.trim()) {\r\n// // //       return alert(\"Please enter question text.\");\r\n// // //     }\r\n\r\n// // //     setLoading(true);\r\n// // //     try {\r\n// // //       const payload = {\r\n// // //         questionType: \"Theory\",\r\n// // //         questionText: form.questionText,\r\n// // //         correctAnswer: form.answerText,\r\n// // //       };\r\n\r\n// // //       if (editingId) {\r\n// // //         await API.questions.update(editingId, payload);\r\n// // //         alert(\"✅ Question updated successfully!\");\r\n// // //       } else {\r\n// // //         await API.questions.create(payload);\r\n// // //         alert(\"✅ Question added successfully!\");\r\n// // //       }\r\n\r\n// // //       setForm({ questionText: \"\", answerText: \"\" });\r\n// // //       setEditingId(null);\r\n// // //       await fetchQuestions();\r\n// // //     } catch (err) {\r\n// // //       console.error(err);\r\n// // //       alert(err.response?.data?.error || \"❌ Operation failed.\");\r\n// // //     } finally {\r\n// // //       setLoading(false);\r\n// // //     }\r\n// // //   };\r\n\r\n// // //   // 🟢 Delete Question\r\n// // //   const handleDelete = async (id) => {\r\n// // //     if (!window.confirm(\"Are you sure you want to delete this question?\")) return;\r\n// // //     try {\r\n// // //       await API.questions.delete(id);\r\n// // //       alert(\"🗑️ Question deleted successfully!\");\r\n// // //       await fetchQuestions();\r\n// // //     } catch (err) {\r\n// // //       console.error(err);\r\n// // //       alert(\"❌ Failed to delete question.\");\r\n// // //     }\r\n// // //   };\r\n\r\n// // //   // 🟢 Edit Question\r\n// // //   const handleEdit = (q) => {\r\n// // //     setEditingId(q._id);\r\n// // //     setForm({\r\n// // //       questionText: q.questionText,\r\n// // //       answerText: q.correctAnswer || \"\",\r\n// // //     });\r\n// // //     window.scrollTo({ top: 0, behavior: \"smooth\" });\r\n// // //   };\r\n\r\n// // //   // 🟢 Upload File (TXT or DOCX)\r\n// // //   const handleUpload = async () => {\r\n// // //     if (!file) return alert(\"Please select a file to upload.\");\r\n// // //     const fd = new FormData();\r\n// // //     fd.append(\"file\", file);\r\n\r\n// // //     try {\r\n// // //       const res = await API.questions.uploadDoc(fd);\r\n// // //       alert(res.data.message || \"✅ File uploaded successfully!\");\r\n// // //       await fetchQuestions();\r\n// // //     } catch (err) {\r\n// // //       console.error(err);\r\n// // //       alert(err.response?.data?.error || \"❌ File upload failed.\");\r\n// // //     }\r\n// // //   };\r\n\r\n// // //   const handleLogout = () => {\r\n// // //     localStorage.removeItem(\"adminToken\");\r\n// // //     navigate(\"/admin/login\");\r\n// // //   };\r\n\r\n// // //   const handleViewValidation = (id) => {\r\n// // //     navigate(`/admin/result/${id}`);\r\n// // //   };\r\n\r\n// // //   return (\r\n// // //     <div className=\"admin-dashboard\">\r\n// // //       {/* 🔧 Test Control Panel */}\r\n// // //       <div className=\"card control-panel\">\r\n// // //         <h4>🕹️ Test Control Panel</h4>\r\n// // //         <div className=\"row\">\r\n// // //           <div className=\"col\">\r\n// // //             <label>Number of Questions</label>\r\n// // //             <input\r\n// // //               type=\"number\"\r\n// // //               className=\"form-control\"\r\n// // //               value={control.questionLimit}\r\n// // //               onChange={(e) =>\r\n// // //                 setControl({ ...control, questionLimit: e.target.value })\r\n// // //               }\r\n// // //             />\r\n// // //           </div>\r\n// // //           <div className=\"col\">\r\n// // //             <label>Time Limit (minutes)</label>\r\n// // //             <input\r\n// // //               type=\"number\"\r\n// // //               className=\"form-control\"\r\n// // //               value={control.timeLimit}\r\n// // //               onChange={(e) =>\r\n// // //                 setControl({ ...control, timeLimit: e.target.value })\r\n// // //               }\r\n// // //             />\r\n// // //           </div>\r\n// // //           <div className=\"col\">\r\n// // //             <label>Status</label>\r\n// // //             <select\r\n// // //               className=\"form-select\"\r\n// // //               value={control.isActive ? \"true\" : \"false\"}\r\n// // //               onChange={(e) =>\r\n// // //                 setControl({ ...control, isActive: e.target.value === \"true\" })\r\n// // //               }\r\n// // //             >\r\n// // //               <option value=\"false\">Inactive</option>\r\n// // //               <option value=\"true\">Active</option>\r\n// // //             </select>\r\n// // //           </div>\r\n// // //         </div>\r\n// // //         <button onClick={updateControl} className=\"btn btn-primary mt-3\">\r\n// // //           Update Test Control\r\n// // //         </button>\r\n// // //       </div>\r\n\r\n// // //       {/* Tabs */}\r\n// // //       <div className=\"tab-buttons mt-4\">\r\n// // //         <button\r\n// // //           className={`tab-btn ${activeTab === \"questions\" ? \"active\" : \"\"}`}\r\n// // //           onClick={() => setActiveTab(\"questions\")}\r\n// // //         >\r\n// // //           🧩 Questions\r\n// // //         </button>\r\n// // //         <button\r\n// // //           className={`tab-btn ${activeTab === \"results\" ? \"active\" : \"\"}`}\r\n// // //           onClick={() => setActiveTab(\"results\")}\r\n// // //         >\r\n// // //           📊 Test Results\r\n// // //         </button>\r\n// // //       </div>\r\n\r\n// // //       {/* 🧩 THEORY QUESTIONS TAB */}\r\n// // //       {activeTab === \"questions\" ? (\r\n// // //         <div className=\"tab-content\">\r\n// // //           <div className=\"card form-section\">\r\n// // //             <h5>{editingId ? \"✏️ Edit Theory Question\" : \"➕ Add or Upload Theory Questions\"}</h5>\r\n\r\n// // //             <form onSubmit={handleAddOrUpdate}>\r\n// // //               <div className=\"mb-3\">\r\n// // //                 <label className=\"form-label\">Question Text</label>\r\n// // //                 <textarea\r\n// // //                   className=\"form-control\"\r\n// // //                   rows={3}\r\n// // //                   value={form.questionText}\r\n// // //                   onChange={(e) => setForm({ ...form, questionText: e.target.value })}\r\n// // //                   placeholder=\"Enter your theory question here...\"\r\n// // //                 />\r\n// // //               </div>\r\n\r\n// // //               <div className=\"mb-3\">\r\n// // //                 <label className=\"form-label\">Model Answer</label>\r\n// // //                 <textarea\r\n// // //                   className=\"form-control\"\r\n// // //                   rows={4}\r\n// // //                   value={form.answerText}\r\n// // //                   onChange={(e) => setForm({ ...form, answerText: e.target.value })}\r\n// // //                   placeholder=\"Enter model answer for theory question\"\r\n// // //                 />\r\n// // //               </div>\r\n\r\n// // //               <div className=\"d-flex gap-2\">\r\n// // //                 <button className=\"btn btn-success\" type=\"submit\" disabled={loading}>\r\n// // //                   {loading ? \"Saving...\" : editingId ? \"Update Question\" : \"Add Question\"}\r\n// // //                 </button>\r\n// // //                 <button\r\n// // //                   type=\"button\"\r\n// // //                   className=\"btn btn-secondary\"\r\n// // //                   onClick={() => {\r\n// // //                     setForm({ questionText: \"\", answerText: \"\" });\r\n// // //                     setEditingId(null);\r\n// // //                   }}\r\n// // //                 >\r\n// // //                   Clear\r\n// // //                 </button>\r\n// // //               </div>\r\n// // //             </form>\r\n\r\n// // //             <hr className=\"my-4\" />\r\n\r\n// // //             <div className=\"upload-section\">\r\n// // //               <label className=\"form-label\">Upload File (.txt or .docx)</label>\r\n// // //               <input\r\n// // //                 type=\"file\"\r\n// // //                 className=\"form-control\"\r\n// // //                 accept=\".txt,.docx\"\r\n// // //                 onChange={(e) => setFile(e.target.files[0])}\r\n// // //               />\r\n// // //               <div className=\"mt-2\">\r\n// // //                 <button className=\"btn btn-primary\" onClick={handleUpload}>\r\n// // //                   Upload\r\n// // //                 </button>\r\n// // //               </div>\r\n// // //             </div>\r\n// // //           </div>\r\n\r\n// // //           <div className=\"card available-questions\">\r\n// // //             <h5>Available Theory Questions</h5>\r\n\r\n// // //             {questions.filter((q) => q.questionType === \"Theory\").length === 0 && (\r\n// // //               <div className=\"text-muted\">No theory questions yet</div>\r\n// // //             )}\r\n\r\n// // //             {questions\r\n// // //               .filter((q) => q.questionType === \"Theory\")\r\n// // //               .map((q, idx) => (\r\n// // //                 <div key={q._id} className=\"question-item\">\r\n// // //                   <strong>Q{idx + 1}:</strong> {q.questionText}\r\n// // //                   {q.correctAnswer && (\r\n// // //                     <div className=\"small text-success\">\r\n// // //                       <b>Model Answer:</b> {q.correctAnswer}\r\n// // //                     </div>\r\n// // //                   )}\r\n// // //                   <div className=\"action-buttons\">\r\n// // //                     <button\r\n// // //                       className=\"btn btn-sm btn-warning\"\r\n// // //                       onClick={() => handleEdit(q)}\r\n// // //                     >\r\n// // //                       Edit\r\n// // //                     </button>\r\n// // //                     <button\r\n// // //                       className=\"btn btn-sm btn-danger\"\r\n// // //                       onClick={() => handleDelete(q._id)}\r\n// // //                     >\r\n// // //                       Delete\r\n// // //                     </button>\r\n// // //                   </div>\r\n// // //                 </div>\r\n// // //               ))}\r\n// // //           </div>\r\n// // //         </div>\r\n// // //       ) : (\r\n// // //         // 📊 TEST RESULTS TAB\r\n// // //         <div className=\"tab-content\">\r\n// // //           <div className=\"card results-section\">\r\n// // //             <h5>Candidate Test Results</h5>\r\n// // //             {loadingResults ? (\r\n// // //               <div>Loading test results...</div>\r\n// // //             ) : results.length === 0 ? (\r\n// // //               <div className=\"text-muted\">No test results yet</div>\r\n// // //             ) : (\r\n// // //               <table className=\"results-table\">\r\n// // //                 <thead>\r\n// // //                   <tr>\r\n// // //                     <th>Name</th>\r\n// // //                     <th>Email</th>\r\n// // //                     <th>Total</th>\r\n// // //                     <th>Correct</th>\r\n// // //                     <th>Score %</th>\r\n// // //                     <th>Status</th>\r\n// // //                     <th>Submitted At</th>\r\n// // //                     <th>Action</th>\r\n// // //                   </tr>\r\n// // //                 </thead>\r\n// // //                 <tbody>\r\n// // //                   {results.map((res, idx) => (\r\n// // //                     <tr key={idx}>\r\n// // //                       <td>{res.name}</td>\r\n// // //                       <td>{res.email}</td>\r\n// // //                       <td>{res.totalQuestions}</td>\r\n// // //                       <td>{res.correctAnswers}</td>\r\n// // //                       <td>{res.scorePercent}%</td>\r\n// // //                       <td>\r\n// // //                         <span\r\n// // //                           style={{\r\n// // //                             color: res.status === \"Validated\" ? \"green\" : \"orange\",\r\n// // //                             fontWeight: 600,\r\n// // //                           }}\r\n// // //                         >\r\n// // //                           {res.status || \"Validation Pending\"}\r\n// // //                         </span>\r\n// // //                       </td>\r\n// // //                       <td>{new Date(res.submittedAt).toLocaleString()}</td>\r\n// // //                       <td>\r\n// // //                         <button\r\n// // //                           className=\"btn btn-sm btn-primary\"\r\n// // //                           onClick={() => handleViewValidation(res._id)}\r\n// // //                         >\r\n// // //                           View / Validate\r\n// // //                         </button>\r\n// // //                       </td>\r\n// // //                     </tr>\r\n// // //                   ))}\r\n// // //                 </tbody>\r\n// // //               </table>\r\n// // //             )}\r\n// // //           </div>\r\n// // //         </div>\r\n// // //       )}\r\n// // //     </div>\r\n// // //   );\r\n// // // }\r\n\r\n// // // // import React, { useEffect, useState } from \"react\";\r\n// // // // import API from \"../services/api\";\r\n// // // // import { useNavigate } from \"react-router-dom\";\r\n// // // // import \"../styles/AdminDashboard.css\";\r\n\r\n// // // // export default function AdminDashboard() {\r\n// // // //   const navigate = useNavigate();\r\n// // // //   const [questions, setQuestions] = useState([]);\r\n// // // //   const [results, setResults] = useState([]);\r\n// // // //   const [activeTab, setActiveTab] = useState(\"questions\");\r\n// // // //   const [form, setForm] = useState({\r\n// // // //     questionText: \"\",\r\n// // // //     answerText: \"\", // admin-entered model answer for theory\r\n// // // //   });\r\n// // // //   const [file, setFile] = useState(null);\r\n// // // //   const [loading, setLoading] = useState(false);\r\n// // // //   const [loadingResults, setLoadingResults] = useState(false);\r\n// // // //   const [editingId, setEditingId] = useState(null);\r\n\r\n// // // //   // 🟢 Check admin login\r\n// // // //   useEffect(() => {\r\n// // // //     const token = localStorage.getItem(\"adminToken\");\r\n// // // //     if (!token) navigate(\"/admin/login\");\r\n// // // //   }, [navigate]);\r\n\r\n// // // //   // 🟢 Initial fetch\r\n// // // //   useEffect(() => {\r\n// // // //     fetchQuestions();\r\n// // // //     fetchResults();\r\n// // // //   }, []);\r\n\r\n// // // //   const fetchQuestions = async () => {\r\n// // // //     try {\r\n// // // //       const res = await API.questions.getAll();\r\n// // // //       setQuestions(res.data || []);\r\n// // // //     } catch (err) {\r\n// // // //       console.error(err);\r\n// // // //       alert(\"❌ Failed to load questions.\");\r\n// // // //     }\r\n// // // //   };\r\n\r\n// // // //   const fetchResults = async () => {\r\n// // // //     setLoadingResults(true);\r\n// // // //     try {\r\n// // // //       const res = await API.tests.getAll();\r\n// // // //       setResults(res.data || []);\r\n// // // //     } catch (err) {\r\n// // // //       console.error(err);\r\n// // // //       alert(\"❌ Failed to load test results.\");\r\n// // // //     } finally {\r\n// // // //       setLoadingResults(false);\r\n// // // //     }\r\n// // // //   };\r\n\r\n// // // //   // 🟢 Add or Update Question (Theory only)\r\n// // // //   const handleAddOrUpdate = async (e) => {\r\n// // // //     e.preventDefault();\r\n\r\n// // // //     if (!form.questionText.trim()) {\r\n// // // //       return alert(\"Please enter question text.\");\r\n// // // //     }\r\n\r\n// // // //     setLoading(true);\r\n// // // //     try {\r\n// // // //       const payload = {\r\n// // // //         questionType: \"Theory\",\r\n// // // //         questionText: form.questionText,\r\n// // // //         correctAnswer: form.answerText,\r\n// // // //       };\r\n// // // //       console.log(\"Submitting payload ->\", payload);\r\n\r\n// // // //       if (editingId) {\r\n// // // //         await API.questions.update(editingId, payload);\r\n// // // //         alert(\"✅ Question updated successfully!\");\r\n// // // //       } else {\r\n// // // //         await API.questions.create(payload);\r\n// // // //         alert(\"✅ Question added successfully!\");\r\n// // // //       }\r\n\r\n// // // //       setForm({ questionText: \"\", answerText: \"\" });\r\n// // // //       setEditingId(null);\r\n// // // //       await fetchQuestions();\r\n// // // //     } catch (err) {\r\n// // // //       console.error(err);\r\n// // // //       alert(err.response?.data?.error || \"❌ Operation failed.\");\r\n// // // //     } finally {\r\n// // // //       setLoading(false);\r\n// // // //     }\r\n// // // //   };\r\n\r\n// // // //   // 🟢 Delete Question\r\n// // // //   const handleDelete = async (id) => {\r\n// // // //     if (!window.confirm(\"Are you sure you want to delete this question?\")) return;\r\n// // // //     try {\r\n// // // //       await API.questions.delete(id);\r\n// // // //       alert(\"🗑️ Question deleted successfully!\");\r\n// // // //       await fetchQuestions();\r\n// // // //     } catch (err) {\r\n// // // //       console.error(err);\r\n// // // //       alert(\"❌ Failed to delete question.\");\r\n// // // //     }\r\n// // // //   };\r\n\r\n// // // //   // 🟢 Edit Question\r\n// // // //   const handleEdit = (q) => {\r\n// // // //     setEditingId(q._id);\r\n// // // //     setForm({\r\n// // // //       questionText: q.questionText,\r\n// // // //       answerText: q.correctAnswer || \"\",\r\n// // // //     });\r\n// // // //     window.scrollTo({ top: 0, behavior: \"smooth\" });\r\n// // // //   };\r\n\r\n// // // //   // 🟢 Upload File (TXT or DOCX for Theory)\r\n// // // //   const handleUpload = async () => {\r\n// // // //     if (!file) return alert(\"Please select a file to upload.\");\r\n// // // //     const fd = new FormData();\r\n// // // //     fd.append(\"file\", file);\r\n\r\n// // // //     try {\r\n// // // //       const res = await API.questions.uploadDoc(fd);\r\n// // // //       alert(res.data.message || \"✅ File uploaded successfully!\");\r\n// // // //       await fetchQuestions();\r\n// // // //     } catch (err) {\r\n// // // //       console.error(err);\r\n// // // //       alert(err.response?.data?.error || \"❌ File upload failed.\");\r\n// // // //     }\r\n// // // //   };\r\n\r\n// // // //   const handleLogout = () => {\r\n// // // //     localStorage.removeItem(\"adminToken\");\r\n// // // //     navigate(\"/admin/login\");\r\n// // // //   };\r\n\r\n// // // //   // 🟢 Navigate to validation page\r\n// // // //   const handleViewValidation = (id) => {\r\n// // // //     navigate(`/admin/result/${id}`);\r\n// // // //   };\r\n\r\n// // // //   return (\r\n// // // //     <div className=\"admin-dashboard\">\r\n// // // //       {/* Tabs */}\r\n// // // //       <div className=\"tab-buttons\">\r\n// // // //         <button\r\n// // // //           className={`tab-btn ${activeTab === \"questions\" ? \"active\" : \"\"}`}\r\n// // // //           onClick={() => setActiveTab(\"questions\")}\r\n// // // //         >\r\n// // // //           🧩 Questions\r\n// // // //         </button>\r\n// // // //         <button\r\n// // // //           className={`tab-btn ${activeTab === \"results\" ? \"active\" : \"\"}`}\r\n// // // //           onClick={() => setActiveTab(\"results\")}\r\n// // // //         >\r\n// // // //           📊 Test Results\r\n// // // //         </button>\r\n// // // //       </div>\r\n\r\n// // // //       {/* 🧩 THEORY QUESTIONS TAB */}\r\n// // // //       {activeTab === \"questions\" ? (\r\n// // // //         <div className=\"tab-content\">\r\n// // // //           <div className=\"card form-section\">\r\n// // // //             <h5>{editingId ? \"✏️ Edit Theory Question\" : \"➕ Add or Upload Theory Questions\"}</h5>\r\n\r\n// // // //             <form onSubmit={handleAddOrUpdate}>\r\n// // // //               <div className=\"mb-3\">\r\n// // // //                 <label className=\"form-label\">Question Text</label>\r\n// // // //                 <textarea\r\n// // // //                   className=\"form-control\"\r\n// // // //                   rows={3}\r\n// // // //                   value={form.questionText}\r\n// // // //                   onChange={(e) => setForm({ ...form, questionText: e.target.value })}\r\n// // // //                   placeholder=\"Enter your theory question here...\"\r\n// // // //                 />\r\n// // // //               </div>\r\n\r\n// // // //               <div className=\"mb-3\">\r\n// // // //                 <label className=\"form-label\">Model Answer</label>\r\n// // // //                 <textarea\r\n// // // //                   className=\"form-control\"\r\n// // // //                   rows={4}\r\n// // // //                   value={form.answerText}\r\n// // // //                   onChange={(e) => setForm({ ...form, answerText: e.target.value })}\r\n// // // //                   placeholder=\"Enter model answer for theory question\"\r\n// // // //                 />\r\n// // // //               </div>\r\n\r\n// // // //               <div className=\"d-flex gap-2\">\r\n// // // //                 <button className=\"btn btn-success\" type=\"submit\" disabled={loading}>\r\n// // // //                   {loading\r\n// // // //                     ? \"Saving...\"\r\n// // // //                     : editingId\r\n// // // //                     ? \"Update Question\"\r\n// // // //                     : \"Add Question\"}\r\n// // // //                 </button>\r\n// // // //                 <button\r\n// // // //                   type=\"button\"\r\n// // // //                   className=\"btn btn-secondary\"\r\n// // // //                   onClick={() => {\r\n// // // //                     setForm({ questionText: \"\", answerText: \"\" });\r\n// // // //                     setEditingId(null);\r\n// // // //                   }}\r\n// // // //                 >\r\n// // // //                   Clear\r\n// // // //                 </button>\r\n// // // //               </div>\r\n// // // //             </form>\r\n\r\n// // // //             <hr className=\"my-4\" />\r\n\r\n// // // //             {/* Upload Section */}\r\n// // // //             <div className=\"upload-section\">\r\n// // // //               <label className=\"form-label\">Upload File (.txt or .docx)</label>\r\n// // // //               <input\r\n// // // //                 type=\"file\"\r\n// // // //                 className=\"form-control\"\r\n// // // //                 accept=\".txt,.docx\"\r\n// // // //                 onChange={(e) => setFile(e.target.files[0])}\r\n// // // //               />\r\n// // // //               <div className=\"mt-2\">\r\n// // // //                 <button className=\"btn btn-primary\" onClick={handleUpload}>\r\n// // // //                   Upload\r\n// // // //                 </button>\r\n// // // //               </div>\r\n// // // //             </div>\r\n// // // //           </div>\r\n\r\n// // // //           {/* Display Theory Questions */}\r\n// // // //           <div className=\"card available-questions\">\r\n// // // //             <h5>Available Theory Questions</h5>\r\n\r\n// // // //             {questions.filter((q) => q.questionType === \"Theory\").length === 0 && (\r\n// // // //               <div className=\"text-muted\">No theory questions yet</div>\r\n// // // //             )}\r\n\r\n// // // //             {questions\r\n// // // //               .filter((q) => q.questionType === \"Theory\")\r\n// // // //               .map((q, idx) => (\r\n// // // //                 <div key={q._id} className=\"question-item\">\r\n// // // //                   <strong>Q{idx + 1}:</strong> {q.questionText}\r\n// // // //                   {q.correctAnswer && (\r\n// // // //                     <div className=\"small text-success\">\r\n// // // //                       <b>Model Answer:</b> {q.correctAnswer}\r\n// // // //                     </div>\r\n// // // //                   )}\r\n// // // //                   <div className=\"action-buttons\">\r\n// // // //                     <button\r\n// // // //                       className=\"btn btn-sm btn-warning\"\r\n// // // //                       onClick={() => handleEdit(q)}\r\n// // // //                     >\r\n// // // //                       Edit\r\n// // // //                     </button>\r\n// // // //                     <button\r\n// // // //                       className=\"btn btn-sm btn-danger\"\r\n// // // //                       onClick={() => handleDelete(q._id)}\r\n// // // //                     >\r\n// // // //                       Delete\r\n// // // //                     </button>\r\n// // // //                   </div>\r\n// // // //                 </div>\r\n// // // //               ))}\r\n// // // //           </div>\r\n// // // //         </div>\r\n// // // //       ) : (\r\n// // // //         // 📊 TEST RESULTS TAB\r\n// // // //         <div className=\"tab-content\">\r\n// // // //           <div className=\"card results-section\">\r\n// // // //             <h5>Candidate Test Results</h5>\r\n// // // //             {loadingResults ? (\r\n// // // //               <div>Loading test results...</div>\r\n// // // //             ) : results.length === 0 ? (\r\n// // // //               <div className=\"text-muted\">No test results yet</div>\r\n// // // //             ) : (\r\n// // // //               <table className=\"results-table\">\r\n// // // //                 <thead>\r\n// // // //                   <tr>\r\n// // // //                     <th>Name</th>\r\n// // // //                     <th>Email</th>\r\n// // // //                     <th>Total</th>\r\n// // // //                     <th>Correct</th>\r\n// // // //                     <th>Score %</th>\r\n// // // //                     <th>Status</th>\r\n// // // //                     <th>Submitted At</th>\r\n// // // //                     <th>Action</th>\r\n// // // //                   </tr>\r\n// // // //                 </thead>\r\n// // // //                 <tbody>\r\n// // // //                   {results.map((res, idx) => (\r\n// // // //                     <tr key={idx}>\r\n// // // //                       <td>{res.name}</td>\r\n// // // //                       <td>{res.email}</td>\r\n// // // //                       <td>{res.totalQuestions}</td>\r\n// // // //                       <td>{res.correctAnswers}</td>\r\n// // // //                       <td>{res.scorePercent}%</td>\r\n// // // //                       <td>\r\n// // // //                         <span\r\n// // // //                           style={{\r\n// // // //                             color:\r\n// // // //                               res.status === \"Validated\" ? \"green\" : \"orange\",\r\n// // // //                             fontWeight: 600,\r\n// // // //                           }}\r\n// // // //                         >\r\n// // // //                           {res.status || \"Validation Pending\"}\r\n// // // //                         </span>\r\n// // // //                       </td>\r\n// // // //                       <td>{new Date(res.submittedAt).toLocaleString()}</td>\r\n// // // //                       <td>\r\n// // // //                         <button\r\n// // // //                           className=\"btn btn-sm btn-primary\"\r\n// // // //                           onClick={() => handleViewValidation(res._id)}\r\n// // // //                         >\r\n// // // //                           View / Validate\r\n// // // //                         </button>\r\n// // // //                       </td>\r\n// // // //                     </tr>\r\n// // // //                   ))}\r\n// // // //                 </tbody>\r\n// // // //               </table>\r\n// // // //             )}\r\n// // // //           </div>\r\n// // // //         </div>\r\n// // // //       )}\r\n// // // //     </div>\r\n// // // //   );\r\n// // // // }\r\n\r\n// // // // // import React, { useEffect, useState } from \"react\";\r\n// // // // // import API from \"../services/api\";\r\n// // // // // import { useNavigate } from \"react-router-dom\";\r\n// // // // // import \"../styles/AdminDashboard.css\";\r\n\r\n// // // // // export default function AdminDashboard() {\r\n// // // // //   const navigate = useNavigate();\r\n// // // // //   const [questions, setQuestions] = useState([]);\r\n// // // // //   const [results, setResults] = useState([]);\r\n// // // // //   const [activeTab, setActiveTab] = useState(\"questions\");\r\n// // // // //   const [form, setForm] = useState({\r\n// // // // //     questionText: \"\",\r\n// // // // //     optionsText: \"\",\r\n// // // // //     correctAnswer: \"\",\r\n// // // // //     answerText: \"\", // admin-entered model answer for theory\r\n// // // // //   });\r\n// // // // //   const [questionType, setQuestionType] = useState(\"MCQ\");\r\n// // // // //   const [file, setFile] = useState(null);\r\n// // // // //   const [loading, setLoading] = useState(false);\r\n// // // // //   const [loadingResults, setLoadingResults] = useState(false);\r\n// // // // //   const [editingId, setEditingId] = useState(null);\r\n\r\n// // // // //   // 🟢 Check admin login\r\n// // // // //   useEffect(() => {\r\n// // // // //     const token = localStorage.getItem(\"adminToken\");\r\n// // // // //     if (!token) navigate(\"/admin/login\");\r\n// // // // //   }, [navigate]);\r\n\r\n// // // // //   // 🟢 Initial fetch\r\n// // // // //   useEffect(() => {\r\n// // // // //     fetchQuestions();\r\n// // // // //     fetchResults();\r\n// // // // //   }, []);\r\n\r\n// // // // //   const fetchQuestions = async () => {\r\n// // // // //     try {\r\n// // // // //       const res = await API.questions.getAll();\r\n// // // // //       setQuestions(res.data || []);\r\n// // // // //     } catch (err) {\r\n// // // // //       console.error(err);\r\n// // // // //       alert(\"❌ Failed to load questions.\");\r\n// // // // //     }\r\n// // // // //   };\r\n\r\n// // // // //   const fetchResults = async () => {\r\n// // // // //     setLoadingResults(true);\r\n// // // // //     try {\r\n// // // // //       const res = await API.tests.getAll();\r\n// // // // //       setResults(res.data || []);\r\n// // // // //     } catch (err) {\r\n// // // // //       console.error(err);\r\n// // // // //       alert(\"❌ Failed to load test results.\");\r\n// // // // //     } finally {\r\n// // // // //       setLoadingResults(false);\r\n// // // // //     }\r\n// // // // //   };\r\n\r\n// // // // //   // 🟢 Add or Update Question\r\n// // // // //   const handleAddOrUpdate = async (e) => {\r\n// // // // //     e.preventDefault();\r\n// // // // //     const opts =\r\n// // // // //       questionType === \"MCQ\"\r\n// // // // //         ? form.optionsText.split(\"|\").map((s) => s.trim()).filter(Boolean)\r\n// // // // //         : [];\r\n\r\n// // // // //     if (!form.questionText.trim()) {\r\n// // // // //       return alert(\"Please enter question text.\");\r\n// // // // //     }\r\n\r\n// // // // //     setLoading(true);\r\n// // // // //     try {\r\n// // // // //       const payload = {\r\n// // // // //         questionType,\r\n// // // // //         questionText: form.questionText,\r\n// // // // //         options: opts,\r\n// // // // //         correctAnswer: questionType === \"MCQ\" ? form.correctAnswer : form.answerText,\r\n// // // // //       };\r\n// // // // //       console.log(\"Submitting payload ->\", payload);\r\n\r\n// // // // //       if (editingId) {\r\n// // // // //         await API.questions.update(editingId, payload);\r\n// // // // //         alert(\"✅ Question updated successfully!\");\r\n// // // // //       } else {\r\n// // // // //         await API.questions.create(payload);\r\n// // // // //         alert(\"✅ Question added successfully!\");\r\n// // // // //       }\r\n\r\n// // // // //       setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\", answerText: \"\" });\r\n// // // // //       setEditingId(null);\r\n// // // // //       await fetchQuestions();\r\n// // // // //     } catch (err) {\r\n// // // // //       console.error(err);\r\n// // // // //       alert(err.response?.data?.error || \"❌ Operation failed.\");\r\n// // // // //     } finally {\r\n// // // // //       setLoading(false);\r\n// // // // //     }\r\n// // // // //   };\r\n\r\n// // // // //   // 🟢 Delete Question\r\n// // // // //   const handleDelete = async (id) => {\r\n// // // // //     if (!window.confirm(\"Are you sure you want to delete this question?\")) return;\r\n// // // // //     try {\r\n// // // // //       await API.questions.delete(id);\r\n// // // // //       alert(\"🗑️ Question deleted successfully!\");\r\n// // // // //       await fetchQuestions();\r\n// // // // //     } catch (err) {\r\n// // // // //       console.error(err);\r\n// // // // //       alert(\"❌ Failed to delete question.\");\r\n// // // // //     }\r\n// // // // //   };\r\n\r\n// // // // //   // 🟢 Edit Question\r\n// // // // //   const handleEdit = (q) => {\r\n// // // // //     setEditingId(q._id);\r\n// // // // //     setQuestionType(q.questionType);\r\n// // // // //     setForm({\r\n// // // // //       questionText: q.questionText,\r\n// // // // //       optionsText: q.options ? q.options.join(\" | \") : \"\",\r\n// // // // //       correctAnswer: q.correctAnswer || \"\",\r\n// // // // //       answerText: q.questionType === \"Theory\" ? q.correctAnswer || \"\" : \"\",\r\n// // // // //     });\r\n// // // // //     window.scrollTo({ top: 0, behavior: \"smooth\" });\r\n// // // // //   };\r\n\r\n// // // // //   // 🟢 Upload File\r\n// // // // //   const handleUpload = async () => {\r\n// // // // //     if (!file) return alert(\"Please select a file to upload.\");\r\n// // // // //     const fd = new FormData();\r\n// // // // //     fd.append(\"file\", file);\r\n\r\n// // // // //     try {\r\n// // // // //       const res = await API.questions.uploadDoc(fd);\r\n// // // // //       alert(res.data.message || \"✅ File uploaded successfully!\");\r\n// // // // //       await fetchQuestions();\r\n// // // // //     } catch (err) {\r\n// // // // //       console.error(err);\r\n// // // // //       alert(err.response?.data?.error || \"❌ File upload failed.\");\r\n// // // // //     }\r\n// // // // //   };\r\n\r\n// // // // //   const handleLogout = () => {\r\n// // // // //     localStorage.removeItem(\"adminToken\");\r\n// // // // //     navigate(\"/admin/login\");\r\n// // // // //   };\r\n\r\n// // // // //   // 🟢 Navigate to validation page\r\n// // // // //   const handleViewValidation = (id) => {\r\n// // // // //     navigate(`/admin/result/${id}`);\r\n// // // // //   };\r\n\r\n// // // // //   return (\r\n// // // // //     <div className=\"admin-dashboard\">\r\n// // // // //       {/* Header */}\r\n// // // // //       {/* <div className=\"admin-header\">\r\n// // // // //         <h2>Admin Dashboard</h2>\r\n// // // // //         <button className=\"logout-btn\" onClick={handleLogout}>\r\n// // // // //           Logout\r\n// // // // //         </button>\r\n// // // // //       </div> */}\r\n\r\n// // // // //       {/* Tabs */}\r\n// // // // //       <div className=\"tab-buttons\">\r\n// // // // //         <button\r\n// // // // //           className={`tab-btn ${activeTab === \"questions\" ? \"active\" : \"\"}`}\r\n// // // // //           onClick={() => setActiveTab(\"questions\")}\r\n// // // // //         >\r\n// // // // //           🧩 Questions\r\n// // // // //         </button>\r\n// // // // //         <button\r\n// // // // //           className={`tab-btn ${activeTab === \"results\" ? \"active\" : \"\"}`}\r\n// // // // //           onClick={() => setActiveTab(\"results\")}\r\n// // // // //         >\r\n// // // // //           📊 Test Results\r\n// // // // //         </button>\r\n// // // // //       </div>\r\n\r\n// // // // //       {/* 🧩 QUESTIONS TAB */}\r\n// // // // //       {activeTab === \"questions\" ? (\r\n// // // // //         <div className=\"tab-content\">\r\n// // // // //           <div className=\"card form-section\">\r\n// // // // //             <h5>{editingId ? \"✏️ Edit Question\" : \"➕ Add or Upload Questions\"}</h5>\r\n\r\n// // // // //             <form onSubmit={handleAddOrUpdate}>\r\n// // // // //               <div className=\"mb-3\">\r\n// // // // //                 <label className=\"form-label\">Question Type</label>\r\n// // // // //                 <select\r\n// // // // //                   className=\"form-select\"\r\n// // // // //                   value={questionType}\r\n// // // // //                   onChange={(e) => setQuestionType(e.target.value)}\r\n// // // // //                 >\r\n// // // // //                   <option value=\"MCQ\">MCQ</option>\r\n// // // // //                   <option value=\"Theory\">Theory</option>\r\n// // // // //                 </select>\r\n// // // // //               </div>\r\n\r\n// // // // //               <div className=\"mb-3\">\r\n// // // // //                 <label className=\"form-label\">Question Text</label>\r\n// // // // //                 <textarea\r\n// // // // //                   className=\"form-control\"\r\n// // // // //                   rows={questionType === \"Theory\" ? 3 : 2}\r\n// // // // //                   value={form.questionText}\r\n// // // // //                   onChange={(e) =>\r\n// // // // //                     setForm({ ...form, questionText: e.target.value })\r\n// // // // //                   }\r\n// // // // //                   placeholder=\"Enter your question here...\"\r\n// // // // //                 />\r\n// // // // //               </div>\r\n\r\n// // // // //               {questionType === \"Theory\" && (\r\n// // // // //                 <div className=\"mb-3\">\r\n// // // // //                   <label className=\"form-label\">Answer / Model Answer</label>\r\n// // // // //                   <textarea\r\n// // // // //                     className=\"form-control\"\r\n// // // // //                     rows={4}\r\n// // // // //                     value={form.answerText}\r\n// // // // //                     onChange={(e) =>\r\n// // // // //                       setForm({ ...form, answerText: e.target.value })\r\n// // // // //                     }\r\n// // // // //                     placeholder=\"Enter the model answer for theory questions (this will be stored as the correct answer)\"\r\n// // // // //                   />\r\n// // // // //                 </div>\r\n// // // // //               )}\r\n\r\n// // // // //               {questionType === \"MCQ\" && (\r\n// // // // //                 <>\r\n// // // // //                   <div className=\"mb-3\">\r\n// // // // //                     <label className=\"form-label\">Options (separate by |)</label>\r\n// // // // //                     <input\r\n// // // // //                       className=\"form-control\"\r\n// // // // //                       value={form.optionsText}\r\n// // // // //                       onChange={(e) =>\r\n// // // // //                         setForm({ ...form, optionsText: e.target.value })\r\n// // // // //                       }\r\n// // // // //                       placeholder=\"Option A | Option B | Option C | Option D\"\r\n// // // // //                     />\r\n// // // // //                   </div>\r\n\r\n// // // // //                   <div className=\"mb-3\">\r\n// // // // //                     <label className=\"form-label\">Correct Answer</label>\r\n// // // // //                     <input\r\n// // // // //                       className=\"form-control\"\r\n// // // // //                       value={form.correctAnswer}\r\n// // // // //                       onChange={(e) =>\r\n// // // // //                         setForm({ ...form, correctAnswer: e.target.value })\r\n// // // // //                       }\r\n// // // // //                       placeholder=\"Enter correct answer text\"\r\n// // // // //                     />\r\n// // // // //                   </div>\r\n// // // // //                 </>\r\n// // // // //               )}\r\n\r\n// // // // //               <div className=\"d-flex gap-2\">\r\n// // // // //                 <button className=\"btn btn-success\" type=\"submit\" disabled={loading}>\r\n// // // // //                   {loading\r\n// // // // //                     ? \"Saving...\"\r\n// // // // //                     : editingId\r\n// // // // //                     ? \"Update Question\"\r\n// // // // //                     : \"Add Question\"}\r\n// // // // //                 </button>\r\n// // // // //                 <button\r\n// // // // //                   type=\"button\"\r\n// // // // //                   className=\"btn btn-secondary\"\r\n// // // // //                   onClick={() => {\r\n// // // // //                     setForm({\r\n// // // // //                       questionText: \"\",\r\n// // // // //                       optionsText: \"\",\r\n// // // // //                       correctAnswer: \"\",\r\n// // // // //                       answerText: \"\",\r\n// // // // //                     });\r\n// // // // //                     setEditingId(null);\r\n// // // // //                   }}\r\n// // // // //                 >\r\n// // // // //                   Clear\r\n// // // // //                 </button>\r\n// // // // //               </div>\r\n// // // // //             </form>\r\n\r\n// // // // //             <hr className=\"my-4\" />\r\n\r\n// // // // //             {/* Upload Section */}\r\n// // // // //             <div className=\"upload-section\">\r\n// // // // //               <label className=\"form-label\">Upload Document (.docx)</label>\r\n// // // // //               <input\r\n// // // // //                 type=\"file\"\r\n// // // // //                 className=\"form-control\"\r\n// // // // //                 accept=\".docx\"\r\n// // // // //                 onChange={(e) => setFile(e.target.files[0])}\r\n// // // // //               />\r\n// // // // //               <div className=\"mt-2\">\r\n// // // // //                 <button className=\"btn btn-primary\" onClick={handleUpload}>\r\n// // // // //                   Upload\r\n// // // // //                 </button>\r\n// // // // //               </div>\r\n// // // // //             </div>\r\n// // // // //           </div>\r\n\r\n// // // // //           {/* Display Questions */}\r\n// // // // //           <div className=\"card available-questions\">\r\n// // // // //             <h5>Available Questions</h5>\r\n\r\n// // // // //             <h6 className=\"mt-3 text-primary\">MCQ Questions</h6>\r\n// // // // //             {questions.filter((q) => q.questionType === \"MCQ\").length === 0 && (\r\n// // // // //               <div className=\"text-muted\">No MCQs yet</div>\r\n// // // // //             )}\r\n// // // // //             {questions\r\n// // // // //               .filter((q) => q.questionType === \"MCQ\")\r\n// // // // //               .map((q, idx) => (\r\n// // // // //                 <div key={q._id} className=\"question-item\">\r\n// // // // //                   <strong>Q{idx + 1}:</strong> {q.questionText}\r\n// // // // //                   <div className=\"small text-muted\">\r\n// // // // //                     Options: {q.options.join(\" | \")}\r\n// // // // //                   </div>\r\n// // // // //                   <div className=\"small text-success\">\r\n// // // // //                     Correct: {q.correctAnswer}\r\n// // // // //                   </div>\r\n// // // // //                   <div className=\"action-buttons\">\r\n// // // // //                     <button\r\n// // // // //                       className=\"btn btn-sm btn-warning\"\r\n// // // // //                       onClick={() => handleEdit(q)}\r\n// // // // //                     >\r\n// // // // //                       Edit\r\n// // // // //                     </button>\r\n// // // // //                     <button\r\n// // // // //                       className=\"btn btn-sm btn-danger\"\r\n// // // // //                       onClick={() => handleDelete(q._id)}\r\n// // // // //                     >\r\n// // // // //                       Delete\r\n// // // // //                     </button>\r\n// // // // //                   </div>\r\n// // // // //                 </div>\r\n// // // // //               ))}\r\n\r\n// // // // //             <h6 className=\"mt-4 text-primary\">Theory Questions</h6>\r\n// // // // //             {questions.filter((q) => q.questionType === \"Theory\").length === 0 && (\r\n// // // // //               <div className=\"text-muted\">No theory questions yet</div>\r\n// // // // //             )}\r\n// // // // //             {questions\r\n// // // // //               .filter((q) => q.questionType === \"Theory\")\r\n// // // // //               .map((q, idx) => (\r\n// // // // //                 <div key={q._id} className=\"question-item\">\r\n// // // // //                   <strong>Q{idx + 1}:</strong> {q.questionText}\r\n// // // // //                   {q.correctAnswer && (\r\n// // // // //                     <div className=\"small text-success\">\r\n// // // // //                       <b>Model Answer:</b> {q.correctAnswer}\r\n// // // // //                     </div>\r\n// // // // //                   )}\r\n// // // // //                   <div className=\"action-buttons\">\r\n// // // // //                     <button\r\n// // // // //                       className=\"btn btn-sm btn-warning\"\r\n// // // // //                       onClick={() => handleEdit(q)}\r\n// // // // //                     >\r\n// // // // //                       Edit\r\n// // // // //                     </button>\r\n// // // // //                     <button\r\n// // // // //                       className=\"btn btn-sm btn-danger\"\r\n// // // // //                       onClick={() => handleDelete(q._id)}\r\n// // // // //                     >\r\n// // // // //                       Delete\r\n// // // // //                     </button>\r\n// // // // //                   </div>\r\n// // // // //                 </div>\r\n// // // // //               ))}\r\n// // // // //           </div>\r\n// // // // //         </div>\r\n// // // // //       ) : (\r\n// // // // //         // 📊 TEST RESULTS TAB\r\n// // // // //         <div className=\"tab-content\">\r\n// // // // //           <div className=\"card results-section\">\r\n// // // // //             <h5>Candidate Test Results</h5>\r\n// // // // //             {loadingResults ? (\r\n// // // // //               <div>Loading test results...</div>\r\n// // // // //             ) : results.length === 0 ? (\r\n// // // // //               <div className=\"text-muted\">No test results yet</div>\r\n// // // // //             ) : (\r\n// // // // //               <table className=\"results-table\">\r\n// // // // //                 <thead>\r\n// // // // //                   <tr>\r\n// // // // //                     <th>Name</th>\r\n// // // // //                     <th>Email</th>\r\n// // // // //                     <th>Total</th>\r\n// // // // //                     <th>Correct</th>\r\n// // // // //                     <th>Score %</th>\r\n// // // // //                     <th>Status</th>\r\n// // // // //                     <th>Submitted At</th>\r\n// // // // //                     <th>Action</th>\r\n// // // // //                   </tr>\r\n// // // // //                 </thead>\r\n// // // // //                 <tbody>\r\n// // // // //                   {results.map((res, idx) => (\r\n// // // // //                     <tr key={idx}>\r\n// // // // //                       <td>{res.name}</td>\r\n// // // // //                       <td>{res.email}</td>\r\n// // // // //                       <td>{res.totalQuestions}</td>\r\n// // // // //                       <td>{res.correctAnswers}</td>\r\n// // // // //                       <td>{res.scorePercent}%</td>\r\n// // // // //                       <td>\r\n// // // // //                         <span\r\n// // // // //                           style={{\r\n// // // // //                             color:\r\n// // // // //                               res.status === \"Validated\" ? \"green\" : \"orange\",\r\n// // // // //                             fontWeight: 600,\r\n// // // // //                           }}\r\n// // // // //                         >\r\n// // // // //                           {res.status || \"Validation Pending\"}\r\n// // // // //                         </span>\r\n// // // // //                       </td>\r\n// // // // //                       <td>{new Date(res.submittedAt).toLocaleString()}</td>\r\n// // // // //                       <td>\r\n// // // // //                         <button\r\n// // // // //                           className=\"btn btn-sm btn-primary\"\r\n// // // // //                           onClick={() => handleViewValidation(res._id)}\r\n// // // // //                         >\r\n// // // // //                           View / Validate\r\n// // // // //                         </button>\r\n// // // // //                       </td>\r\n// // // // //                     </tr>\r\n// // // // //                   ))}\r\n// // // // //                 </tbody>\r\n// // // // //               </table>\r\n// // // // //             )}\r\n// // // // //           </div>\r\n// // // // //         </div>\r\n// // // // //       )}\r\n// // // // //     </div>\r\n// // // // //   );\r\n// // // // // }\r\n\r\n// // // // // import React, { useEffect, useState } from \"react\";\r\n// // // // // import API from \"../services/api\";\r\n// // // // // import { useNavigate } from \"react-router-dom\";\r\n// // // // // import \"../styles/AdminDashboard.css\";\r\n\r\n// // // // // export default function AdminDashboard() {\r\n// // // // //   const navigate = useNavigate();\r\n// // // // //   const [questions, setQuestions] = useState([]);\r\n// // // // //   const [results, setResults] = useState([]);\r\n// // // // //   const [activeTab, setActiveTab] = useState(\"questions\");\r\n// // // // //   const [form, setForm] = useState({\r\n// // // // //     questionText: \"\",\r\n// // // // //     optionsText: \"\",\r\n// // // // //     correctAnswer: \"\",\r\n// // // // //     answerText: \"\", // <-- ADDED: admin-entered answer for Theory\r\n// // // // //   });\r\n// // // // //   const [questionType, setQuestionType] = useState(\"MCQ\");\r\n// // // // //   const [file, setFile] = useState(null);\r\n// // // // //   const [loading, setLoading] = useState(false);\r\n// // // // //   const [loadingResults, setLoadingResults] = useState(false);\r\n// // // // //   const [editingId, setEditingId] = useState(null);\r\n\r\n// // // // //   // 🟢 Check admin login\r\n// // // // //   useEffect(() => {\r\n// // // // //     const token = localStorage.getItem(\"adminToken\");\r\n// // // // //     if (!token) navigate(\"/admin/login\");\r\n// // // // //   }, [navigate]);\r\n\r\n// // // // //   // 🟢 Initial fetch\r\n// // // // //   useEffect(() => {\r\n// // // // //     fetchQuestions();\r\n// // // // //     fetchResults();\r\n// // // // //   }, []);\r\n\r\n// // // // //   const fetchQuestions = async () => {\r\n// // // // //     try {\r\n// // // // //       const res = await API.get(\"/questions\");\r\n// // // // //       setQuestions(res.data || []);\r\n// // // // //     } catch (err) {\r\n// // // // //       console.error(err);\r\n// // // // //       alert(\"❌ Failed to load questions.\");\r\n// // // // //     }\r\n// // // // //   };\r\n\r\n// // // // //   const fetchResults = async () => {\r\n// // // // //     setLoadingResults(true);\r\n// // // // //     try {\r\n// // // // //       const res = await API.get(\"/tests\");\r\n// // // // //       setResults(res.data || []);\r\n// // // // //     } catch (err) {\r\n// // // // //       console.error(err);\r\n// // // // //       alert(\"❌ Failed to load test results.\");\r\n// // // // //     } finally {\r\n// // // // //       setLoadingResults(false);\r\n// // // // //     }\r\n// // // // //   };\r\n\r\n// // // // //   // 🟢 Add or Update Question\r\n// // // // //   const handleAddOrUpdate = async (e) => {\r\n// // // // //     e.preventDefault();\r\n// // // // //     const opts =\r\n// // // // //       questionType === \"MCQ\"\r\n// // // // //         ? form.optionsText.split(\"|\").map((s) => s.trim()).filter(Boolean)\r\n// // // // //         : [];\r\n\r\n// // // // //     if (!form.questionText.trim()) {\r\n// // // // //       return alert(\"Please enter question text.\");\r\n// // // // //     }\r\n\r\n// // // // //     setLoading(true);\r\n// // // // //     try {\r\n// // // // //       const payload = {\r\n// // // // //         questionType,\r\n// // // // //         questionText: form.questionText,\r\n// // // // //         options: opts,\r\n// // // // //         // for MCQ use form.correctAnswer, for Theory use form.answerText as the 'correctAnswer' stored on backend\r\n// // // // //         correctAnswer: questionType === \"MCQ\" ? form.correctAnswer : form.answerText,\r\n// // // // //       };\r\n// // // // //        console.log(\"Submitting payload ->\", payload); // inspect this in Network/Console\r\n\r\n// // // // //       if (editingId) {\r\n// // // // //         await API.put(`/questions/${editingId}`, payload);\r\n// // // // //         alert(\"✅ Question updated successfully!\");\r\n// // // // //       } else {\r\n// // // // //         await API.post(\"/questions\", payload);\r\n// // // // //         alert(\"✅ Question added successfully!\");\r\n// // // // //       }\r\n\r\n// // // // //       setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\", answerText: \"\" });\r\n// // // // //       setEditingId(null);\r\n// // // // //       await fetchQuestions();\r\n// // // // //     } catch (err) {\r\n// // // // //       console.error(err);\r\n// // // // //       alert(err.response?.data?.error || \"❌ Operation failed.\");\r\n// // // // //     } finally {\r\n// // // // //       setLoading(false);\r\n// // // // //     }\r\n// // // // //   };\r\n\r\n// // // // //   // 🟢 Delete Question\r\n// // // // //   const handleDelete = async (id) => {\r\n// // // // //     if (!window.confirm(\"Are you sure you want to delete this question?\")) return;\r\n\r\n// // // // //     try {\r\n// // // // //       await API.delete(`/questions/${id}`);\r\n// // // // //       alert(\"🗑️ Question deleted successfully!\");\r\n// // // // //       await fetchQuestions();\r\n// // // // //     } catch (err) {\r\n// // // // //       console.error(err);\r\n// // // // //       alert(\"❌ Failed to delete question.\");\r\n// // // // //     }\r\n// // // // //   };\r\n\r\n// // // // //   // 🟢 Edit Question\r\n// // // // //   const handleEdit = (q) => {\r\n// // // // //     setEditingId(q._id);\r\n// // // // //     setQuestionType(q.questionType);\r\n// // // // //     setForm({\r\n// // // // //       questionText: q.questionText,\r\n// // // // //       optionsText: q.options ? q.options.join(\" | \") : \"\",\r\n// // // // //       correctAnswer: q.correctAnswer || \"\", // used for MCQ\r\n// // // // //       answerText: q.questionType === \"Theory\" ? (q.correctAnswer || \"\") : \"\", // <-- ADDED: populate answerText from stored correctAnswer for theory\r\n// // // // //     });\r\n// // // // //     window.scrollTo({ top: 0, behavior: \"smooth\" });\r\n// // // // //   };\r\n\r\n// // // // //   // 🟢 Upload File\r\n// // // // //   const handleUpload = async () => {\r\n// // // // //     if (!file) return alert(\"Please select a file to upload.\");\r\n// // // // //     const fd = new FormData();\r\n// // // // //     fd.append(\"file\", file);\r\n\r\n// // // // //     try {\r\n// // // // //       const res = await API.post(\"/questions/upload\", fd, {\r\n// // // // //         headers: { \"Content-Type\": \"multipart/form-data\" },\r\n// // // // //       });\r\n// // // // //       alert(res.data.message || \"✅ File uploaded successfully!\");\r\n// // // // //       await fetchQuestions();\r\n// // // // //     } catch (err) {\r\n// // // // //       console.error(err);\r\n// // // // //       alert(err.response?.data?.error || \"❌ File upload failed.\");\r\n// // // // //     }\r\n// // // // //   };\r\n\r\n// // // // //   const handleLogout = () => {\r\n// // // // //     localStorage.removeItem(\"adminToken\");\r\n// // // // //     navigate(\"/admin/login\");\r\n// // // // //   };\r\n\r\n// // // // //   return (\r\n// // // // //     <div className=\"admin-dashboard\">\r\n// // // // //       {/* Header */}\r\n// // // // //       <div className=\"admin-header\">\r\n// // // // //         <h2>Admin Dashboard</h2>\r\n// // // // //         <button className=\"logout-btn\" onClick={handleLogout}>\r\n// // // // //           Logout\r\n// // // // //         </button>\r\n// // // // //       </div>\r\n\r\n// // // // //       {/* Tabs */}\r\n// // // // //       <div className=\"tab-buttons\">\r\n// // // // //         <button\r\n// // // // //           className={`tab-btn ${activeTab === \"questions\" ? \"active\" : \"\"}`}\r\n// // // // //           onClick={() => setActiveTab(\"questions\")}\r\n// // // // //         >\r\n// // // // //           🧩 Questions\r\n// // // // //         </button>\r\n// // // // //         <button\r\n// // // // //           className={`tab-btn ${activeTab === \"results\" ? \"active\" : \"\"}`}\r\n// // // // //           onClick={() => setActiveTab(\"results\")}\r\n// // // // //         >\r\n// // // // //           📊 Test Results\r\n// // // // //         </button>\r\n// // // // //       </div>\r\n\r\n// // // // //       {/* 🧩 QUESTIONS TAB */}\r\n// // // // //       {activeTab === \"questions\" ? (\r\n// // // // //         <div className=\"tab-content\">\r\n// // // // //           <div className=\"card form-section\">\r\n// // // // //             <h5>{editingId ? \"✏️ Edit Question\" : \"➕ Add or Upload Questions\"}</h5>\r\n\r\n// // // // //             <form onSubmit={handleAddOrUpdate}>\r\n// // // // //               <div className=\"mb-3\">\r\n// // // // //                 <label className=\"form-label\">Question Type</label>\r\n// // // // //                 <select\r\n// // // // //                   className=\"form-select\"\r\n// // // // //                   value={questionType}\r\n// // // // //                   onChange={(e) => setQuestionType(e.target.value)}\r\n// // // // //                 >\r\n// // // // //                   <option value=\"MCQ\">MCQ</option>\r\n// // // // //                   <option value=\"Theory\">Theory</option>\r\n// // // // //                 </select>\r\n// // // // //               </div>\r\n\r\n// // // // //               <div className=\"mb-3\">\r\n// // // // //                 <label className=\"form-label\">Question Text</label>\r\n// // // // //                 <textarea\r\n// // // // //                   className=\"form-control\"\r\n// // // // //                   rows={questionType === \"Theory\" ? 3 : 2}\r\n// // // // //                   value={form.questionText}\r\n// // // // //                   onChange={(e) =>\r\n// // // // //                     setForm({ ...form, questionText: e.target.value })\r\n// // // // //                   }\r\n// // // // //                   placeholder=\"Enter your question here...\"\r\n// // // // //                 />\r\n// // // // //               </div>\r\n\r\n// // // // //               {/* Theory: show admin answer input */}\r\n// // // // //               {questionType === \"Theory\" && (\r\n// // // // //                 <div className=\"mb-3\">\r\n// // // // //                   <label className=\"form-label\">Answer / Model Answer</label>\r\n// // // // //                   <textarea\r\n// // // // //                     className=\"form-control\"\r\n// // // // //                     rows={4}\r\n// // // // //                     value={form.answerText}\r\n// // // // //                     onChange={(e) => setForm({ ...form, answerText: e.target.value })}\r\n// // // // //                     placeholder=\"Enter the model answer for theory questions (this will be stored as the correct answer)\"\r\n// // // // //                   />\r\n// // // // //                 </div>\r\n// // // // //               )}\r\n\r\n// // // // //               {questionType === \"MCQ\" && (\r\n// // // // //                 <>\r\n// // // // //                   <div className=\"mb-3\">\r\n// // // // //                     <label className=\"form-label\">Options (separate by |)</label>\r\n// // // // //                     <input\r\n// // // // //                       className=\"form-control\"\r\n// // // // //                       value={form.optionsText}\r\n// // // // //                       onChange={(e) =>\r\n// // // // //                         setForm({ ...form, optionsText: e.target.value })\r\n// // // // //                       }\r\n// // // // //                       placeholder=\"Option A | Option B | Option C | Option D\"\r\n// // // // //                     />\r\n// // // // //                   </div>\r\n\r\n// // // // //                   <div className=\"mb-3\">\r\n// // // // //                     <label className=\"form-label\">Correct Answer</label>\r\n// // // // //                     <input\r\n// // // // //                       className=\"form-control\"\r\n// // // // //                       value={form.correctAnswer}\r\n// // // // //                       onChange={(e) =>\r\n// // // // //                         setForm({ ...form, correctAnswer: e.target.value })\r\n// // // // //                       }\r\n// // // // //                       placeholder=\"Enter correct answer text\"\r\n// // // // //                     />\r\n// // // // //                   </div>\r\n// // // // //                 </>\r\n// // // // //               )}\r\n\r\n// // // // //               <div className=\"d-flex gap-2\">\r\n// // // // //                 <button className=\"btn btn-success\" type=\"submit\" disabled={loading}>\r\n// // // // //                   {loading\r\n// // // // //                     ? \"Saving...\"\r\n// // // // //                     : editingId\r\n// // // // //                     ? \"Update Question\"\r\n// // // // //                     : \"Add Question\"}\r\n// // // // //                 </button>\r\n// // // // //                 <button\r\n// // // // //                   type=\"button\"\r\n// // // // //                   className=\"btn btn-secondary\"\r\n// // // // //                   onClick={() => {\r\n// // // // //                     setForm({\r\n// // // // //                       questionText: \"\",\r\n// // // // //                       optionsText: \"\",\r\n// // // // //                       correctAnswer: \"\",\r\n// // // // //                       answerText: \"\", // <-- clear it\r\n// // // // //                     });\r\n// // // // //                     setEditingId(null);\r\n// // // // //                   }}\r\n// // // // //                 >\r\n// // // // //                   Clear\r\n// // // // //                 </button>\r\n// // // // //               </div>\r\n// // // // //             </form>\r\n\r\n// // // // //             <hr className=\"my-4\" />\r\n\r\n// // // // //             {/* Upload Section */}\r\n// // // // //             <div className=\"upload-section\">\r\n// // // // //               <label className=\"form-label\">Upload Document (.docx)</label>\r\n// // // // //               <input\r\n// // // // //                 type=\"file\"\r\n// // // // //                 className=\"form-control\"\r\n// // // // //                 accept=\".docx\"\r\n// // // // //                 onChange={(e) => setFile(e.target.files[0])}\r\n// // // // //               />\r\n// // // // //               <div className=\"mt-2\">\r\n// // // // //                 <button className=\"btn btn-primary\" onClick={handleUpload}>\r\n// // // // //                   Upload\r\n// // // // //                 </button>\r\n// // // // //               </div>\r\n// // // // //             </div>\r\n// // // // //           </div>\r\n\r\n// // // // //           {/* Display Questions */}\r\n// // // // //           <div className=\"card available-questions\">\r\n// // // // //             <h5>Available Questions</h5>\r\n\r\n// // // // //             {/* MCQ Section */}\r\n// // // // //             <h6 className=\"mt-3 text-primary\">MCQ Questions</h6>\r\n// // // // //             {questions.filter((q) => q.questionType === \"MCQ\").length === 0 && (\r\n// // // // //               <div className=\"text-muted\">No MCQs yet</div>\r\n// // // // //             )}\r\n// // // // //             {questions\r\n// // // // //               .filter((q) => q.questionType === \"MCQ\")\r\n// // // // //               .map((q, idx) => (\r\n// // // // //                 <div key={q._id} className=\"question-item\">\r\n// // // // //                   <strong>Q{idx + 1}:</strong> {q.questionText}\r\n// // // // //                   <div className=\"small text-muted\">\r\n// // // // //                     Options: {q.options.join(\" | \")}\r\n// // // // //                   </div>\r\n// // // // //                   <div className=\"small text-success\">\r\n// // // // //                     Correct: {q.correctAnswer}\r\n// // // // //                   </div>\r\n// // // // //                   <div className=\"action-buttons\">\r\n// // // // //                     <button\r\n// // // // //                       className=\"btn btn-sm btn-warning\"\r\n// // // // //                       onClick={() => handleEdit(q)}\r\n// // // // //                     >\r\n// // // // //                       Edit\r\n// // // // //                     </button>\r\n// // // // //                     <button\r\n// // // // //                       className=\"btn btn-sm btn-danger\"\r\n// // // // //                       onClick={() => handleDelete(q._id)}\r\n// // // // //                     >\r\n// // // // //                       Delete\r\n// // // // //                     </button>\r\n// // // // //                   </div>\r\n// // // // //                 </div>\r\n// // // // //               ))}\r\n\r\n// // // // //             {/* Theory Section */}\r\n// // // // //             <h6 className=\"mt-4 text-primary\">Theory Questions</h6>\r\n// // // // //             {questions.filter((q) => q.questionType === \"Theory\").length === 0 && (\r\n// // // // //               <div className=\"text-muted\">No theory questions yet</div>\r\n// // // // //             )}\r\n// // // // //             {questions\r\n// // // // //               .filter((q) => q.questionType === \"Theory\")\r\n// // // // //               .map((q, idx) => {\r\n// // // // //                 const relatedAnswers = results\r\n// // // // //                   .flatMap((r) => r.answers || [])\r\n// // // // //                   .filter(\r\n// // // // //                     (a) =>\r\n// // // // //                       a.question.trim().toLowerCase() ===\r\n// // // // //                       q.questionText.trim().toLowerCase()\r\n// // // // //                   );\r\n// // // // //                 return (\r\n// // // // //                   <div key={q._id} className=\"question-item\">\r\n// // // // //                     <strong>Q{idx + 1}:</strong> {q.questionText}\r\n// // // // //                     {/* show admin-provided model answer if exists */}\r\n// // // // //                     {q.correctAnswer ? (\r\n// // // // //                       <div className=\"small text-success\">\r\n// // // // //                         <b>Model Answer:</b> {q.correctAnswer}\r\n// // // // //                       </div>\r\n// // // // //                     ) : null}\r\n\r\n// // // // //                     {relatedAnswers.length > 0 ? (\r\n// // // // //                       <div className=\"theory-answers\">\r\n// // // // //                         <b>Answers:</b>\r\n// // // // //                         <ul>\r\n// // // // //                           {relatedAnswers.map((a, i) => (\r\n// // // // //                             <li key={i}>{a.userAnswer}</li>\r\n// // // // //                           ))}\r\n// // // // //                         </ul>\r\n// // // // //                       </div>\r\n// // // // //                     ) : (\r\n// // // // //                       <div className=\"text-muted small\">No answers yet</div>\r\n// // // // //                     )}\r\n// // // // //                     <div className=\"action-buttons\">\r\n// // // // //                       <button\r\n// // // // //                         className=\"btn btn-sm btn-warning\"\r\n// // // // //                         onClick={() => handleEdit(q)}\r\n// // // // //                       >\r\n// // // // //                         Edit\r\n// // // // //                       </button>\r\n// // // // //                       <button\r\n// // // // //                         className=\"btn btn-sm btn-danger\"\r\n// // // // //                         onClick={() => handleDelete(q._id)}\r\n// // // // //                       >\r\n// // // // //                         Delete\r\n// // // // //                       </button>\r\n// // // // //                     </div>\r\n// // // // //                   </div>\r\n// // // // //                 );\r\n// // // // //               })}\r\n// // // // //           </div>\r\n// // // // //         </div>\r\n// // // // //       ) : (\r\n// // // // //         // 📊 TEST RESULTS TAB\r\n// // // // //         <div className=\"tab-content\">\r\n// // // // //           <div className=\"card results-section\">\r\n// // // // //             <h5>Candidate Test Results</h5>\r\n// // // // //             {loadingResults ? (\r\n// // // // //               <div>Loading test results...</div>\r\n// // // // //             ) : results.length === 0 ? (\r\n// // // // //               <div className=\"text-muted\">No test results yet</div>\r\n// // // // //             ) : (\r\n// // // // //               <table className=\"results-table\">\r\n// // // // //                 <thead>\r\n// // // // //                   <tr>\r\n// // // // //                     <th>Name</th>\r\n// // // // //                     <th>Email</th>\r\n// // // // //                     <th>Total</th>\r\n// // // // //                     <th>Correct</th>\r\n// // // // //                     <th>Score %</th>\r\n// // // // //                     <th>Submitted At</th>\r\n// // // // //                   </tr>\r\n// // // // //                 </thead>\r\n// // // // //                 <tbody>\r\n// // // // //                   {results.map((res, idx) => (\r\n// // // // //                     <tr key={idx}>\r\n// // // // //                       <td>{res.name}</td>\r\n// // // // //                       <td>{res.email}</td>\r\n// // // // //                       <td>{res.totalQuestions}</td>\r\n// // // // //                       <td>{res.correctAnswers}</td>\r\n// // // // //                       <td>{res.scorePercent}%</td>\r\n// // // // //                       <td>{new Date(res.submittedAt).toLocaleString()}</td>\r\n// // // // //                     </tr>\r\n// // // // //                   ))}\r\n// // // // //                 </tbody>\r\n// // // // //               </table>\r\n// // // // //             )}\r\n// // // // //           </div>\r\n// // // // //         </div>\r\n// // // // //       )}\r\n// // // // //     </div>\r\n// // // // //   );\r\n// // // // // }\r\n\r\n\r\n// // // // // // import React, { useEffect, useState } from \"react\";\r\n// // // // // // import API from \"../services/api\";\r\n// // // // // // import { useNavigate } from \"react-router-dom\";\r\n// // // // // // import \"../styles/AdminDashboard.css\";\r\n\r\n// // // // // // export default function AdminDashboard() {\r\n// // // // // //   const navigate = useNavigate();\r\n// // // // // //   const [questions, setQuestions] = useState([]);\r\n// // // // // //   const [results, setResults] = useState([]);\r\n// // // // // //   const [activeTab, setActiveTab] = useState(\"questions\");\r\n// // // // // //   const [form, setForm] = useState({\r\n// // // // // //     questionText: \"\",\r\n// // // // // //     optionsText: \"\",\r\n// // // // // //     correctAnswer: \"\",\r\n// // // // // //   });\r\n// // // // // //   const [questionType, setQuestionType] = useState(\"MCQ\");\r\n// // // // // //   const [file, setFile] = useState(null);\r\n// // // // // //   const [loading, setLoading] = useState(false);\r\n// // // // // //   const [loadingResults, setLoadingResults] = useState(false);\r\n// // // // // //   const [editingId, setEditingId] = useState(null);\r\n\r\n// // // // // //   // 🟢 Check admin login\r\n// // // // // //   useEffect(() => {\r\n// // // // // //     const token = localStorage.getItem(\"adminToken\");\r\n// // // // // //     if (!token) navigate(\"/admin/login\");\r\n// // // // // //   }, [navigate]);\r\n\r\n// // // // // //   // 🟢 Initial fetch\r\n// // // // // //   useEffect(() => {\r\n// // // // // //     fetchQuestions();\r\n// // // // // //     fetchResults();\r\n// // // // // //   }, []);\r\n\r\n// // // // // //   const fetchQuestions = async () => {\r\n// // // // // //     try {\r\n// // // // // //       const res = await API.get(\"/questions\");\r\n// // // // // //       setQuestions(res.data || []);\r\n// // // // // //     } catch (err) {\r\n// // // // // //       console.error(err);\r\n// // // // // //       alert(\"❌ Failed to load questions.\");\r\n// // // // // //     }\r\n// // // // // //   };\r\n\r\n// // // // // //   const fetchResults = async () => {\r\n// // // // // //     setLoadingResults(true);\r\n// // // // // //     try {\r\n// // // // // //       const res = await API.get(\"/tests\");\r\n// // // // // //       setResults(res.data || []);\r\n// // // // // //     } catch (err) {\r\n// // // // // //       console.error(err);\r\n// // // // // //       alert(\"❌ Failed to load test results.\");\r\n// // // // // //     } finally {\r\n// // // // // //       setLoadingResults(false);\r\n// // // // // //     }\r\n// // // // // //   };\r\n\r\n// // // // // //   // 🟢 Add or Update Question\r\n// // // // // //   const handleAddOrUpdate = async (e) => {\r\n// // // // // //     e.preventDefault();\r\n// // // // // //     const opts =\r\n// // // // // //       questionType === \"MCQ\"\r\n// // // // // //         ? form.optionsText.split(\"|\").map((s) => s.trim()).filter(Boolean)\r\n// // // // // //         : [];\r\n\r\n// // // // // //     if (!form.questionText.trim()) {\r\n// // // // // //       return alert(\"Please enter question text.\");\r\n// // // // // //     }\r\n\r\n// // // // // //     setLoading(true);\r\n// // // // // //     try {\r\n// // // // // //       if (editingId) {\r\n// // // // // //         await API.put(`/questions/${editingId}`, {\r\n// // // // // //           questionType,\r\n// // // // // //           questionText: form.questionText,\r\n// // // // // //           options: opts,\r\n// // // // // //           correctAnswer: questionType === \"MCQ\" ? form.correctAnswer : \"\",\r\n// // // // // //         });\r\n// // // // // //         alert(\"✅ Question updated successfully!\");\r\n// // // // // //       } else {\r\n// // // // // //         await API.post(\"/questions\", {\r\n// // // // // //           questionType,\r\n// // // // // //           questionText: form.questionText,\r\n// // // // // //           options: opts,\r\n// // // // // //           correctAnswer: questionType === \"MCQ\" ? form.correctAnswer : \"\",\r\n// // // // // //         });\r\n// // // // // //         alert(\"✅ Question added successfully!\");\r\n// // // // // //       }\r\n\r\n// // // // // //       setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" });\r\n// // // // // //       setEditingId(null);\r\n// // // // // //       await fetchQuestions();\r\n// // // // // //     } catch (err) {\r\n// // // // // //       console.error(err);\r\n// // // // // //       alert(err.response?.data?.error || \"❌ Operation failed.\");\r\n// // // // // //     } finally {\r\n// // // // // //       setLoading(false);\r\n// // // // // //     }\r\n// // // // // //   };\r\n\r\n// // // // // //   // 🟢 Delete Question\r\n// // // // // //   const handleDelete = async (id) => {\r\n// // // // // //     if (!window.confirm(\"Are you sure you want to delete this question?\")) return;\r\n\r\n// // // // // //     try {\r\n// // // // // //       await API.delete(`/questions/${id}`);\r\n// // // // // //       alert(\"🗑️ Question deleted successfully!\");\r\n// // // // // //       await fetchQuestions();\r\n// // // // // //     } catch (err) {\r\n// // // // // //       console.error(err);\r\n// // // // // //       alert(\"❌ Failed to delete question.\");\r\n// // // // // //     }\r\n// // // // // //   };\r\n\r\n// // // // // //   // 🟢 Edit Question\r\n// // // // // //   const handleEdit = (q) => {\r\n// // // // // //     setEditingId(q._id);\r\n// // // // // //     setQuestionType(q.questionType);\r\n// // // // // //     setForm({\r\n// // // // // //       questionText: q.questionText,\r\n// // // // // //       optionsText: q.options ? q.options.join(\" | \") : \"\",\r\n// // // // // //       correctAnswer: q.correctAnswer || \"\",\r\n// // // // // //     });\r\n// // // // // //     window.scrollTo({ top: 0, behavior: \"smooth\" });\r\n// // // // // //   };\r\n\r\n// // // // // //   // 🟢 Upload File\r\n// // // // // //   const handleUpload = async () => {\r\n// // // // // //     if (!file) return alert(\"Please select a file to upload.\");\r\n// // // // // //     const fd = new FormData();\r\n// // // // // //     fd.append(\"file\", file);\r\n\r\n// // // // // //     try {\r\n// // // // // //       const res = await API.post(\"/questions/upload\", fd, {\r\n// // // // // //         headers: { \"Content-Type\": \"multipart/form-data\" },\r\n// // // // // //       });\r\n// // // // // //       alert(res.data.message || \"✅ File uploaded successfully!\");\r\n// // // // // //       await fetchQuestions();\r\n// // // // // //     } catch (err) {\r\n// // // // // //       console.error(err);\r\n// // // // // //       alert(err.response?.data?.error || \"❌ File upload failed.\");\r\n// // // // // //     }\r\n// // // // // //   };\r\n\r\n// // // // // //   const handleLogout = () => {\r\n// // // // // //     localStorage.removeItem(\"adminToken\");\r\n// // // // // //     navigate(\"/admin/login\");\r\n// // // // // //   };\r\n\r\n// // // // // //   return (\r\n// // // // // //     <div className=\"admin-dashboard\">\r\n// // // // // //       {/* Header */}\r\n// // // // // //       <div className=\"admin-header\">\r\n// // // // // //         <h2>Admin Dashboard</h2>\r\n// // // // // //         <button className=\"logout-btn\" onClick={handleLogout}>\r\n// // // // // //           Logout\r\n// // // // // //         </button>\r\n// // // // // //       </div>\r\n\r\n// // // // // //       {/* Tabs */}\r\n// // // // // //       <div className=\"tab-buttons\">\r\n// // // // // //         <button\r\n// // // // // //           className={`tab-btn ${activeTab === \"questions\" ? \"active\" : \"\"}`}\r\n// // // // // //           onClick={() => setActiveTab(\"questions\")}\r\n// // // // // //         >\r\n// // // // // //           🧩 Questions\r\n// // // // // //         </button>\r\n// // // // // //         <button\r\n// // // // // //           className={`tab-btn ${activeTab === \"results\" ? \"active\" : \"\"}`}\r\n// // // // // //           onClick={() => setActiveTab(\"results\")}\r\n// // // // // //         >\r\n// // // // // //           📊 Test Results\r\n// // // // // //         </button>\r\n// // // // // //       </div>\r\n\r\n// // // // // //       {/* 🧩 QUESTIONS TAB */}\r\n// // // // // //       {activeTab === \"questions\" ? (\r\n// // // // // //         <div className=\"tab-content\">\r\n// // // // // //           <div className=\"card form-section\">\r\n// // // // // //             <h5>{editingId ? \"✏️ Edit Question\" : \"➕ Add or Upload Questions\"}</h5>\r\n\r\n// // // // // //             <form onSubmit={handleAddOrUpdate}>\r\n// // // // // //               <div className=\"mb-3\">\r\n// // // // // //                 <label className=\"form-label\">Question Type</label>\r\n// // // // // //                 <select\r\n// // // // // //                   className=\"form-select\"\r\n// // // // // //                   value={questionType}\r\n// // // // // //                   onChange={(e) => setQuestionType(e.target.value)}\r\n// // // // // //                 >\r\n// // // // // //                   <option value=\"MCQ\">MCQ</option>\r\n// // // // // //                   <option value=\"Theory\">Theory</option>\r\n// // // // // //                 </select>\r\n// // // // // //               </div>\r\n\r\n// // // // // //               <div className=\"mb-3\">\r\n// // // // // //                 <label className=\"form-label\">Question Text</label>\r\n// // // // // //                 <textarea\r\n// // // // // //                   className=\"form-control\"\r\n// // // // // //                   rows={questionType === \"Theory\" ? 3 : 2}\r\n// // // // // //                   value={form.questionText}\r\n// // // // // //                   onChange={(e) =>\r\n// // // // // //                     setForm({ ...form, questionText: e.target.value })\r\n// // // // // //                   }\r\n// // // // // //                   placeholder=\"Enter your question here...\"\r\n// // // // // //                 />\r\n// // // // // //               </div>\r\n\r\n// // // // // //               {questionType === \"MCQ\" && (\r\n// // // // // //                 <>\r\n// // // // // //                   <div className=\"mb-3\">\r\n// // // // // //                     <label className=\"form-label\">Options (separate by |)</label>\r\n// // // // // //                     <input\r\n// // // // // //                       className=\"form-control\"\r\n// // // // // //                       value={form.optionsText}\r\n// // // // // //                       onChange={(e) =>\r\n// // // // // //                         setForm({ ...form, optionsText: e.target.value })\r\n// // // // // //                       }\r\n// // // // // //                       placeholder=\"Option A | Option B | Option C | Option D\"\r\n// // // // // //                     />\r\n// // // // // //                   </div>\r\n\r\n// // // // // //                   <div className=\"mb-3\">\r\n// // // // // //                     <label className=\"form-label\">Correct Answer</label>\r\n// // // // // //                     <input\r\n// // // // // //                       className=\"form-control\"\r\n// // // // // //                       value={form.correctAnswer}\r\n// // // // // //                       onChange={(e) =>\r\n// // // // // //                         setForm({ ...form, correctAnswer: e.target.value })\r\n// // // // // //                       }\r\n// // // // // //                       placeholder=\"Enter correct answer text\"\r\n// // // // // //                     />\r\n// // // // // //                   </div>\r\n// // // // // //                 </>\r\n// // // // // //               )}\r\n\r\n// // // // // //               <div className=\"d-flex gap-2\">\r\n// // // // // //                 <button className=\"btn btn-success\" type=\"submit\" disabled={loading}>\r\n// // // // // //                   {loading\r\n// // // // // //                     ? \"Saving...\"\r\n// // // // // //                     : editingId\r\n// // // // // //                     ? \"Update Question\"\r\n// // // // // //                     : \"Add Question\"}\r\n// // // // // //                 </button>\r\n// // // // // //                 <button\r\n// // // // // //                   type=\"button\"\r\n// // // // // //                   className=\"btn btn-secondary\"\r\n// // // // // //                   onClick={() => {\r\n// // // // // //                     setForm({\r\n// // // // // //                       questionText: \"\",\r\n// // // // // //                       optionsText: \"\",\r\n// // // // // //                       correctAnswer: \"\",\r\n// // // // // //                     });\r\n// // // // // //                     setEditingId(null);\r\n// // // // // //                   }}\r\n// // // // // //                 >\r\n// // // // // //                   Clear\r\n// // // // // //                 </button>\r\n// // // // // //               </div>\r\n// // // // // //             </form>\r\n\r\n// // // // // //             <hr className=\"my-4\" />\r\n\r\n// // // // // //             {/* Upload Section */}\r\n// // // // // //             <div className=\"upload-section\">\r\n// // // // // //               <label className=\"form-label\">Upload Document (.docx)</label>\r\n// // // // // //               <input\r\n// // // // // //                 type=\"file\"\r\n// // // // // //                 className=\"form-control\"\r\n// // // // // //                 accept=\".docx\"\r\n// // // // // //                 onChange={(e) => setFile(e.target.files[0])}\r\n// // // // // //               />\r\n// // // // // //               <div className=\"mt-2\">\r\n// // // // // //                 <button className=\"btn btn-primary\" onClick={handleUpload}>\r\n// // // // // //                   Upload\r\n// // // // // //                 </button>\r\n// // // // // //               </div>\r\n// // // // // //             </div>\r\n// // // // // //           </div>\r\n\r\n// // // // // //           {/* Display Questions */}\r\n// // // // // //           <div className=\"card available-questions\">\r\n// // // // // //             <h5>Available Questions</h5>\r\n\r\n// // // // // //             {/* MCQ Section */}\r\n// // // // // //             <h6 className=\"mt-3 text-primary\">MCQ Questions</h6>\r\n// // // // // //             {questions.filter((q) => q.questionType === \"MCQ\").length === 0 && (\r\n// // // // // //               <div className=\"text-muted\">No MCQs yet</div>\r\n// // // // // //             )}\r\n// // // // // //             {questions\r\n// // // // // //               .filter((q) => q.questionType === \"MCQ\")\r\n// // // // // //               .map((q, idx) => (\r\n// // // // // //                 <div key={q._id} className=\"question-item\">\r\n// // // // // //                   <strong>Q{idx + 1}:</strong> {q.questionText}\r\n// // // // // //                   <div className=\"small text-muted\">\r\n// // // // // //                     Options: {q.options.join(\" | \")}\r\n// // // // // //                   </div>\r\n// // // // // //                   <div className=\"small text-success\">\r\n// // // // // //                     Correct: {q.correctAnswer}\r\n// // // // // //                   </div>\r\n// // // // // //                   <div className=\"action-buttons\">\r\n// // // // // //                     <button\r\n// // // // // //                       className=\"btn btn-sm btn-warning\"\r\n// // // // // //                       onClick={() => handleEdit(q)}\r\n// // // // // //                     >\r\n// // // // // //                       Edit\r\n// // // // // //                     </button>\r\n// // // // // //                     <button\r\n// // // // // //                       className=\"btn btn-sm btn-danger\"\r\n// // // // // //                       onClick={() => handleDelete(q._id)}\r\n// // // // // //                     >\r\n// // // // // //                       Delete\r\n// // // // // //                     </button>\r\n// // // // // //                   </div>\r\n// // // // // //                 </div>\r\n// // // // // //               ))}\r\n\r\n// // // // // //             {/* Theory Section */}\r\n// // // // // //             <h6 className=\"mt-4 text-primary\">Theory Questions</h6>\r\n// // // // // //             {questions.filter((q) => q.questionType === \"Theory\").length === 0 && (\r\n// // // // // //               <div className=\"text-muted\">No theory questions yet</div>\r\n// // // // // //             )}\r\n// // // // // //             {questions\r\n// // // // // //               .filter((q) => q.questionType === \"Theory\")\r\n// // // // // //               .map((q, idx) => {\r\n// // // // // //                 const relatedAnswers = results\r\n// // // // // //                   .flatMap((r) => r.answers || [])\r\n// // // // // //                   .filter(\r\n// // // // // //                     (a) =>\r\n// // // // // //                       a.question.trim().toLowerCase() ===\r\n// // // // // //                       q.questionText.trim().toLowerCase()\r\n// // // // // //                   );\r\n// // // // // //                 return (\r\n// // // // // //                   <div key={q._id} className=\"question-item\">\r\n// // // // // //                     <strong>Q{idx + 1}:</strong> {q.questionText}\r\n// // // // // //                     {relatedAnswers.length > 0 ? (\r\n// // // // // //                       <div className=\"theory-answers\">\r\n// // // // // //                         <b>Answers:</b>\r\n// // // // // //                         <ul>\r\n// // // // // //                           {relatedAnswers.map((a, i) => (\r\n// // // // // //                             <li key={i}>{a.userAnswer}</li>\r\n// // // // // //                           ))}\r\n// // // // // //                         </ul>\r\n// // // // // //                       </div>\r\n// // // // // //                     ) : (\r\n// // // // // //                       <div className=\"text-muted small\">No answers yet</div>\r\n// // // // // //                     )}\r\n// // // // // //                     <div className=\"action-buttons\">\r\n// // // // // //                       <button\r\n// // // // // //                         className=\"btn btn-sm btn-warning\"\r\n// // // // // //                         onClick={() => handleEdit(q)}\r\n// // // // // //                       >\r\n// // // // // //                         Edit\r\n// // // // // //                       </button>\r\n// // // // // //                       <button\r\n// // // // // //                         className=\"btn btn-sm btn-danger\"\r\n// // // // // //                         onClick={() => handleDelete(q._id)}\r\n// // // // // //                       >\r\n// // // // // //                         Delete\r\n// // // // // //                       </button>\r\n// // // // // //                     </div>\r\n// // // // // //                   </div>\r\n// // // // // //                 );\r\n// // // // // //               })}\r\n// // // // // //           </div>\r\n// // // // // //         </div>\r\n// // // // // //       ) : (\r\n// // // // // //         // 📊 TEST RESULTS TAB\r\n// // // // // //         <div className=\"tab-content\">\r\n// // // // // //           <div className=\"card results-section\">\r\n// // // // // //             <h5>Candidate Test Results</h5>\r\n// // // // // //             {loadingResults ? (\r\n// // // // // //               <div>Loading test results...</div>\r\n// // // // // //             ) : results.length === 0 ? (\r\n// // // // // //               <div className=\"text-muted\">No test results yet</div>\r\n// // // // // //             ) : (\r\n// // // // // //               <table className=\"results-table\">\r\n// // // // // //                 <thead>\r\n// // // // // //                   <tr>\r\n// // // // // //                     <th>Name</th>\r\n// // // // // //                     <th>Email</th>\r\n// // // // // //                     <th>Total</th>\r\n// // // // // //                     <th>Correct</th>\r\n// // // // // //                     <th>Score %</th>\r\n// // // // // //                     <th>Submitted At</th>\r\n// // // // // //                   </tr>\r\n// // // // // //                 </thead>\r\n// // // // // //                 <tbody>\r\n// // // // // //                   {results.map((res, idx) => (\r\n// // // // // //                     <tr key={idx}>\r\n// // // // // //                       <td>{res.name}</td>\r\n// // // // // //                       <td>{res.email}</td>\r\n// // // // // //                       <td>{res.totalQuestions}</td>\r\n// // // // // //                       <td>{res.correctAnswers}</td>\r\n// // // // // //                       <td>{res.scorePercent}%</td>\r\n// // // // // //                       <td>{new Date(res.submittedAt).toLocaleString()}</td>\r\n// // // // // //                     </tr>\r\n// // // // // //                   ))}\r\n// // // // // //                 </tbody>\r\n// // // // // //               </table>\r\n// // // // // //             )}\r\n// // // // // //           </div>\r\n// // // // // //         </div>\r\n// // // // // //       )}\r\n// // // // // //     </div>\r\n// // // // // //   );\r\n// // // // // // }\r\n\r\n// // // // // // // import React, { useEffect, useState } from \"react\";\r\n// // // // // // // import API from \"../services/api\";\r\n// // // // // // // import { useNavigate } from \"react-router-dom\";\r\n// // // // // // // import \"../styles/AdminDashboard.css\";\r\n\r\n// // // // // // // export default function AdminDashboard() {\r\n// // // // // // //   const navigate = useNavigate();\r\n// // // // // // //   const [questions, setQuestions] = useState([]);\r\n// // // // // // //   const [results, setResults] = useState([]);\r\n// // // // // // //   const [activeTab, setActiveTab] = useState(\"questions\"); // 🔹 Switch tab\r\n// // // // // // //   const [form, setForm] = useState({\r\n// // // // // // //     questionText: \"\",\r\n// // // // // // //     optionsText: \"\",\r\n// // // // // // //     correctAnswer: \"\",\r\n// // // // // // //   });\r\n// // // // // // //   const [questionType, setQuestionType] = useState(\"MCQ\");\r\n// // // // // // //   const [file, setFile] = useState(null);\r\n// // // // // // //   const [loading, setLoading] = useState(false);\r\n// // // // // // //   const [loadingResults, setLoadingResults] = useState(false);\r\n\r\n// // // // // // //   // 🟢 Check admin login\r\n// // // // // // //   useEffect(() => {\r\n// // // // // // //     const token = localStorage.getItem(\"adminToken\");\r\n// // // // // // //     if (!token) navigate(\"/admin/login\");\r\n// // // // // // //   }, [navigate]);\r\n\r\n// // // // // // //   // 🟢 Fetch initial data\r\n// // // // // // //   useEffect(() => {\r\n// // // // // // //     fetchQuestions();\r\n// // // // // // //     fetchResults();\r\n// // // // // // //   }, []);\r\n\r\n// // // // // // //   const fetchQuestions = async () => {\r\n// // // // // // //     try {\r\n// // // // // // //       const res = await API.get(\"/questions\");\r\n// // // // // // //       setQuestions(res.data || []);\r\n// // // // // // //     } catch (err) {\r\n// // // // // // //       console.error(err);\r\n// // // // // // //       alert(\"❌ Failed to load questions.\");\r\n// // // // // // //     }\r\n// // // // // // //   };\r\n\r\n// // // // // // //   const fetchResults = async () => {\r\n// // // // // // //     setLoadingResults(true);\r\n// // // // // // //     try {\r\n// // // // // // //       const res = await API.get(\"/tests\");\r\n// // // // // // //       setResults(res.data || []);\r\n// // // // // // //     } catch (err) {\r\n// // // // // // //       console.error(err);\r\n// // // // // // //       alert(\"❌ Failed to load test results.\");\r\n// // // // // // //     } finally {\r\n// // // // // // //       setLoadingResults(false);\r\n// // // // // // //     }\r\n// // // // // // //   };\r\n\r\n// // // // // // //   // 🟢 Add Question\r\n// // // // // // //   const handleAddQuestion = async (e) => {\r\n// // // // // // //     e.preventDefault();\r\n// // // // // // //     const opts =\r\n// // // // // // //       questionType === \"MCQ\"\r\n// // // // // // //         ? form.optionsText.split(\"|\").map((s) => s.trim()).filter(Boolean)\r\n// // // // // // //         : [];\r\n\r\n// // // // // // //     if (!form.questionText.trim()) {\r\n// // // // // // //       return alert(\"Please enter question text.\");\r\n// // // // // // //     }\r\n// // // // // // //     if (questionType === \"MCQ\" && (opts.length < 2 || !form.correctAnswer.trim())) {\r\n// // // // // // //       return alert(\"Please enter at least 2 options and a correct answer.\");\r\n// // // // // // //     }\r\n\r\n// // // // // // //     setLoading(true);\r\n// // // // // // //     try {\r\n// // // // // // //       await API.post(\"/questions\", {\r\n// // // // // // //         questionType,\r\n// // // // // // //         questionText: form.questionText,\r\n// // // // // // //         options: opts,\r\n// // // // // // //         correctAnswer: questionType === \"MCQ\" ? form.correctAnswer : \"\",\r\n// // // // // // //       });\r\n\r\n// // // // // // //       setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" });\r\n// // // // // // //       await fetchQuestions();\r\n// // // // // // //       alert(\"✅ Question added successfully!\");\r\n// // // // // // //     } catch (err) {\r\n// // // // // // //       console.error(err);\r\n// // // // // // //       alert(err.response?.data?.error || \"Failed to add question.\");\r\n// // // // // // //     } finally {\r\n// // // // // // //       setLoading(false);\r\n// // // // // // //     }\r\n// // // // // // //   };\r\n\r\n// // // // // // //   // 🟢 Upload File\r\n// // // // // // //   const handleUpload = async () => {\r\n// // // // // // //     if (!file) return alert(\"Please select a file to upload.\");\r\n// // // // // // //     const fd = new FormData();\r\n// // // // // // //     fd.append(\"file\", file);\r\n\r\n// // // // // // //     try {\r\n// // // // // // //       const res = await API.post(\"/questions/upload\", fd, {\r\n// // // // // // //         headers: { \"Content-Type\": \"multipart/form-data\" },\r\n// // // // // // //       });\r\n// // // // // // //       alert(res.data.message || \"✅ File uploaded successfully!\");\r\n// // // // // // //       await fetchQuestions();\r\n// // // // // // //     } catch (err) {\r\n// // // // // // //       console.error(err);\r\n// // // // // // //       alert(err.response?.data?.error || \"❌ File upload failed.\");\r\n// // // // // // //     }\r\n// // // // // // //   };\r\n\r\n// // // // // // //   const handleLogout = () => {\r\n// // // // // // //     localStorage.removeItem(\"adminToken\");\r\n// // // // // // //     navigate(\"/admin/login\");\r\n// // // // // // //   };\r\n\r\n// // // // // // //   return (\r\n// // // // // // //     <div className=\"admin-dashboard\">\r\n// // // // // // //       {/* Header */}\r\n// // // // // // //       <div className=\"admin-header\">\r\n// // // // // // //         <h2>Admin Dashboard</h2>\r\n// // // // // // //         <button className=\"logout-btn\" onClick={handleLogout}>\r\n// // // // // // //           Logout\r\n// // // // // // //         </button>\r\n// // // // // // //       </div>\r\n\r\n// // // // // // //       {/* Tabs */}\r\n// // // // // // //       <div className=\"tab-buttons\">\r\n// // // // // // //         <button\r\n// // // // // // //           className={`tab-btn ${activeTab === \"questions\" ? \"active\" : \"\"}`}\r\n// // // // // // //           onClick={() => setActiveTab(\"questions\")}\r\n// // // // // // //         >\r\n// // // // // // //           🧩 Questions\r\n// // // // // // //         </button>\r\n// // // // // // //         <button\r\n// // // // // // //           className={`tab-btn ${activeTab === \"results\" ? \"active\" : \"\"}`}\r\n// // // // // // //           onClick={() => setActiveTab(\"results\")}\r\n// // // // // // //         >\r\n// // // // // // //           📊 Test Results\r\n// // // // // // //         </button>\r\n// // // // // // //       </div>\r\n\r\n// // // // // // //       {/* Content based on active tab */}\r\n// // // // // // //       {activeTab === \"questions\" ? (\r\n// // // // // // //         <div className=\"tab-content\">\r\n// // // // // // //           {/* Add Question / Upload Section */}\r\n// // // // // // //           <div className=\"card form-section\">\r\n// // // // // // //             <h5>Add or Upload Questions</h5>\r\n\r\n// // // // // // //             <form onSubmit={handleAddQuestion}>\r\n// // // // // // //               <div className=\"mb-3\">\r\n// // // // // // //                 <label className=\"form-label\">Question Type</label>\r\n// // // // // // //                 <select\r\n// // // // // // //                   className=\"form-select\"\r\n// // // // // // //                   value={questionType}\r\n// // // // // // //                   onChange={(e) => setQuestionType(e.target.value)}\r\n// // // // // // //                 >\r\n// // // // // // //                   <option value=\"MCQ\">MCQ</option>\r\n// // // // // // //                   <option value=\"Theory\">Theory</option>\r\n// // // // // // //                 </select>\r\n// // // // // // //               </div>\r\n\r\n// // // // // // //               <div className=\"mb-3\">\r\n// // // // // // //                 <label className=\"form-label\">Question Text</label>\r\n// // // // // // //                 <textarea\r\n// // // // // // //                   className=\"form-control\"\r\n// // // // // // //                   rows={questionType === \"Theory\" ? 3 : 2}\r\n// // // // // // //                   value={form.questionText}\r\n// // // // // // //                   onChange={(e) =>\r\n// // // // // // //                     setForm({ ...form, questionText: e.target.value })\r\n// // // // // // //                   }\r\n// // // // // // //                   placeholder=\"Enter your question here...\"\r\n// // // // // // //                 />\r\n// // // // // // //               </div>\r\n\r\n// // // // // // //               {questionType === \"MCQ\" && (\r\n// // // // // // //                 <>\r\n// // // // // // //                   <div className=\"mb-3\">\r\n// // // // // // //                     <label className=\"form-label\">Options (separate by |)</label>\r\n// // // // // // //                     <input\r\n// // // // // // //                       className=\"form-control\"\r\n// // // // // // //                       value={form.optionsText}\r\n// // // // // // //                       onChange={(e) =>\r\n// // // // // // //                         setForm({ ...form, optionsText: e.target.value })\r\n// // // // // // //                       }\r\n// // // // // // //                       placeholder=\"Option A | Option B | Option C | Option D\"\r\n// // // // // // //                     />\r\n// // // // // // //                   </div>\r\n\r\n// // // // // // //                   <div className=\"mb-3\">\r\n// // // // // // //                     <label className=\"form-label\">Correct Answer</label>\r\n// // // // // // //                     <input\r\n// // // // // // //                       className=\"form-control\"\r\n// // // // // // //                       value={form.correctAnswer}\r\n// // // // // // //                       onChange={(e) =>\r\n// // // // // // //                         setForm({ ...form, correctAnswer: e.target.value })\r\n// // // // // // //                       }\r\n// // // // // // //                       placeholder=\"Enter correct answer text\"\r\n// // // // // // //                     />\r\n// // // // // // //                   </div>\r\n// // // // // // //                 </>\r\n// // // // // // //               )}\r\n\r\n// // // // // // //               <div className=\"d-flex gap-2\">\r\n// // // // // // //                 <button className=\"btn btn-success\" type=\"submit\" disabled={loading}>\r\n// // // // // // //                   {loading ? \"Adding...\" : \"Add Question\"}\r\n// // // // // // //                 </button>\r\n// // // // // // //                 <button\r\n// // // // // // //                   type=\"button\"\r\n// // // // // // //                   className=\"btn btn-secondary\"\r\n// // // // // // //                   onClick={() =>\r\n// // // // // // //                     setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" })\r\n// // // // // // //                   }\r\n// // // // // // //                 >\r\n// // // // // // //                   Clear\r\n// // // // // // //                 </button>\r\n// // // // // // //               </div>\r\n// // // // // // //             </form>\r\n\r\n// // // // // // //             <hr className=\"my-4\" />\r\n\r\n// // // // // // //             {/* Upload Document Section */}\r\n// // // // // // //             <div className=\"upload-section\">\r\n// // // // // // //               <label className=\"form-label\">Upload Document (.docx)</label>\r\n// // // // // // //               <input\r\n// // // // // // //                 type=\"file\"\r\n// // // // // // //                 className=\"form-control\"\r\n// // // // // // //                 accept=\".docx\"\r\n// // // // // // //                 onChange={(e) => setFile(e.target.files[0])}\r\n// // // // // // //               />\r\n// // // // // // //               <div className=\"mt-2\">\r\n// // // // // // //                 <button className=\"btn btn-primary\" onClick={handleUpload}>\r\n// // // // // // //                   Upload\r\n// // // // // // //                 </button>\r\n// // // // // // //               </div>\r\n// // // // // // //             </div>\r\n// // // // // // //           </div>\r\n\r\n// // // // // // //           {/* Display Available Questions */}\r\n// // // // // // //           <div className=\"card available-questions\">\r\n// // // // // // //             <h5>Available Questions</h5>\r\n\r\n// // // // // // //             <h6 className=\"mt-3 text-primary\">MCQ Questions</h6>\r\n// // // // // // //             {questions.filter((q) => q.questionType === \"MCQ\").length === 0 && (\r\n// // // // // // //               <div className=\"text-muted\">No MCQs yet</div>\r\n// // // // // // //             )}\r\n// // // // // // //             {questions\r\n// // // // // // //               .filter((q) => q.questionType === \"MCQ\")\r\n// // // // // // //               .map((q, idx) => (\r\n// // // // // // //                 <div key={q._id} className=\"question-item\">\r\n// // // // // // //                   <strong>Q{idx + 1}:</strong> {q.questionText}\r\n// // // // // // //                   <div className=\"small text-muted\">\r\n// // // // // // //                     Options: {q.options.join(\" | \")}\r\n// // // // // // //                   </div>\r\n// // // // // // //                   <div className=\"small text-success\">\r\n// // // // // // //                     Correct: {q.correctAnswer}\r\n// // // // // // //                   </div>\r\n// // // // // // //                 </div>\r\n// // // // // // //               ))}\r\n\r\n// // // // // // //             <h6 className=\"mt-4 text-primary\">Theory Questions</h6>\r\n// // // // // // //             {questions.filter((q) => q.questionType === \"Theory\").length === 0 && (\r\n// // // // // // //               <div className=\"text-muted\">No theory questions yet</div>\r\n// // // // // // //             )}\r\n// // // // // // //             {questions\r\n// // // // // // //               .filter((q) => q.questionType === \"Theory\")\r\n// // // // // // //               .map((q, idx) => (\r\n// // // // // // //                 <div key={q._id} className=\"question-item\">\r\n// // // // // // //                   <strong>Q{idx + 1}:</strong> {q.questionText}\r\n// // // // // // //                 </div>\r\n// // // // // // //               ))}\r\n// // // // // // //           </div>\r\n// // // // // // //         </div>\r\n// // // // // // //       ) : (\r\n// // // // // // //         <div className=\"tab-content\">\r\n// // // // // // //           {/* Test Results Section */}\r\n// // // // // // //           <div className=\"card results-section\">\r\n// // // // // // //             <h5>Candidate Test Results</h5>\r\n\r\n// // // // // // //             {loadingResults ? (\r\n// // // // // // //               <div>Loading test results...</div>\r\n// // // // // // //             ) : results.length === 0 ? (\r\n// // // // // // //               <div className=\"text-muted\">No test results yet</div>\r\n// // // // // // //             ) : (\r\n// // // // // // //               <table className=\"results-table\">\r\n// // // // // // //                 <thead>\r\n// // // // // // //                   <tr>\r\n// // // // // // //                     <th>Name</th>\r\n// // // // // // //                     <th>Email</th>\r\n// // // // // // //                     <th>Total Questions</th>\r\n// // // // // // //                     <th>Correct</th>\r\n// // // // // // //                     <th>Score %</th>\r\n// // // // // // //                     <th>Submitted At</th>\r\n// // // // // // //                   </tr>\r\n// // // // // // //                 </thead>\r\n// // // // // // //                 <tbody>\r\n// // // // // // //                   {results.map((res, idx) => (\r\n// // // // // // //                     <tr key={idx}>\r\n// // // // // // //                       <td>{res.name}</td>\r\n// // // // // // //                       <td>{res.email}</td>\r\n// // // // // // //                       <td>{res.totalQuestions}</td>\r\n// // // // // // //                       <td>{res.correctAnswers}</td>\r\n// // // // // // //                       <td>{res.scorePercent}%</td>\r\n// // // // // // //                       <td>{new Date(res.submittedAt).toLocaleString()}</td>\r\n// // // // // // //                     </tr>\r\n// // // // // // //                   ))}\r\n// // // // // // //                 </tbody>\r\n// // // // // // //               </table>\r\n// // // // // // //             )}\r\n// // // // // // //           </div>\r\n// // // // // // //         </div>\r\n// // // // // // //       )}\r\n// // // // // // //     </div>\r\n// // // // // // //   );\r\n// // // // // // // }\r\n\r\n// // // // // // // // import React, { useEffect, useState } from \"react\";\r\n// // // // // // // // import API from \"../services/api\";\r\n// // // // // // // // import { useNavigate } from \"react-router-dom\";\r\n// // // // // // // // import \"../styles/AdminDashboard.css\";\r\n\r\n// // // // // // // // export default function AdminDashboard() {\r\n// // // // // // // //   const navigate = useNavigate();\r\n// // // // // // // //   const [questions, setQuestions] = useState([]);\r\n// // // // // // // //   const [results, setResults] = useState([]);\r\n// // // // // // // //   const [form, setForm] = useState({\r\n// // // // // // // //     questionText: \"\",\r\n// // // // // // // //     optionsText: \"\",\r\n// // // // // // // //     correctAnswer: \"\",\r\n// // // // // // // //   });\r\n// // // // // // // //   const [questionType, setQuestionType] = useState(\"MCQ\");\r\n// // // // // // // //   const [file, setFile] = useState(null);\r\n// // // // // // // //   const [loading, setLoading] = useState(false);\r\n// // // // // // // //   const [loadingResults, setLoadingResults] = useState(false);\r\n\r\n// // // // // // // //   // 🟢 Check admin login (token validation)\r\n// // // // // // // //   useEffect(() => {\r\n// // // // // // // //     const token = localStorage.getItem(\"adminToken\");\r\n// // // // // // // //     if (!token) navigate(\"/admin/login\");\r\n// // // // // // // //   }, [navigate]);\r\n\r\n// // // // // // // //   // 🟢 Fetch questions and test results on load\r\n// // // // // // // //   useEffect(() => {\r\n// // // // // // // //     fetchQuestions();\r\n// // // // // // // //     fetchResults();\r\n// // // // // // // //   }, []);\r\n\r\n// // // // // // // //   const fetchQuestions = async () => {\r\n// // // // // // // //     try {\r\n// // // // // // // //       const res = await API.get(\"/questions\");\r\n// // // // // // // //       setQuestions(res.data || []);\r\n// // // // // // // //     } catch (err) {\r\n// // // // // // // //       console.error(err);\r\n// // // // // // // //       alert(\"❌ Failed to load questions.\");\r\n// // // // // // // //     }\r\n// // // // // // // //   };\r\n\r\n// // // // // // // //   const fetchResults = async () => {\r\n// // // // // // // //     setLoadingResults(true);\r\n// // // // // // // //     try {\r\n// // // // // // // //       const res = await API.get(\"/tests\");\r\n// // // // // // // //       setResults(res.data || []);\r\n// // // // // // // //     } catch (err) {\r\n// // // // // // // //       console.error(err);\r\n// // // // // // // //       alert(\"❌ Failed to load test results.\");\r\n// // // // // // // //     } finally {\r\n// // // // // // // //       setLoadingResults(false);\r\n// // // // // // // //     }\r\n// // // // // // // //   };\r\n\r\n// // // // // // // //   // 🟢 Add Question Manually\r\n// // // // // // // //   const handleAddQuestion = async (e) => {\r\n// // // // // // // //     e.preventDefault();\r\n// // // // // // // //     const opts =\r\n// // // // // // // //       questionType === \"MCQ\"\r\n// // // // // // // //         ? form.optionsText.split(\"|\").map((s) => s.trim()).filter(Boolean)\r\n// // // // // // // //         : [];\r\n\r\n// // // // // // // //     if (!form.questionText.trim()) {\r\n// // // // // // // //       return alert(\"Please enter question text.\");\r\n// // // // // // // //     }\r\n// // // // // // // //     if (questionType === \"MCQ\" && (opts.length < 2 || !form.correctAnswer.trim())) {\r\n// // // // // // // //       return alert(\"Please enter at least 2 options and a correct answer.\");\r\n// // // // // // // //     }\r\n\r\n// // // // // // // //     setLoading(true);\r\n// // // // // // // //     try {\r\n// // // // // // // //       await API.post(\"/questions\", {\r\n// // // // // // // //         questionType,\r\n// // // // // // // //         questionText: form.questionText,\r\n// // // // // // // //         options: opts,\r\n// // // // // // // //         correctAnswer: questionType === \"MCQ\" ? form.correctAnswer : \"\",\r\n// // // // // // // //       });\r\n\r\n// // // // // // // //       setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" });\r\n// // // // // // // //       await fetchQuestions();\r\n// // // // // // // //       alert(\"✅ Question added successfully!\");\r\n// // // // // // // //     } catch (err) {\r\n// // // // // // // //       console.error(err);\r\n// // // // // // // //       alert(err.response?.data?.error || \"Failed to add question.\");\r\n// // // // // // // //     } finally {\r\n// // // // // // // //       setLoading(false);\r\n// // // // // // // //     }\r\n// // // // // // // //   };\r\n\r\n// // // // // // // //   // 🟢 Upload .docx question file\r\n// // // // // // // //   const handleUpload = async () => {\r\n// // // // // // // //     if (!file) return alert(\"Please select a file to upload.\");\r\n// // // // // // // //     const fd = new FormData();\r\n// // // // // // // //     fd.append(\"file\", file);\r\n\r\n// // // // // // // //     try {\r\n// // // // // // // //       const res = await API.post(\"/questions/upload\", fd, {\r\n// // // // // // // //         headers: { \"Content-Type\": \"multipart/form-data\" },\r\n// // // // // // // //       });\r\n// // // // // // // //       alert(res.data.message || \"✅ File uploaded successfully!\");\r\n// // // // // // // //       await fetchQuestions();\r\n// // // // // // // //     } catch (err) {\r\n// // // // // // // //       console.error(err);\r\n// // // // // // // //       alert(err.response?.data?.error || \"❌ File upload failed.\");\r\n// // // // // // // //     }\r\n// // // // // // // //   };\r\n\r\n// // // // // // // //   // 🟢 Logout\r\n// // // // // // // //   const handleLogout = () => {\r\n// // // // // // // //     localStorage.removeItem(\"adminToken\");\r\n// // // // // // // //     navigate(\"/admin/login\");\r\n// // // // // // // //   };\r\n\r\n// // // // // // // //   return (\r\n// // // // // // // //     <div className=\"container container-center py-4 admin-dashboard\">\r\n// // // // // // // //       {/* Header */}\r\n// // // // // // // //       <div className=\"d-flex justify-content-between align-items-center mb-3 admin-header\">\r\n// // // // // // // //         <h2>Admin Dashboard</h2>\r\n// // // // // // // //         <button className=\"btn btn-outline-danger btn-sm\" onClick={handleLogout}>\r\n// // // // // // // //           Logout\r\n// // // // // // // //         </button>\r\n// // // // // // // //       </div>\r\n\r\n// // // // // // // //       {/* Add Question / Upload Section */}\r\n// // // // // // // //       <div className=\"card card-clean p-4 mb-4 form-section\">\r\n// // // // // // // //         <h5>Add questions or upload documents that will be shown to candidates.</h5>\r\n\r\n// // // // // // // //         {/* Add Question Form */}\r\n// // // // // // // //         <form onSubmit={handleAddQuestion} className=\"mt-3\">\r\n// // // // // // // //           <div className=\"mb-3\">\r\n// // // // // // // //             <label className=\"form-label\">Question Type</label>\r\n// // // // // // // //             <select\r\n// // // // // // // //               className=\"form-select\"\r\n// // // // // // // //               value={questionType}\r\n// // // // // // // //               onChange={(e) => setQuestionType(e.target.value)}\r\n// // // // // // // //             >\r\n// // // // // // // //               <option value=\"MCQ\">MCQ</option>\r\n// // // // // // // //               <option value=\"Theory\">Theory</option>\r\n// // // // // // // //             </select>\r\n// // // // // // // //           </div>\r\n\r\n// // // // // // // //           <div className=\"mb-3\">\r\n// // // // // // // //             <label className=\"form-label\">Question Text</label>\r\n// // // // // // // //             <textarea\r\n// // // // // // // //               className=\"form-control\"\r\n// // // // // // // //               rows={questionType === \"Theory\" ? 3 : 2}\r\n// // // // // // // //               value={form.questionText}\r\n// // // // // // // //               onChange={(e) => setForm({ ...form, questionText: e.target.value })}\r\n// // // // // // // //               placeholder=\"Enter your question here...\"\r\n// // // // // // // //             />\r\n// // // // // // // //           </div>\r\n\r\n// // // // // // // //           {questionType === \"MCQ\" && (\r\n// // // // // // // //             <>\r\n// // // // // // // //               <div className=\"mb-3\">\r\n// // // // // // // //                 <label className=\"form-label\">Options (separate by |)</label>\r\n// // // // // // // //                 <input\r\n// // // // // // // //                   className=\"form-control\"\r\n// // // // // // // //                   value={form.optionsText}\r\n// // // // // // // //                   onChange={(e) =>\r\n// // // // // // // //                     setForm({ ...form, optionsText: e.target.value })\r\n// // // // // // // //                   }\r\n// // // // // // // //                   placeholder=\"Option A | Option B | Option C | Option D\"\r\n// // // // // // // //                 />\r\n// // // // // // // //               </div>\r\n\r\n// // // // // // // //               <div className=\"mb-3\">\r\n// // // // // // // //                 <label className=\"form-label\">\r\n// // // // // // // //                   Correct Answer (exact text of one option)\r\n// // // // // // // //                 </label>\r\n// // // // // // // //                 <input\r\n// // // // // // // //                   className=\"form-control\"\r\n// // // // // // // //                   value={form.correctAnswer}\r\n// // // // // // // //                   onChange={(e) =>\r\n// // // // // // // //                     setForm({ ...form, correctAnswer: e.target.value })\r\n// // // // // // // //                   }\r\n// // // // // // // //                   placeholder=\"Enter correct answer text\"\r\n// // // // // // // //                 />\r\n// // // // // // // //               </div>\r\n// // // // // // // //             </>\r\n// // // // // // // //           )}\r\n\r\n// // // // // // // //           <div className=\"mb-3 d-flex gap-2\">\r\n// // // // // // // //             <button\r\n// // // // // // // //               className=\"btn btn-success\"\r\n// // // // // // // //               type=\"submit\"\r\n// // // // // // // //               disabled={loading}\r\n// // // // // // // //             >\r\n// // // // // // // //               {loading ? \"Adding...\" : \"Add Question\"}\r\n// // // // // // // //             </button>\r\n// // // // // // // //             <button\r\n// // // // // // // //               type=\"button\"\r\n// // // // // // // //               className=\"btn btn-secondary\"\r\n// // // // // // // //               onClick={() =>\r\n// // // // // // // //                 setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" })\r\n// // // // // // // //               }\r\n// // // // // // // //             >\r\n// // // // // // // //               Clear\r\n// // // // // // // //             </button>\r\n// // // // // // // //           </div>\r\n// // // // // // // //         </form>\r\n\r\n// // // // // // // //         <hr className=\"my-4\" />\r\n\r\n// // // // // // // //         {/* Upload Document Section */}\r\n// // // // // // // //         <div className=\"mb-3 upload-section\">\r\n// // // // // // // //           <label className=\"form-label\">Upload Document (.docx)</label>\r\n// // // // // // // //           <input\r\n// // // // // // // //             type=\"file\"\r\n// // // // // // // //             className=\"form-control\"\r\n// // // // // // // //             accept=\".docx\"\r\n// // // // // // // //             onChange={(e) => setFile(e.target.files[0])}\r\n// // // // // // // //           />\r\n// // // // // // // //           <div className=\"mt-2\">\r\n// // // // // // // //             <button className=\"btn btn-primary\" onClick={handleUpload}>\r\n// // // // // // // //               Upload\r\n// // // // // // // //             </button>\r\n// // // // // // // //           </div>\r\n// // // // // // // //         </div>\r\n// // // // // // // //       </div>\r\n\r\n// // // // // // // //       {/* Available Questions */}\r\n// // // // // // // //       <div className=\"card card-clean p-4 mb-4 available-questions\">\r\n// // // // // // // //         <h5>Available Questions</h5>\r\n\r\n// // // // // // // //         {/* MCQ Section */}\r\n// // // // // // // //         <h6 className=\"mt-3 text-primary\">MCQ Questions</h6>\r\n// // // // // // // //         {questions.filter((q) => q.questionType === \"MCQ\").length === 0 && (\r\n// // // // // // // //           <div className=\"text-muted\">No MCQs yet</div>\r\n// // // // // // // //         )}\r\n// // // // // // // //         {questions\r\n// // // // // // // //           .filter((q) => q.questionType === \"MCQ\")\r\n// // // // // // // //           .map((q, idx) => (\r\n// // // // // // // //             <div key={q._id} className=\"mb-3 border-bottom pb-2\">\r\n// // // // // // // //               <strong>Q{idx + 1}:</strong> {q.questionText}\r\n// // // // // // // //               <div className=\"small text-muted\">\r\n// // // // // // // //                 Options: {q.options.join(\" | \")}\r\n// // // // // // // //               </div>\r\n// // // // // // // //               <div className=\"small text-success\">\r\n// // // // // // // //                 Correct: {q.correctAnswer}\r\n// // // // // // // //               </div>\r\n// // // // // // // //             </div>\r\n// // // // // // // //           ))}\r\n\r\n// // // // // // // //         {/* Theory Section */}\r\n// // // // // // // //         <h6 className=\"mt-4 text-primary\">Theory Questions</h6>\r\n// // // // // // // //         {questions.filter((q) => q.questionType === \"Theory\").length === 0 && (\r\n// // // // // // // //           <div className=\"text-muted\">No theory questions yet</div>\r\n// // // // // // // //         )}\r\n// // // // // // // //         {questions\r\n// // // // // // // //           .filter((q) => q.questionType === \"Theory\")\r\n// // // // // // // //           .map((q, idx) => (\r\n// // // // // // // //             <div key={q._id} className=\"mb-3 border-bottom pb-2\">\r\n// // // // // // // //               <strong>Q{idx + 1}:</strong> {q.questionText}\r\n// // // // // // // //             </div>\r\n// // // // // // // //           ))}\r\n// // // // // // // //       </div>\r\n\r\n// // // // // // // //       {/* Test Results Section */}\r\n// // // // // // // //       <div className=\"card card-clean p-4 mb-4 results-section\">\r\n// // // // // // // //         <h5>Candidate Test Results</h5>\r\n\r\n// // // // // // // //         {loadingResults ? (\r\n// // // // // // // //           <div>Loading test results...</div>\r\n// // // // // // // //         ) : results.length === 0 ? (\r\n// // // // // // // //           <div className=\"text-muted\">No test results yet</div>\r\n// // // // // // // //         ) : (\r\n// // // // // // // //           <table className=\"results-table\">\r\n// // // // // // // //             <thead>\r\n// // // // // // // //               <tr>\r\n// // // // // // // //                 <th>Name</th>\r\n// // // // // // // //                 <th>Email</th>\r\n// // // // // // // //                 <th>Total Questions</th>\r\n// // // // // // // //                 <th>Correct</th>\r\n// // // // // // // //                 <th>Score %</th>\r\n// // // // // // // //                 <th>Submitted At</th>\r\n// // // // // // // //               </tr>\r\n// // // // // // // //             </thead>\r\n// // // // // // // //             <tbody>\r\n// // // // // // // //               {results.map((res, idx) => (\r\n// // // // // // // //                 <tr key={idx}>\r\n// // // // // // // //                   <td>{res.name}</td>\r\n// // // // // // // //                   <td>{res.email}</td>\r\n// // // // // // // //                   <td>{res.totalQuestions}</td>\r\n// // // // // // // //                   <td>{res.correctAnswers}</td>\r\n// // // // // // // //                   <td>{res.scorePercent}%</td>\r\n// // // // // // // //                   <td>{new Date(res.submittedAt).toLocaleString()}</td>\r\n// // // // // // // //                 </tr>\r\n// // // // // // // //               ))}\r\n// // // // // // // //             </tbody>\r\n// // // // // // // //           </table>\r\n// // // // // // // //         )}\r\n// // // // // // // //       </div>\r\n// // // // // // // //     </div>\r\n// // // // // // // //   );\r\n// // // // // // // // }\r\n\r\n// // // // // // // // // import React, { useEffect, useState } from \"react\";\r\n// // // // // // // // // import API from \"../services/api\";\r\n// // // // // // // // // import { useNavigate } from \"react-router-dom\";\r\n// // // // // // // // // import \"../styles/AdminDashboard.css\";\r\n\r\n// // // // // // // // // export default function AdminDashboard() {\r\n// // // // // // // // //   const navigate = useNavigate();\r\n// // // // // // // // //   const [questions, setQuestions] = useState([]);\r\n// // // // // // // // //   const [form, setForm] = useState({\r\n// // // // // // // // //     questionText: \"\",\r\n// // // // // // // // //     optionsText: \"\",\r\n// // // // // // // // //     correctAnswer: \"\",\r\n// // // // // // // // //   });\r\n// // // // // // // // //   const [questionType, setQuestionType] = useState(\"MCQ\");\r\n// // // // // // // // //   const [file, setFile] = useState(null);\r\n// // // // // // // // //   const [loading, setLoading] = useState(false);\r\n\r\n// // // // // // // // //   // 🟢 Check admin login (token validation)\r\n// // // // // // // // //   useEffect(() => {\r\n// // // // // // // // //     const token = localStorage.getItem(\"adminToken\");\r\n// // // // // // // // //     if (!token) navigate(\"/admin/login\");\r\n// // // // // // // // //   }, [navigate]);\r\n\r\n// // // // // // // // //   // 🟢 Fetch questions from DB\r\n// // // // // // // // //   useEffect(() => {\r\n// // // // // // // // //     fetchQuestions();\r\n// // // // // // // // //   }, []);\r\n\r\n// // // // // // // // //   const fetchQuestions = async () => {\r\n// // // // // // // // //     try {\r\n// // // // // // // // //       const res = await API.get(\"/questions\");\r\n// // // // // // // // //       setQuestions(res.data || []);\r\n// // // // // // // // //     } catch (err) {\r\n// // // // // // // // //       console.error(err);\r\n// // // // // // // // //       alert(\"Failed to load questions.\");\r\n// // // // // // // // //     }\r\n// // // // // // // // //   };\r\n\r\n// // // // // // // // //   // 🟢 Add Question Manually\r\n// // // // // // // // //   const handleAddQuestion = async (e) => {\r\n// // // // // // // // //     e.preventDefault();\r\n// // // // // // // // //     const opts =\r\n// // // // // // // // //       questionType === \"MCQ\"\r\n// // // // // // // // //         ? form.optionsText.split(\"|\").map((s) => s.trim()).filter(Boolean)\r\n// // // // // // // // //         : [];\r\n\r\n// // // // // // // // //     if (!form.questionText.trim()) {\r\n// // // // // // // // //       return alert(\"Please enter question text.\");\r\n// // // // // // // // //     }\r\n// // // // // // // // //     if (questionType === \"MCQ\" && (opts.length < 2 || !form.correctAnswer.trim())) {\r\n// // // // // // // // //       return alert(\"Please enter at least 2 options and a correct answer.\");\r\n// // // // // // // // //     }\r\n\r\n// // // // // // // // //     setLoading(true);\r\n// // // // // // // // //     try {\r\n// // // // // // // // //       await API.post(\"/questions\", {\r\n// // // // // // // // //         questionType,\r\n// // // // // // // // //         questionText: form.questionText,\r\n// // // // // // // // //         options: opts,\r\n// // // // // // // // //         correctAnswer: questionType === \"MCQ\" ? form.correctAnswer : \"\",\r\n// // // // // // // // //       });\r\n\r\n// // // // // // // // //       setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" });\r\n// // // // // // // // //       await fetchQuestions();\r\n// // // // // // // // //       alert(\"✅ Question added successfully!\");\r\n// // // // // // // // //     } catch (err) {\r\n// // // // // // // // //       console.error(err);\r\n// // // // // // // // //       alert(err.response?.data?.error || \"Failed to add question.\");\r\n// // // // // // // // //     } finally {\r\n// // // // // // // // //       setLoading(false);\r\n// // // // // // // // //     }\r\n// // // // // // // // //   };\r\n\r\n// // // // // // // // //   // 🟢 Upload .docx question file\r\n// // // // // // // // //   const handleUpload = async () => {\r\n// // // // // // // // //     if (!file) return alert(\"Please select a file to upload.\");\r\n// // // // // // // // //     const fd = new FormData();\r\n// // // // // // // // //     fd.append(\"file\", file);\r\n\r\n// // // // // // // // //     try {\r\n// // // // // // // // //       const res = await API.post(\"/questions/upload\", fd, {\r\n// // // // // // // // //         headers: { \"Content-Type\": \"multipart/form-data\" },\r\n// // // // // // // // //       });\r\n// // // // // // // // //       alert(res.data.message || \"File uploaded successfully!\");\r\n// // // // // // // // //       await fetchQuestions();\r\n// // // // // // // // //     } catch (err) {\r\n// // // // // // // // //       console.error(err);\r\n// // // // // // // // //       alert(err.response?.data?.error || \"File upload failed.\");\r\n// // // // // // // // //     }\r\n// // // // // // // // //   };\r\n\r\n// // // // // // // // //   // 🟢 Logout\r\n// // // // // // // // //   const handleLogout = () => {\r\n// // // // // // // // //     localStorage.removeItem(\"adminToken\");\r\n// // // // // // // // //     navigate(\"/admin/login\");\r\n// // // // // // // // //   };\r\n\r\n// // // // // // // // //   return (\r\n// // // // // // // // //     <div className=\"container container-center py-4\">\r\n// // // // // // // // //       <div className=\"d-flex justify-content-between align-items-center mb-3\">\r\n// // // // // // // // //         <h2>Admin Dashboard</h2>\r\n// // // // // // // // //         <button className=\"btn btn-outline-danger btn-sm\" onClick={handleLogout}>\r\n// // // // // // // // //           Logout\r\n// // // // // // // // //         </button>\r\n// // // // // // // // //       </div>\r\n\r\n// // // // // // // // //       <div className=\"card card-clean p-4 mb-4\">\r\n// // // // // // // // //         <h5>Add questions or upload documents that will be shown to candidates.</h5>\r\n\r\n// // // // // // // // //         {/* Add Question Form */}\r\n// // // // // // // // //         <form onSubmit={handleAddQuestion} className=\"mt-3\">\r\n// // // // // // // // //           <div className=\"mb-3\">\r\n// // // // // // // // //             <label className=\"form-label\">Question Type</label>\r\n// // // // // // // // //             <select\r\n// // // // // // // // //               className=\"form-select\"\r\n// // // // // // // // //               value={questionType}\r\n// // // // // // // // //               onChange={(e) => setQuestionType(e.target.value)}\r\n// // // // // // // // //             >\r\n// // // // // // // // //               <option value=\"MCQ\">MCQ</option>\r\n// // // // // // // // //               <option value=\"Theory\">Theory</option>\r\n// // // // // // // // //             </select>\r\n// // // // // // // // //           </div>\r\n\r\n// // // // // // // // //           <div className=\"mb-3\">\r\n// // // // // // // // //             <label className=\"form-label\">Question Text</label>\r\n// // // // // // // // //             <textarea\r\n// // // // // // // // //               className=\"form-control\"\r\n// // // // // // // // //               rows={questionType === \"Theory\" ? 3 : 2}\r\n// // // // // // // // //               value={form.questionText}\r\n// // // // // // // // //               onChange={(e) => setForm({ ...form, questionText: e.target.value })}\r\n// // // // // // // // //               placeholder=\"Enter your question here...\"\r\n// // // // // // // // //             />\r\n// // // // // // // // //           </div>\r\n\r\n// // // // // // // // //           {questionType === \"MCQ\" && (\r\n// // // // // // // // //             <>\r\n// // // // // // // // //               <div className=\"mb-3\">\r\n// // // // // // // // //                 <label className=\"form-label\">Options (separate by |)</label>\r\n// // // // // // // // //                 <input\r\n// // // // // // // // //                   className=\"form-control\"\r\n// // // // // // // // //                   value={form.optionsText}\r\n// // // // // // // // //                   onChange={(e) =>\r\n// // // // // // // // //                     setForm({ ...form, optionsText: e.target.value })\r\n// // // // // // // // //                   }\r\n// // // // // // // // //                   placeholder=\"Option A | Option B | Option C | Option D\"\r\n// // // // // // // // //                 />\r\n// // // // // // // // //               </div>\r\n\r\n// // // // // // // // //               <div className=\"mb-3\">\r\n// // // // // // // // //                 <label className=\"form-label\">\r\n// // // // // // // // //                   Correct Answer (exact text of one option)\r\n// // // // // // // // //                 </label>\r\n// // // // // // // // //                 <input\r\n// // // // // // // // //                   className=\"form-control\"\r\n// // // // // // // // //                   value={form.correctAnswer}\r\n// // // // // // // // //                   onChange={(e) =>\r\n// // // // // // // // //                     setForm({ ...form, correctAnswer: e.target.value })\r\n// // // // // // // // //                   }\r\n// // // // // // // // //                   placeholder=\"Enter correct answer text\"\r\n// // // // // // // // //                 />\r\n// // // // // // // // //               </div>\r\n// // // // // // // // //             </>\r\n// // // // // // // // //           )}\r\n\r\n// // // // // // // // //           <div className=\"mb-3 d-flex gap-2\">\r\n// // // // // // // // //             <button\r\n// // // // // // // // //               className=\"btn btn-success\"\r\n// // // // // // // // //               type=\"submit\"\r\n// // // // // // // // //               disabled={loading}\r\n// // // // // // // // //             >\r\n// // // // // // // // //               {loading ? \"Adding...\" : \"Add Question\"}\r\n// // // // // // // // //             </button>\r\n// // // // // // // // //             <button\r\n// // // // // // // // //               type=\"button\"\r\n// // // // // // // // //               className=\"btn btn-secondary\"\r\n// // // // // // // // //               onClick={() =>\r\n// // // // // // // // //                 setForm({ questionText: \"\", optionsText: \"\", correctAnswer: \"\" })\r\n// // // // // // // // //               }\r\n// // // // // // // // //             >\r\n// // // // // // // // //               Clear\r\n// // // // // // // // //             </button>\r\n// // // // // // // // //           </div>\r\n// // // // // // // // //         </form>\r\n\r\n// // // // // // // // //         <hr className=\"my-4\" />\r\n\r\n// // // // // // // // //         {/* Upload Document Section */}\r\n// // // // // // // // //         <div className=\"mb-3\">\r\n// // // // // // // // //           <label className=\"form-label\">Upload Document (.docx)</label>\r\n// // // // // // // // //           <input\r\n// // // // // // // // //             type=\"file\"\r\n// // // // // // // // //             className=\"form-control\"\r\n// // // // // // // // //             accept=\".docx\"\r\n// // // // // // // // //             onChange={(e) => setFile(e.target.files[0])}\r\n// // // // // // // // //           />\r\n// // // // // // // // //           <div className=\"mt-2\">\r\n// // // // // // // // //             <button className=\"btn btn-primary\" onClick={handleUpload}>\r\n// // // // // // // // //               Upload\r\n// // // // // // // // //             </button>\r\n// // // // // // // // //           </div>\r\n// // // // // // // // //         </div>\r\n// // // // // // // // //       </div>\r\n\r\n// // // // // // // // //       {/* Display All Questions */}\r\n// // // // // // // // //       <div className=\"card card-clean p-4\">\r\n// // // // // // // // //         <h5>Available Questions</h5>\r\n\r\n// // // // // // // // //         {/* MCQ Section */}\r\n// // // // // // // // //         <h6 className=\"mt-3 text-primary\">MCQ Questions</h6>\r\n// // // // // // // // //         {questions.filter((q) => q.questionType === \"MCQ\").length === 0 && (\r\n// // // // // // // // //           <div className=\"text-muted\">No MCQs yet</div>\r\n// // // // // // // // //         )}\r\n// // // // // // // // //         {questions\r\n// // // // // // // // //           .filter((q) => q.questionType === \"MCQ\")\r\n// // // // // // // // //           .map((q, idx) => (\r\n// // // // // // // // //             <div key={q._id} className=\"mb-3 border-bottom pb-2\">\r\n// // // // // // // // //               <strong>Q{idx + 1}:</strong> {q.questionText}\r\n// // // // // // // // //               <div className=\"small text-muted\">\r\n// // // // // // // // //                 Options: {q.options.join(\" | \")}\r\n// // // // // // // // //               </div>\r\n// // // // // // // // //               <div className=\"small text-success\">\r\n// // // // // // // // //                 Correct: {q.correctAnswer}\r\n// // // // // // // // //               </div>\r\n// // // // // // // // //             </div>\r\n// // // // // // // // //           ))}\r\n\r\n// // // // // // // // //         {/* Theory Section */}\r\n// // // // // // // // //         <h6 className=\"mt-4 text-primary\">Theory Questions</h6>\r\n// // // // // // // // //         {questions.filter((q) => q.questionType === \"Theory\").length === 0 && (\r\n// // // // // // // // //           <div className=\"text-muted\">No theory questions yet</div>\r\n// // // // // // // // //         )}\r\n// // // // // // // // //         {questions\r\n// // // // // // // // //           .filter((q) => q.questionType === \"Theory\")\r\n// // // // // // // // //           .map((q, idx) => (\r\n// // // // // // // // //             <div key={q._id} className=\"mb-3 border-bottom pb-2\">\r\n// // // // // // // // //               <strong>Q{idx + 1}:</strong> {q.questionText}\r\n// // // // // // // // //             </div>\r\n// // // // // // // // //           ))}\r\n// // // // // // // // //       </div>\r\n// // // // // // // // //     </div>\r\n// // // // // // // // //   );\r\n// // // // // // // // // }\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,GAAG,MAAM,iBAAiB;AACjC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAO,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,eAAe,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACvC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,WAAW,CAAC;EACvD,MAAM,CAACc,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAC;IAC/BgB,YAAY,EAAE,EAAE;IAChBC,UAAU,EAAE;EACd,CAAC,CAAC;EACF,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACoB,OAAO,EAAEC,UAAU,CAAC,GAAGrB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACsB,cAAc,EAAEC,iBAAiB,CAAC,GAAGvB,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACwB,SAAS,EAAEC,YAAY,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC;;EAEhD;EACA,MAAM,CAAC0B,WAAW,EAAEC,cAAc,CAAC,GAAG3B,QAAQ,CAAC;IAC7C4B,QAAQ,EAAE,KAAK;IACfC,aAAa,EAAE,EAAE;IACjBC,SAAS,EAAE;EACb,CAAC,CAAC;;EAEF;EACA/B,SAAS,CAAC,MAAM;IACd,MAAMgC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IAChD,IAAI,CAACF,KAAK,EAAExB,QAAQ,CAAC,cAAc,CAAC;EACtC,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;;EAEd;EACAR,SAAS,CAAC,MAAM;IACdmC,cAAc,CAAC,CAAC;IAChBC,YAAY,CAAC,CAAC;IACdC,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMA,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI;MACF,MAAMC,GAAG,GAAG,MAAMpC,GAAG,CAACqC,WAAW,CAACC,GAAG,CAAC,CAAC;MACvC,IAAIF,GAAG,CAACG,IAAI,EAAEb,cAAc,CAACU,GAAG,CAACG,IAAI,CAAC;IACxC,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,8BAA8B,EAAEF,GAAG,CAAC;IACpD;EACF,CAAC;;EAED;EACA,MAAMG,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI;MACF;MACA,MAAM3C,GAAG,CAACqC,WAAW,CAACO,MAAM,CAAC;QAC3BjB,QAAQ,EAAE,IAAI;QACdC,aAAa,EAAEH,WAAW,CAACG,aAAa;QACxCC,SAAS,EAAEJ,WAAW,CAACI;MACzB,CAAC,CAAC;;MAEF;MACA,MAAMO,GAAG,GAAG,MAAMpC,GAAG,CAAC6C,IAAI,CAACC,WAAW,CAAC,CAAC;MACxCC,KAAK,CAACX,GAAG,CAACG,IAAI,CAACS,OAAO,IAAI,sCAAsC,CAAC;MACjE,MAAMC,iBAAiB,CAAC,CAAC;IAC3B,CAAC,CAAC,OAAOT,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEF,GAAG,CAAC;MAC7CO,KAAK,CAAC,yBAAyB,CAAC;IAClC;EACF,CAAC;;EAED;EACA,MAAMG,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACF,MAAMlD,GAAG,CAACqC,WAAW,CAACO,MAAM,CAAC;QAAEjB,QAAQ,EAAE;MAAM,CAAC,CAAC;MACjDoB,KAAK,CAAC,+BAA+B,CAAC;MACtC,MAAMZ,gBAAgB,CAAC,CAAC;IAC1B,CAAC,CAAC,OAAOK,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEF,GAAG,CAAC;MAC5CO,KAAK,CAAC,sBAAsB,CAAC;IAC/B;EACF,CAAC;;EAED;EACA,MAAMI,0BAA0B,GAAG,MAAAA,CAAA,KAAY;IAC7C,IAAI,CAACC,MAAM,CAACC,OAAO,CAAC,wDAAwD,CAAC,EAAE;IAC/E,IAAI;MACF,MAAMjB,GAAG,GAAG,MAAMpC,GAAG,CAACsD,YAAY,CAACC,UAAU,CAAC,CAAC;MAC/CR,KAAK,CAACX,GAAG,CAACG,IAAI,CAACS,OAAO,IAAI,4BAA4B,CAAC;MACvD,MAAMC,iBAAiB,CAAC,CAAC;IAC3B,CAAC,CAAC,OAAOT,GAAG,EAAE;MAAA,IAAAgB,aAAA,EAAAC,kBAAA;MACZhB,OAAO,CAACC,KAAK,CAAC,qCAAqC,EAAEF,GAAG,CAAC;MACzDO,KAAK,CAAC,EAAAS,aAAA,GAAAhB,GAAG,CAACkB,QAAQ,cAAAF,aAAA,wBAAAC,kBAAA,GAAZD,aAAA,CAAcjB,IAAI,cAAAkB,kBAAA,uBAAlBA,kBAAA,CAAoBf,KAAK,KAAI,qCAAqC,CAAC;IAC3E;EACF,CAAC;;EAED;EACA,MAAMT,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACF,MAAMG,GAAG,GAAG,MAAMpC,GAAG,CAACO,SAAS,CAACoD,MAAM,CAAC,CAAC;MACxC,MAAMpB,IAAI,GAAGqB,KAAK,CAACC,OAAO,CAACzB,GAAG,CAACG,IAAI,CAAC,GAChCH,GAAG,CAACG,IAAI,GACRH,GAAG,CAACG,IAAI,CAAChC,SAAS,IAAI,EAAE;MAC5BC,YAAY,CAAC+B,IAAI,CAAC;IACpB,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;MAClBO,KAAK,CAAC,6BAA6B,CAAC;IACtC;EACF,CAAC;;EAED;EACA,MAAMb,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/BZ,iBAAiB,CAAC,IAAI,CAAC;IACvB,IAAI;MACF,MAAMc,GAAG,GAAG,MAAMpC,GAAG,CAAC8D,KAAK,CAACH,MAAM,CAAC,CAAC;MACpCjD,UAAU,CAAC0B,GAAG,CAACG,IAAI,IAAI,EAAE,CAAC;IAC5B,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;MAClBO,KAAK,CAAC,gCAAgC,CAAC;IACzC,CAAC,SAAS;MACRzB,iBAAiB,CAAC,KAAK,CAAC;IAC1B;EACF,CAAC;;EAED;EACA,MAAM,CAACgC,YAAY,EAAES,eAAe,CAAC,GAAGhE,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACiE,YAAY,EAAEC,eAAe,CAAC,GAAGlE,QAAQ,CAAC,CAAC,CAAC;EAEnD,MAAMkD,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI;MAAA,IAAAiB,SAAA;MACF,MAAM9B,GAAG,GAAG,MAAMpC,GAAG,CAACsD,YAAY,CAACK,MAAM,CAAC,CAAC;MAC3CI,eAAe,CAAC3B,GAAG,CAACG,IAAI,IAAI,EAAE,CAAC;MAC/B0B,eAAe,CAAC,EAAAC,SAAA,GAAA9B,GAAG,CAACG,IAAI,cAAA2B,SAAA,uBAARA,SAAA,CAAUC,MAAM,KAAI,CAAC,CAAC;IACxC,CAAC,CAAC,OAAO3B,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAEF,GAAG,CAAC;IACvD;EACF,CAAC;;EAED;EACA1C,SAAS,CAAC,MAAM;IACdmD,iBAAiB,CAAC,CAAC;IACnB,MAAMmB,QAAQ,GAAGC,WAAW,CAACpB,iBAAiB,EAAE,IAAI,CAAC;IACrD,OAAO,MAAMqB,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,YAAY,GAAGA,CAAA,KAAM;IACzBxC,YAAY,CAACyC,UAAU,CAAC,YAAY,CAAC;IACrClE,QAAQ,CAAC,cAAc,CAAC;EAC1B,CAAC;EAED,MAAMmE,oBAAoB,GAAIC,EAAE,IAAK;IACnCpE,QAAQ,CAAC,iBAAiBoE,EAAE,EAAE,CAAC;EACjC,CAAC;;EAED;EACA,MAAMC,iBAAiB,GAAG,MAAOC,CAAC,IAAK;IACrCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElB,IAAI,CAAChE,IAAI,CAACE,YAAY,CAAC+D,IAAI,CAAC,CAAC,EAAE;MAC7B,OAAO/B,KAAK,CAAC,6BAA6B,CAAC;IAC7C;IAEA3B,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACF,MAAM2D,OAAO,GAAG;QACdC,YAAY,EAAE,QAAQ;QACtBjE,YAAY,EAAEF,IAAI,CAACE,YAAY;QAC/BkE,aAAa,EAAEpE,IAAI,CAACG;MACtB,CAAC;MAED,IAAIO,SAAS,EAAE;QACb,MAAMvB,GAAG,CAACO,SAAS,CAACqC,MAAM,CAACrB,SAAS,EAAEwD,OAAO,CAAC;QAC9ChC,KAAK,CAAC,kCAAkC,CAAC;MAC3C,CAAC,MAAM;QACL,MAAM/C,GAAG,CAACO,SAAS,CAAC2E,MAAM,CAACH,OAAO,CAAC;QACnChC,KAAK,CAAC,gCAAgC,CAAC;MACzC;MAEAjC,OAAO,CAAC;QAAEC,YAAY,EAAE,EAAE;QAAEC,UAAU,EAAE;MAAG,CAAC,CAAC;MAC7CQ,YAAY,CAAC,IAAI,CAAC;MAClB,MAAMS,cAAc,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOO,GAAG,EAAE;MAAA,IAAA2C,cAAA,EAAAC,mBAAA;MACZ3C,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;MAClBO,KAAK,CAAC,EAAAoC,cAAA,GAAA3C,GAAG,CAACkB,QAAQ,cAAAyB,cAAA,wBAAAC,mBAAA,GAAZD,cAAA,CAAc5C,IAAI,cAAA6C,mBAAA,uBAAlBA,mBAAA,CAAoB1C,KAAK,KAAI,qBAAqB,CAAC;IAC3D,CAAC,SAAS;MACRtB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMiE,UAAU,GAAIC,CAAC,IAAK;IACxB9D,YAAY,CAAC8D,CAAC,CAACC,GAAG,CAAC;IACnBzE,OAAO,CAAC;MACNC,YAAY,EAAEuE,CAAC,CAACvE,YAAY;MAC5BC,UAAU,EAAEsE,CAAC,CAACL,aAAa,IAAI;IACjC,CAAC,CAAC;IACF7B,MAAM,CAACoC,QAAQ,CAAC;MAAEC,GAAG,EAAE,CAAC;MAAEC,QAAQ,EAAE;IAAS,CAAC,CAAC;EACjD,CAAC;EAED,MAAMC,YAAY,GAAG,MAAOjB,EAAE,IAAK;IACjC,IAAI,CAACtB,MAAM,CAACC,OAAO,CAAC,gDAAgD,CAAC,EAAE;IACvE,IAAI;MACF,MAAMrD,GAAG,CAACO,SAAS,CAACqF,MAAM,CAAClB,EAAE,CAAC;MAC9B3B,KAAK,CAAC,oCAAoC,CAAC;MAC3C,MAAMd,cAAc,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOO,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;MAClBO,KAAK,CAAC,8BAA8B,CAAC;IACvC;EACF,CAAC;EAED,MAAM8C,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI,CAAC5E,IAAI,EAAE,OAAO8B,KAAK,CAAC,iCAAiC,CAAC;IAC1D,MAAM+C,EAAE,GAAG,IAAIC,QAAQ,CAAC,CAAC;IACzBD,EAAE,CAACE,MAAM,CAAC,MAAM,EAAE/E,IAAI,CAAC;IAEvB,IAAI;MACF,MAAMmB,GAAG,GAAG,MAAMpC,GAAG,CAACO,SAAS,CAAC0F,SAAS,CAACH,EAAE,CAAC;MAC7C/C,KAAK,CAACX,GAAG,CAACG,IAAI,CAACS,OAAO,IAAI,+BAA+B,CAAC;MAC1D,MAAMf,cAAc,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOO,GAAG,EAAE;MAAA,IAAA0D,cAAA,EAAAC,mBAAA;MACZ1D,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;MAClBO,KAAK,CAAC,EAAAmD,cAAA,GAAA1D,GAAG,CAACkB,QAAQ,cAAAwC,cAAA,wBAAAC,mBAAA,GAAZD,cAAA,CAAc3D,IAAI,cAAA4D,mBAAA,uBAAlBA,mBAAA,CAAoBzD,KAAK,KAAI,uBAAuB,CAAC;IAC7D;EACF,CAAC;EAED,oBACEvC,OAAA;IAAKiG,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC9BlG,OAAA;MAAKiG,SAAS,EAAC,cAAc;MAAAC,QAAA,gBAC3BlG,OAAA;QAAAkG,QAAA,EAAI;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxBtG,OAAA;QAAQiG,SAAS,EAAC,YAAY;QAACM,OAAO,EAAEnC,YAAa;QAAA8B,QAAA,EAAC;MAEtD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eAGNtG,OAAA;MAAKiG,SAAS,EAAC,aAAa;MAAAC,QAAA,gBAC1BlG,OAAA;QACEiG,SAAS,EAAE,WAAWzF,SAAS,KAAK,WAAW,GAAG,QAAQ,GAAG,EAAE,EAAG;QAClE+F,OAAO,EAAEA,CAAA,KAAM9F,YAAY,CAAC,WAAW,CAAE;QAAAyF,QAAA,EAC1C;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTtG,OAAA;QACEiG,SAAS,EAAE,WAAWzF,SAAS,KAAK,SAAS,GAAG,QAAQ,GAAG,EAAE,EAAG;QAChE+F,OAAO,EAAEA,CAAA,KAAM9F,YAAY,CAAC,SAAS,CAAE;QAAAyF,QAAA,EACxC;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,EAEL9F,SAAS,KAAK,WAAW,gBACxBR,OAAA;MAAKiG,SAAS,EAAC,aAAa;MAAAC,QAAA,eAE1BlG,OAAA;QAAKiG,SAAS,EAAC,mBAAmB;QAAAC,QAAA,gBAChClG,OAAA;UAAAkG,QAAA,EAAI;QAAsB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAG/BtG,OAAA;UAAKiG,SAAS,EAAC,wBAAwB;UAAAC,QAAA,gBACrClG,OAAA;YAAKiG,SAAS,EAAC,mDAAmD;YAAAC,QAAA,gBAChElG,OAAA;cAAAkG,QAAA,EAAI;YAAqB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAC9BtG,OAAA;cACEiG,SAAS,EAAC,+BAA+B;cACzCM,OAAO,EAAEvD,0BAA2B;cACpCwD,QAAQ,EAAErD,YAAY,CAACa,MAAM,KAAK,CAAE;cAAAkC,QAAA,EACrC;YAED;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN,CAAC,eAENtG,OAAA;YAAGiG,SAAS,EAAC,iBAAiB;YAAAC,QAAA,GAAC,iBACd,eAAAlG,OAAA;cAAAkG,QAAA,EAASrC;YAAY;cAAAsC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAS,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC7C,CAAC,EAEHnD,YAAY,CAACa,MAAM,KAAK,CAAC,gBACxBhE,OAAA;YAAKiG,SAAS,EAAC,sBAAsB;YAAAC,QAAA,EAAC;UAA+B;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,gBAE3EtG,OAAA;YAAOiG,SAAS,EAAC,+BAA+B;YAAAC,QAAA,gBAC9ClG,OAAA;cAAAkG,QAAA,eACElG,OAAA;gBAAAkG,QAAA,gBACElG,OAAA;kBAAAkG,QAAA,EAAI;gBAAC;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAI,CAAC,eACVtG,OAAA;kBAAAkG,QAAA,EAAI;gBAAS;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAI,CAAC,eAClBtG,OAAA;kBAAAkG,QAAA,EAAI;gBAAK;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAI,CAAC,eACdtG,OAAA;kBAAAkG,QAAA,EAAI;gBAAM;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAI,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACb;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACA,CAAC,eACRtG,OAAA;cAAAkG,QAAA,EACG/C,YAAY,CAACsD,GAAG,CAAC,CAAC/D,IAAI,EAAEgE,KAAK,kBAC5B1G,OAAA;gBAAAkG,QAAA,gBACElG,OAAA;kBAAAkG,QAAA,EAAKQ,KAAK,GAAG;gBAAC;kBAAAP,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC,eACpBtG,OAAA;kBAAAkG,QAAA,EAAKxD,IAAI,CAACiE;gBAAQ;kBAAAR,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC,eACxBtG,OAAA;kBAAAkG,QAAA,EAAKxD,IAAI,CAACkE;gBAAK;kBAAAT,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC,eACrBtG,OAAA;kBAAAkG,QAAA,EAAKxD,IAAI,CAACmE;gBAAM;kBAAAV,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC;cAAA,GAJf5D,IAAI,CAAC0C,GAAG;gBAAAe,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAKb,CACL;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACG,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CACR;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC,eAENtG,OAAA;UAAKiG,SAAS,EAAC,MAAM;UAAAC,QAAA,gBACnBlG,OAAA;YAAAkG,QAAA,EAAO;UAAmB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAClCtG,OAAA;YACE8G,IAAI,EAAC,QAAQ;YACbb,SAAS,EAAC,cAAc;YACxBc,KAAK,EAAEzF,WAAW,CAACG,aAAc;YACjCuF,QAAQ,EAAGvC,CAAC,IACVlD,cAAc,CAAC;cACb,GAAGD,WAAW;cACdG,aAAa,EAAEgD,CAAC,CAACwC,MAAM,CAACF;YAC1B,CAAC;UACF;YAAAZ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eAENtG,OAAA;UAAKiG,SAAS,EAAC,MAAM;UAAAC,QAAA,gBACnBlG,OAAA;YAAAkG,QAAA,EAAO;UAAoB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACnCtG,OAAA;YACE8G,IAAI,EAAC,QAAQ;YACbb,SAAS,EAAC,cAAc;YACxBc,KAAK,EAAEzF,WAAW,CAACI,SAAU;YAC7BsF,QAAQ,EAAGvC,CAAC,IACVlD,cAAc,CAAC;cACb,GAAGD,WAAW;cACdI,SAAS,EAAE+C,CAAC,CAACwC,MAAM,CAACF;YACtB,CAAC;UACF;YAAAZ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eAENtG,OAAA;UAAKiG,SAAS,EAAC,MAAM;UAAAC,QAAA,gBACnBlG,OAAA;YAAAkG,QAAA,EAAO;UAAQ;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACvBtG,OAAA;YACEiG,SAAS,EAAE,gBACT3E,WAAW,CAACE,QAAQ,GAAG,cAAc,GAAG,aAAa,EACpD;YAAA0E,QAAA,EAEF5E,WAAW,CAACE,QAAQ,GAAG,QAAQ,GAAG;UAAU;YAAA2E,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACzC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACJ,CAAC,eAENtG,OAAA;UAAKiG,SAAS,EAAC,cAAc;UAAAC,QAAA,gBAC3BlG,OAAA;YAAQiG,SAAS,EAAC,iBAAiB;YAACM,OAAO,EAAE/D,eAAgB;YAAA0D,QAAA,EAAC;UAE9D;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACTtG,OAAA;YAAQiG,SAAS,EAAC,gBAAgB;YAACM,OAAO,EAAExD,cAAe;YAAAmD,QAAA,EAAC;UAE5D;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;IAAA;IAEN;IACAtG,OAAA;MAAKiG,SAAS,EAAC,aAAa;MAAAC,QAAA,eAC1BlG,OAAA;QAAKiG,SAAS,EAAC,sBAAsB;QAAAC,QAAA,gBACnClG,OAAA;UAAAkG,QAAA,EAAI;QAAsB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EAC9BpF,cAAc,gBACblB,OAAA;UAAAkG,QAAA,EAAK;QAAuB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,GAChChG,OAAO,CAAC0D,MAAM,KAAK,CAAC,gBACtBhE,OAAA;UAAKiG,SAAS,EAAC,YAAY;UAAAC,QAAA,EAAC;QAAmB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,gBAErDtG,OAAA;UAAOiG,SAAS,EAAC,eAAe;UAAAC,QAAA,gBAC9BlG,OAAA;YAAAkG,QAAA,eACElG,OAAA;cAAAkG,QAAA,gBACElG,OAAA;gBAAAkG,QAAA,EAAI;cAAI;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACbtG,OAAA;gBAAAkG,QAAA,EAAI;cAAK;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACdtG,OAAA;gBAAAkG,QAAA,EAAI;cAAK;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACdtG,OAAA;gBAAAkG,QAAA,EAAI;cAAO;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eAChBtG,OAAA;gBAAAkG,QAAA,EAAI;cAAO;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eAChBtG,OAAA;gBAAAkG,QAAA,EAAI;cAAM;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACftG,OAAA;gBAAAkG,QAAA,EAAI;cAAY;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACrBtG,OAAA;gBAAAkG,QAAA,EAAI;cAAM;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACb;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC,eACRtG,OAAA;YAAAkG,QAAA,EACG5F,OAAO,CAACmG,GAAG,CAAC,CAACxE,GAAG,EAAEiF,GAAG,kBACpBlH,OAAA;cAAAkG,QAAA,gBACElG,OAAA;gBAAAkG,QAAA,EAAKjE,GAAG,CAACkF;cAAI;gBAAAhB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACnBtG,OAAA;gBAAAkG,QAAA,EAAKjE,GAAG,CAAC2E;cAAK;gBAAAT,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACpBtG,OAAA;gBAAAkG,QAAA,EAAKjE,GAAG,CAACmF;cAAc;gBAAAjB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC7BtG,OAAA;gBAAAkG,QAAA,EAAKjE,GAAG,CAACoF;cAAc;gBAAAlB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC7BtG,OAAA;gBAAAkG,QAAA,GAAKjE,GAAG,CAACqF,YAAY,EAAC,GAAC;cAAA;gBAAAnB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eAC5BtG,OAAA;gBAAAkG,QAAA,eACElG,OAAA;kBACEuH,KAAK,EAAE;oBACLC,KAAK,EACHvF,GAAG,CAAC4E,MAAM,KAAK,WAAW,GAAG,OAAO,GAAG,QAAQ;oBACjDY,UAAU,EAAE;kBACd,CAAE;kBAAAvB,QAAA,EAEDjE,GAAG,CAAC4E,MAAM,IAAI;gBAAoB;kBAAAV,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAC/B;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACL,CAAC,eACLtG,OAAA;gBAAAkG,QAAA,EAAK,IAAIwB,IAAI,CAACzF,GAAG,CAAC0F,WAAW,CAAC,CAACC,cAAc,CAAC;cAAC;gBAAAzB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACrDtG,OAAA;gBAAAkG,QAAA,eACElG,OAAA;kBACEiG,SAAS,EAAC,wBAAwB;kBAClCM,OAAO,EAAEA,CAAA,KAAMjC,oBAAoB,CAACrC,GAAG,CAACmD,GAAG,CAAE;kBAAAc,QAAA,EAC9C;gBAED;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACP,CAAC;YAAA,GAzBEY,GAAG;cAAAf,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OA0BR,CACL;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACG,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CACR;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAApG,EAAA,CA/oIwBD,cAAc;EAAA,QACnBH,WAAW;AAAA;AAAA+H,EAAA,GADN5H,cAAc;AAAA,IAAA4H,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}