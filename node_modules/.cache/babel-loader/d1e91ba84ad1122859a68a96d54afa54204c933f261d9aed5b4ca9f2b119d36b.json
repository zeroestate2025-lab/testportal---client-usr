{"ast":null,"code":"\n// import React, { useEffect, useState } from \"react\";\n// import { useLocation, useNavigate } from \"react-router-dom\";\n// import API from \"../services/api\";\n// import QuestionCard from \"../components/QuestionCard\";\n// import \"../styles/TestPage.css\";\n\n// function pickRandom(arr, n) {\n//   const copy = [...arr];\n//   const res = [];\n//   while (res.length < n && copy.length > 0) {\n//     const idx = Math.floor(Math.random() * copy.length);\n//     res.push(copy.splice(idx, 1)[0]);\n//   }\n//   return res;\n// }\n\n// export default function TestPage() {\n//   const location = useLocation();\n//   const navigate = useNavigate();\n//   const { fullName, email, numQ } = location.state || {};\n//   const [allQuestions, setAllQuestions] = useState([]);\n//   const [questions, setQuestions] = useState([]);\n//   const [answers, setAnswers] = useState({}); // { questionId: selectedOption }\n//   const [currentIdx, setCurrentIdx] = useState(0);\n//   const [loading, setLoading] = useState(true);\n//   const [submitted, setSubmitted] = useState(false);\n//   const [score, setScore] = useState(0);\n\n//   useEffect(() => {\n//     if (!fullName || !email) {\n//       // if page opened without details -> back to home\n//       navigate(\"/\");\n//       return;\n//     }\n\n//     const fetchQuestions = async () => {\n//       try {\n//         const res = await API.get(\"/questions\");\n//         setAllQuestions(res.data || []);\n//       } catch (err) {\n//         console.error(err);\n//         alert(\"Failed to fetch questions from server.\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchQuestions();\n//   }, [fullName, email, navigate]);\n\n//   useEffect(() => {\n//     if (!loading && allQuestions.length > 0) {\n//       const chunk = pickRandom(allQuestions, Math.min(numQ || 10, allQuestions.length));\n//       setQuestions(chunk);\n//     }\n//   }, [loading, allQuestions, numQ]);\n\n//   const handleSelect = (opt) => {\n//     const q = questions[currentIdx];\n//     setAnswers({ ...answers, [q._id]: opt });\n//   };\n\n//   const goNext = () => {\n//     if (currentIdx < questions.length - 1) setCurrentIdx(currentIdx + 1);\n//   };\n//   const goPrev = () => {\n//     if (currentIdx > 0) setCurrentIdx(currentIdx - 1);\n//   };\n\n//   const handleSubmit = () => {\n//     // ensure all answered\n//     if (Object.keys(answers).length < questions.length) {\n//       if (!window.confirm(\"Some questions are unanswered. Submit anyway?\")) return;\n//     }\n\n//     // compute score\n//     let s = 0;\n//     questions.forEach((q) => {\n//       if (answers[q._id] && answers[q._id] === q.correctAnswer) s += 1;\n//     });\n//     setScore(s);\n//     setSubmitted(true);\n//   };\n\n//   if (loading) return <div className=\"container container-center\">Loading questions…</div>;\n//   if (!questions || questions.length === 0) return <div className=\"container container-center\">No questions available. Please try later.</div>;\n\n//   if (submitted) {\n//     return (\n//       <div className=\"container container-center\">\n//         <div className=\"card card-clean p-4\">\n//           <h3>Test Completed</h3>\n//           <p><strong>{fullName}</strong> ({email})</p>\n//           <h4>Your score: {score} out of {questions.length}</h4>\n//           <hr />\n//           <h5>Review</h5>\n//           <div>\n//             {questions.map((q, idx) => (\n//               <div className=\"mb-3\" key={q._id}>\n//                 <b>Q{idx + 1}:</b> {q.questionText}\n//                 <div>Your answer: <span className={answers[q._id] === q.correctAnswer ? \"text-success\" : \"text-danger\"}>{answers[q._id] || \"Not answered\"}</span></div>\n//                 <div>Correct answer: <span className=\"text-success\">{q.correctAnswer}</span></div>\n//               </div>\n//             ))}\n//           </div>\n\n//           <div className=\"mt-3\">\n//             <button className=\"btn btn-primary me-2\" onClick={() => navigate(\"/\")}>Back to Home</button>\n//             <button className=\"btn btn-outline-secondary\" onClick={() => window.location.reload()}>Take New Test</button>\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n\n//   const currentQ = questions[currentIdx];\n//   const selectedForCurrent = answers[currentQ._id];\n\n//   return (\n//     <div className=\"container container-center\">\n//       <div className=\"card card-clean p-4\">\n//         <div className=\"d-flex justify-content-between align-items-start\">\n//           <div>\n//             <h5 className=\"mb-0\">Candidate: {fullName}</h5>\n//             <small className=\"text-muted\">{email}</small>\n//           </div>\n//           <div>\n//             <span className=\"badge bg-primary\">Question {currentIdx + 1} / {questions.length}</span>\n//           </div>\n//         </div>\n\n//         <div className=\"mt-4\">\n//           <QuestionCard question={currentQ} selectedAnswer={selectedForCurrent} onSelect={handleSelect} />\n//         </div>\n\n//         <div className=\"mt-3 d-flex justify-content-between\">\n//           <div>\n//             <button className=\"btn btn-secondary me-2\" onClick={goPrev} disabled={currentIdx === 0}>Previous</button>\n//             <button className=\"btn btn-secondary\" onClick={goNext} disabled={currentIdx === questions.length - 1}>Next</button>\n//           </div>\n\n//           <div>\n//             <button className=\"btn btn-danger me-2\" onClick={() => {\n//               if (window.confirm(\"Are you sure you want to abandon this test?\")) navigate(\"/\");\n//             }}>Abandon</button>\n\n//             <button className=\"btn btn-success\" onClick={handleSubmit}>Submit Test</button>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }","map":{"version":3,"names":[],"sources":["C:/Users/HP/Downloads/INTERVIEW PROCESS/INTERVIEW PROCESS/client/src/pages/TestPage.js"],"sourcesContent":["\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { useLocation, useNavigate } from \"react-router-dom\";\r\n// import API from \"../services/api\";\r\n// import QuestionCard from \"../components/QuestionCard\";\r\n// import \"../styles/TestPage.css\";\r\n\r\n// function pickRandom(arr, n) {\r\n//   const copy = [...arr];\r\n//   const res = [];\r\n//   while (res.length < n && copy.length > 0) {\r\n//     const idx = Math.floor(Math.random() * copy.length);\r\n//     res.push(copy.splice(idx, 1)[0]);\r\n//   }\r\n//   return res;\r\n// }\r\n\r\n// export default function TestPage() {\r\n//   const location = useLocation();\r\n//   const navigate = useNavigate();\r\n//   const { fullName, email, numQ } = location.state || {};\r\n//   const [allQuestions, setAllQuestions] = useState([]);\r\n//   const [questions, setQuestions] = useState([]);\r\n//   const [answers, setAnswers] = useState({}); // { questionId: selectedOption }\r\n//   const [currentIdx, setCurrentIdx] = useState(0);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [submitted, setSubmitted] = useState(false);\r\n//   const [score, setScore] = useState(0);\r\n\r\n//   useEffect(() => {\r\n//     if (!fullName || !email) {\r\n//       // if page opened without details -> back to home\r\n//       navigate(\"/\");\r\n//       return;\r\n//     }\r\n\r\n//     const fetchQuestions = async () => {\r\n//       try {\r\n//         const res = await API.get(\"/questions\");\r\n//         setAllQuestions(res.data || []);\r\n//       } catch (err) {\r\n//         console.error(err);\r\n//         alert(\"Failed to fetch questions from server.\");\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchQuestions();\r\n//   }, [fullName, email, navigate]);\r\n\r\n//   useEffect(() => {\r\n//     if (!loading && allQuestions.length > 0) {\r\n//       const chunk = pickRandom(allQuestions, Math.min(numQ || 10, allQuestions.length));\r\n//       setQuestions(chunk);\r\n//     }\r\n//   }, [loading, allQuestions, numQ]);\r\n\r\n//   const handleSelect = (opt) => {\r\n//     const q = questions[currentIdx];\r\n//     setAnswers({ ...answers, [q._id]: opt });\r\n//   };\r\n\r\n//   const goNext = () => {\r\n//     if (currentIdx < questions.length - 1) setCurrentIdx(currentIdx + 1);\r\n//   };\r\n//   const goPrev = () => {\r\n//     if (currentIdx > 0) setCurrentIdx(currentIdx - 1);\r\n//   };\r\n\r\n//   const handleSubmit = () => {\r\n//     // ensure all answered\r\n//     if (Object.keys(answers).length < questions.length) {\r\n//       if (!window.confirm(\"Some questions are unanswered. Submit anyway?\")) return;\r\n//     }\r\n\r\n//     // compute score\r\n//     let s = 0;\r\n//     questions.forEach((q) => {\r\n//       if (answers[q._id] && answers[q._id] === q.correctAnswer) s += 1;\r\n//     });\r\n//     setScore(s);\r\n//     setSubmitted(true);\r\n//   };\r\n\r\n//   if (loading) return <div className=\"container container-center\">Loading questions…</div>;\r\n//   if (!questions || questions.length === 0) return <div className=\"container container-center\">No questions available. Please try later.</div>;\r\n\r\n//   if (submitted) {\r\n//     return (\r\n//       <div className=\"container container-center\">\r\n//         <div className=\"card card-clean p-4\">\r\n//           <h3>Test Completed</h3>\r\n//           <p><strong>{fullName}</strong> ({email})</p>\r\n//           <h4>Your score: {score} out of {questions.length}</h4>\r\n//           <hr />\r\n//           <h5>Review</h5>\r\n//           <div>\r\n//             {questions.map((q, idx) => (\r\n//               <div className=\"mb-3\" key={q._id}>\r\n//                 <b>Q{idx + 1}:</b> {q.questionText}\r\n//                 <div>Your answer: <span className={answers[q._id] === q.correctAnswer ? \"text-success\" : \"text-danger\"}>{answers[q._id] || \"Not answered\"}</span></div>\r\n//                 <div>Correct answer: <span className=\"text-success\">{q.correctAnswer}</span></div>\r\n//               </div>\r\n//             ))}\r\n//           </div>\r\n\r\n//           <div className=\"mt-3\">\r\n//             <button className=\"btn btn-primary me-2\" onClick={() => navigate(\"/\")}>Back to Home</button>\r\n//             <button className=\"btn btn-outline-secondary\" onClick={() => window.location.reload()}>Take New Test</button>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   const currentQ = questions[currentIdx];\r\n//   const selectedForCurrent = answers[currentQ._id];\r\n\r\n//   return (\r\n//     <div className=\"container container-center\">\r\n//       <div className=\"card card-clean p-4\">\r\n//         <div className=\"d-flex justify-content-between align-items-start\">\r\n//           <div>\r\n//             <h5 className=\"mb-0\">Candidate: {fullName}</h5>\r\n//             <small className=\"text-muted\">{email}</small>\r\n//           </div>\r\n//           <div>\r\n//             <span className=\"badge bg-primary\">Question {currentIdx + 1} / {questions.length}</span>\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"mt-4\">\r\n//           <QuestionCard question={currentQ} selectedAnswer={selectedForCurrent} onSelect={handleSelect} />\r\n//         </div>\r\n\r\n//         <div className=\"mt-3 d-flex justify-content-between\">\r\n//           <div>\r\n//             <button className=\"btn btn-secondary me-2\" onClick={goPrev} disabled={currentIdx === 0}>Previous</button>\r\n//             <button className=\"btn btn-secondary\" onClick={goNext} disabled={currentIdx === questions.length - 1}>Next</button>\r\n//           </div>\r\n\r\n//           <div>\r\n//             <button className=\"btn btn-danger me-2\" onClick={() => {\r\n//               if (window.confirm(\"Are you sure you want to abandon this test?\")) navigate(\"/\");\r\n//             }}>Abandon</button>\r\n\r\n//             <button className=\"btn btn-success\" onClick={handleSubmit}>Submit Test</button>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}