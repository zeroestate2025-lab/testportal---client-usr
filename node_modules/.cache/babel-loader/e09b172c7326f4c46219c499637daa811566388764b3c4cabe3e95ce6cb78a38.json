{"ast":null,"code":"import axios from \"axios\";\n\n// âœ… Create axios instance\nconst API = axios.create({\n  baseURL: \"http://localhost:5000/api\",\n  // baseURL: \"https://testportalserver.onrender.com/api\",\n  timeout: 10000\n});\n\n// âœ… Attach auth token for admin or user automatically\nAPI.interceptors.request.use(config => {\n  const adminToken = localStorage.getItem(\"adminToken\");\n  const userToken = localStorage.getItem(\"userToken\");\n  const token = adminToken || userToken;\n  if (token) config.headers.Authorization = token;\n  return config;\n}, error => Promise.reject(error));\n\n// ðŸ§© ADMIN AUTH APIS\nconst adminAuth = {\n  login: credentials => API.post(\"/admin/login\", credentials),\n  register: data => API.post(\"/admin/register\", data)\n};\n\n// ðŸ§© QUESTIONS APIS\nconst questions = {\n  getAll: () => API.get(\"/questions\"),\n  create: question => API.post(\"/questions\", question),\n  update: (id, question) => API.put(`/questions/${id}`, question),\n  delete: id => API.delete(`/questions/${id}`),\n  uploadDoc: formData => API.post(\"/questions/upload\", formData, {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  })\n};\n\n// ðŸ§© TEST RESULTS APIS\nconst tests = {\n  getAll: () => API.get(\"/tests\"),\n  submit: testData => API.post(\"/tests\", testData),\n  getById: id => API.get(`/tests/${id}`),\n  validate: (id, validationData) => API.put(`/tests/${id}/validate`, validationData)\n};\n\n// ðŸ§© NEW â€” TEST CONTROL APIS (Admin Test Settings)\nconst testcontrol = {\n  get: () => API.get(\"/testcontrol\"),\n  // Get current test control state\n  update: data => API.put(\"/testcontrol\", data) // Update test control (start/stop/time/questions)\n};\n\n// ðŸ§© Combine all modules into one export\nconst combinedAPI = {\n  ...API,\n  adminAuth,\n  questions,\n  tests,\n  testcontrol // âœ… Added testcontrol module here\n};\nexport default combinedAPI;\n\n// import axios from \"axios\";\n\n// const API = axios.create({\n//   baseURL: \"http://localhost:5000/api\",\n//   timeout: 10000,\n// });\n\n// API.interceptors.request.use((config) => {\n//   const adminToken = localStorage.getItem(\"adminToken\");\n//   const userToken = localStorage.getItem(\"userToken\");\n//   const token = adminToken || userToken;\n//   if (token) config.headers.Authorization = token;\n//   return config;\n// }, (error) => Promise.reject(error));\n\n// // Admin Authentication APIs\n// const adminAuth = {\n//   login: (credentials) => API.post(\"/admin/login\", credentials),\n//   register: (data) => API.post(\"/admin/register\", data),\n// };\n\n// // Questions APIs\n// const questions = {\n//   getAll: () => API.get(\"/questions\"),\n//   create: (question) => API.post(\"/questions\", question),\n//   update: (id, question) => API.put(`/questions/${id}`, question),\n//   delete: (id) => API.delete(`/questions/${id}`),\n//   uploadDoc: (formData) => API.post(\"/questions/upload\", formData, {\n//     headers: { \"Content-Type\": \"multipart/form-data\" }\n//   }),\n// };\n\n// // Test Results APIs\n// const tests = {\n//   getAll: () => API.get(\"/tests\"),\n//   submit: (testData) => API.post(\"/tests\", testData),\n//   getById: (id) => API.get(`/tests/${id}`),\n//   validate: (id, validationData) => API.put(`/tests/${id}/validate`, validationData),\n// };\n\n// // Combined API object\n// const combinedAPI = {\n//   ...API,\n//   adminAuth,\n//   questions,\n//   tests,\n// };\n\n// export default combinedAPI;","map":{"version":3,"names":["axios","API","create","baseURL","timeout","interceptors","request","use","config","adminToken","localStorage","getItem","userToken","token","headers","Authorization","error","Promise","reject","adminAuth","login","credentials","post","register","data","questions","getAll","get","question","update","id","put","delete","uploadDoc","formData","tests","submit","testData","getById","validate","validationData","testcontrol","combinedAPI"],"sources":["C:/Users/HP/Downloads/INTERVIEW PROCESS/INTERVIEW PROCESS/client/src/services/api.js"],"sourcesContent":["\r\nimport axios from \"axios\";\r\n\r\n// âœ… Create axios instance\r\nconst API = axios.create({\r\nbaseURL: \"http://localhost:5000/api\",\r\n// baseURL: \"https://testportalserver.onrender.com/api\",\r\ntimeout: 10000,\r\n});\r\n\r\n// âœ… Attach auth token for admin or user automatically\r\nAPI.interceptors.request.use(\r\n  (config) => {\r\n    const adminToken = localStorage.getItem(\"adminToken\");\r\n    const userToken = localStorage.getItem(\"userToken\");\r\n    const token = adminToken || userToken;\r\n    if (token) config.headers.Authorization = token;\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// ðŸ§© ADMIN AUTH APIS\r\nconst adminAuth = {\r\n  login: (credentials) => API.post(\"/admin/login\", credentials),\r\n  register: (data) => API.post(\"/admin/register\", data),\r\n};\r\n\r\n// ðŸ§© QUESTIONS APIS\r\nconst questions = {\r\n  getAll: () => API.get(\"/questions\"),\r\n  create: (question) => API.post(\"/questions\", question),\r\n  update: (id, question) => API.put(`/questions/${id}`, question),\r\n  delete: (id) => API.delete(`/questions/${id}`),\r\n  uploadDoc: (formData) =>\r\n    API.post(\"/questions/upload\", formData, {\r\n      headers: { \"Content-Type\": \"multipart/form-data\" },\r\n    }),\r\n};\r\n\r\n// ðŸ§© TEST RESULTS APIS\r\nconst tests = {\r\n  getAll: () => API.get(\"/tests\"),\r\n  submit: (testData) => API.post(\"/tests\", testData),\r\n  getById: (id) => API.get(`/tests/${id}`),\r\n  validate: (id, validationData) =>\r\n    API.put(`/tests/${id}/validate`, validationData),\r\n};\r\n\r\n// ðŸ§© NEW â€” TEST CONTROL APIS (Admin Test Settings)\r\nconst testcontrol = {\r\n  get: () => API.get(\"/testcontrol\"),          // Get current test control state\r\n  update: (data) => API.put(\"/testcontrol\", data), // Update test control (start/stop/time/questions)\r\n};\r\n\r\n// ðŸ§© Combine all modules into one export\r\nconst combinedAPI = {\r\n  ...API,\r\n  adminAuth,\r\n  questions,\r\n  tests,\r\n  testcontrol, // âœ… Added testcontrol module here\r\n};\r\n\r\nexport default combinedAPI;\r\n\r\n\r\n// import axios from \"axios\";\r\n\r\n// const API = axios.create({\r\n//   baseURL: \"http://localhost:5000/api\",\r\n//   timeout: 10000,\r\n// });\r\n\r\n// API.interceptors.request.use((config) => {\r\n//   const adminToken = localStorage.getItem(\"adminToken\");\r\n//   const userToken = localStorage.getItem(\"userToken\");\r\n//   const token = adminToken || userToken;\r\n//   if (token) config.headers.Authorization = token;\r\n//   return config;\r\n// }, (error) => Promise.reject(error));\r\n\r\n// // Admin Authentication APIs\r\n// const adminAuth = {\r\n//   login: (credentials) => API.post(\"/admin/login\", credentials),\r\n//   register: (data) => API.post(\"/admin/register\", data),\r\n// };\r\n\r\n// // Questions APIs\r\n// const questions = {\r\n//   getAll: () => API.get(\"/questions\"),\r\n//   create: (question) => API.post(\"/questions\", question),\r\n//   update: (id, question) => API.put(`/questions/${id}`, question),\r\n//   delete: (id) => API.delete(`/questions/${id}`),\r\n//   uploadDoc: (formData) => API.post(\"/questions/upload\", formData, {\r\n//     headers: { \"Content-Type\": \"multipart/form-data\" }\r\n//   }),\r\n// };\r\n\r\n// // Test Results APIs\r\n// const tests = {\r\n//   getAll: () => API.get(\"/tests\"),\r\n//   submit: (testData) => API.post(\"/tests\", testData),\r\n//   getById: (id) => API.get(`/tests/${id}`),\r\n//   validate: (id, validationData) => API.put(`/tests/${id}/validate`, validationData),\r\n// };\r\n\r\n// // Combined API object\r\n// const combinedAPI = {\r\n//   ...API,\r\n//   adminAuth,\r\n//   questions,\r\n//   tests,\r\n// };\r\n\r\n// export default combinedAPI;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}