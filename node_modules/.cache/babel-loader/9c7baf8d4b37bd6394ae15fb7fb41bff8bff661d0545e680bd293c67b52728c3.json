{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Downloads\\\\INTERVIEW PROCESS\\\\INTERVIEW PROCESS\\\\client\\\\src\\\\pages\\\\TestPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport API from \"../services/api\";\nimport \"../styles/TestPage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst [timeLeft, setTimeLeft] = useState(null);\nfunction pickRandom(arr, n) {\n  const copy = [...arr];\n  const res = [];\n  while (res.length < n && copy.length > 0) {\n    const idx = Math.floor(Math.random() * copy.length);\n    res.push(copy.splice(idx, 1)[0]);\n  }\n  return res;\n}\nexport default function TestPage() {\n  _s();\n  var _currentQ$options;\n  const location = useLocation();\n  const navigate = useNavigate();\n  const {\n    fullName,\n    email,\n    numQ\n  } = location.state || {};\n  const [allQuestions, setAllQuestions] = useState([]);\n  const [questions, setQuestions] = useState([]);\n  const [answers, setAnswers] = useState({});\n  const [currentIdx, setCurrentIdx] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [submitted, setSubmitted] = useState(false);\n  const [score, setScore] = useState(0);\n  const [resultSaved, setResultSaved] = useState(false);\n  const [testEnded, setTestEnded] = useState(false); // 🆕 detect tab switch/reload\n\n  // 🟢 Fetch questions\n  useEffect(() => {\n    if (!fullName || !email) {\n      navigate(\"/\");\n      return;\n    }\n    const fetchQuestions = async () => {\n      try {\n        const res = await API.questions.getAll();\n        if (res.data.error) {\n          alert(res.data.error);\n          navigate(\"/\");\n          return;\n        }\n        setQuestions(res.data.questions || []);\n        setTimeLeft(res.data.timeLimit * 60); // seconds\n      } catch (err) {\n        console.error(err);\n        alert(\"Failed to fetch questions. Please wait for admin to start the test.\");\n        navigate(\"/\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchQuestions();\n  }, [fullName, email, navigate]);\n\n  // 🟢 Pick random questions\n  useEffect(() => {\n    if (!loading && allQuestions.length > 0) {\n      const selected = pickRandom(allQuestions, Math.min(numQ || 10, allQuestions.length));\n      setQuestions(selected);\n    }\n  }, [loading, allQuestions, numQ]);\n\n  // 🛑 Detect tab switch, reload, or page exit\n  useEffect(() => {\n    const handleBeforeUnload = e => {\n      e.preventDefault();\n      e.returnValue = \"\";\n      setTestEnded(true);\n    };\n    const handleVisibilityChange = () => {\n      if (document.hidden) {\n        setTestEnded(true);\n      }\n    };\n    window.addEventListener(\"beforeunload\", handleBeforeUnload);\n    document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n    return () => {\n      window.removeEventListener(\"beforeunload\", handleBeforeUnload);\n      document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n    };\n  }, []);\n  const handleSelect = (questionId, value) => {\n    setAnswers({\n      ...answers,\n      [questionId]: value\n    });\n  };\n  const goNext = () => {\n    if (currentIdx < questions.length - 1) setCurrentIdx(currentIdx + 1);\n  };\n  const goPrev = () => {\n    if (currentIdx > 0) setCurrentIdx(currentIdx - 1);\n  };\n\n  // 🟢 Submit handler\n  const handleSubmit = async () => {\n    if (Object.keys(answers).length < questions.length) {\n      if (!window.confirm(\"Some questions are unanswered. Submit anyway?\")) return;\n    }\n\n    // Calculate score only for MCQs\n    let s = 0;\n    questions.forEach(q => {\n      if (q.questionType === \"MCQ\" && answers[q._id] === q.correctAnswer) s += 1;\n    });\n    setScore(s);\n    setSubmitted(true);\n\n    // Prepare formatted answers\n    const formattedAnswers = questions.map(q => ({\n      question: q.questionText,\n      userAnswer: answers[q._id] || \"Not answered\",\n      correctAnswer: q.correctAnswer || \"\",\n      isCorrect: q.questionType === \"MCQ\" ? answers[q._id] === q.correctAnswer : null,\n      type: q.questionType || \"Theory\"\n    }));\n    try {\n      await API.tests.submit({\n        name: fullName,\n        email,\n        answers: formattedAnswers,\n        totalQuestions: questions.length,\n        correctAnswers: s,\n        scorePercent: (s / questions.length * 100).toFixed(2)\n      });\n      setResultSaved(true);\n    } catch (err) {\n      console.error(\"Error saving result:\", err);\n      alert(\"Failed to save result to server.\");\n    }\n  };\n\n  // 🛑 If test was ended (tab switch or reload)\n  if (testEnded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container container-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card card-clean p-4 text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-danger\",\n          children: \"\\u26A0\\uFE0F Test Ended\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Your test session has ended because you switched tabs, reloaded, or left the page.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"mt-3 text-success\",\n          children: \"Thank you for your time!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary mt-3\",\n          onClick: () => navigate(\"/\"),\n          children: \"Go to Home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this);\n  }\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container container-center\",\n    children: \"Loading questions\\u2026\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 23\n  }, this);\n  if (!questions || questions.length === 0) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container container-center\",\n    children: \"No questions available. Please try later.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 12\n  }, this);\n  if (submitted) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container container-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card card-clean p-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-success\",\n          children: \"Test Completed Successfully\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: fullName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 14\n          }, this), \" (\", email, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Your Score: \", score, \" / \", questions.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this), resultSaved && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"alert alert-success mt-2\",\n          children: \"\\u2705 Your result has been recorded successfully!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Review Answers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: questions.map((q, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"review-question\",\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: [\"Q\", idx + 1, \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 17\n            }, this), \" \", q.questionText, /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"Your answer:\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: q.questionType === \"MCQ\" ? answers[q._id] === q.correctAnswer ? \"text-success\" : \"text-danger\" : \"text-primary\",\n                children: answers[q._id] || \"Not answered\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 17\n            }, this), q.questionType === \"MCQ\" && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"Correct answer:\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-success\",\n                children: q.correctAnswer\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 19\n            }, this)]\n          }, q._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary me-2\",\n            onClick: () => navigate(\"/\"),\n            children: \"Back to Home\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-outline-secondary\",\n            onClick: () => window.location.reload(),\n            children: \"Retake Test\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this);\n  }\n  const currentQ = questions[currentIdx];\n  const selectedAnswer = answers[currentQ._id] || \"\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"test-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card test-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"text-danger fw-bold\",\n            children: [\"Candidate: \", fullName.toLowerCase()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n            className: \"text-muted\",\n            children: email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"badge bg-primary\",\n            children: [\"Question \", currentIdx + 1, \" / \", questions.length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n          className: \"question-text\",\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: [\"Q\", currentIdx + 1, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 13\n          }, this), \" \", currentQ.questionText]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this), currentQ.questionType === \"MCQ\" && ((_currentQ$options = currentQ.options) === null || _currentQ$options === void 0 ? void 0 : _currentQ$options.length) > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"options-container\",\n          children: currentQ.options.map((opt, i) => /*#__PURE__*/_jsxDEV(\"label\", {\n            className: `option-item ${selectedAnswer === opt ? \"selected\" : \"\"}`,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: `question-${currentQ._id}`,\n              value: opt,\n              checked: selectedAnswer === opt,\n              onChange: e => handleSelect(currentQ._id, e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 19\n            }, this), opt]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"theory-input\",\n          placeholder: \"Type your answer here...\",\n          value: selectedAnswer,\n          onChange: e => handleSelect(currentQ._id, e.target.value),\n          rows: 5\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test-footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-secondary me-3\",\n            onClick: goPrev,\n            disabled: currentIdx === 0,\n            children: \"Previous\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-secondary\",\n            onClick: goNext,\n            disabled: currentIdx === questions.length - 1,\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-success\",\n            onClick: handleSubmit,\n            children: \"Submit Test\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 229,\n    columnNumber: 5\n  }, this);\n}\n\n// import React, { useEffect, useState } from \"react\";\n// import { useLocation, useNavigate } from \"react-router-dom\";\n// import API from \"../services/api\";\n// import \"../styles/TestPage.css\";\n\n// function pickRandom(arr, n) {\n//   const copy = [...arr];\n//   const res = [];\n//   while (res.length < n && copy.length > 0) {\n//     const idx = Math.floor(Math.random() * copy.length);\n//     res.push(copy.splice(idx, 1)[0]);\n//   }\n//   return res;\n// }\n\n// export default function TestPage() {\n//   const location = useLocation();\n//   const navigate = useNavigate();\n//   const { fullName, email, numQ } = location.state || {};\n\n//   const [allQuestions, setAllQuestions] = useState([]);\n//   const [questions, setQuestions] = useState([]);\n//   const [answers, setAnswers] = useState({});\n//   const [currentIdx, setCurrentIdx] = useState(0);\n//   const [loading, setLoading] = useState(true);\n//   const [submitted, setSubmitted] = useState(false);\n//   const [score, setScore] = useState(0);\n//   const [resultSaved, setResultSaved] = useState(false);\n\n//   // 🟢 Fetch questions\n//   useEffect(() => {\n//     if (!fullName || !email) {\n//       navigate(\"/\");\n//       return;\n//     }\n\n//     const fetchQuestions = async () => {\n//       try {\n//         const res = await API.questions.getAll();\n//         setAllQuestions(res.data || []);\n//       } catch (err) {\n//         console.error(err);\n//         alert(\"Failed to fetch questions from server.\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchQuestions();\n//   }, [fullName, email, navigate]);\n\n//   // 🟢 Pick random questions\n//   useEffect(() => {\n//     if (!loading && allQuestions.length > 0) {\n//       const selected = pickRandom(allQuestions, Math.min(numQ || 10, allQuestions.length));\n//       setQuestions(selected);\n//     }\n//   }, [loading, allQuestions, numQ]);\n\n//   const handleSelect = (questionId, value) => {\n//     setAnswers({ ...answers, [questionId]: value });\n//   };\n\n//   const goNext = () => {\n//     if (currentIdx < questions.length - 1) setCurrentIdx(currentIdx + 1);\n//   };\n//   const goPrev = () => {\n//     if (currentIdx > 0) setCurrentIdx(currentIdx - 1);\n//   };\n\n//   // 🟢 Submit handler\n//   const handleSubmit = async () => {\n//     if (Object.keys(answers).length < questions.length) {\n//       if (!window.confirm(\"Some questions are unanswered. Submit anyway?\")) return;\n//     }\n\n//     // Calculate score only for MCQs\n//     let s = 0;\n//     questions.forEach((q) => {\n//       if (q.questionType === \"MCQ\" && answers[q._id] === q.correctAnswer) s += 1;\n//     });\n//     setScore(s);\n//     setSubmitted(true);\n\n//     // Prepare formatted answers\n//     const formattedAnswers = questions.map((q) => ({\n//       question: q.questionText,\n//       userAnswer: answers[q._id] || \"Not answered\",\n//       correctAnswer: q.correctAnswer || \"\",\n//       isCorrect: q.questionType === \"MCQ\" ? answers[q._id] === q.correctAnswer : null,\n//       type: q.questionType || \"Theory\",\n//     }));\n\n//     try {\n//       await API.tests.submit({\n//         name: fullName,\n//         email,\n//         answers: formattedAnswers,\n//         totalQuestions: questions.length,\n//         correctAnswers: s,\n//         scorePercent: ((s / questions.length) * 100).toFixed(2),\n//       });\n//       setResultSaved(true);\n//     } catch (err) {\n//       console.error(\"Error saving result:\", err);\n//       alert(\"Failed to save result to server.\");\n//     }\n//   };\n\n//   if (loading) return <div className=\"container container-center\">Loading questions…</div>;\n//   if (!questions || questions.length === 0)\n//     return <div className=\"container container-center\">No questions available. Please try later.</div>;\n\n//   if (submitted) {\n//     return (\n//       <div className=\"container container-center\">\n//         <div className=\"card card-clean p-4\">\n//           <h3 className=\"text-success\">Test Completed Successfully</h3>\n//           <p><strong>{fullName}</strong> ({email})</p>\n//           <h4>Your Score: {score} / {questions.length}</h4>\n\n//           {resultSaved && (\n//             <div className=\"alert alert-success mt-2\">\n//               ✅ Your result has been recorded successfully!\n//             </div>\n//           )}\n\n//           <hr />\n//           <h5>Review Answers</h5>\n//           <div>\n//             {questions.map((q, idx) => (\n//               <div className=\"review-question\" key={q._id}>\n//                 <b>Q{idx + 1}:</b> {q.questionText}\n//                 <div>\n//                   Your answer:{\" \"}\n//                   <span\n//                     className={\n//                       q.questionType === \"MCQ\"\n//                         ? answers[q._id] === q.correctAnswer\n//                           ? \"text-success\"\n//                           : \"text-danger\"\n//                         : \"text-primary\"\n//                     }\n//                   >\n//                     {answers[q._id] || \"Not answered\"}\n//                   </span>\n//                 </div>\n//                 {q.questionType === \"MCQ\" && (\n//                   <div>\n//                     Correct answer:{\" \"}\n//                     <span className=\"text-success\">{q.correctAnswer}</span>\n//                   </div>\n//                 )}\n//               </div>\n//             ))}\n//           </div>\n\n//           <div className=\"mt-4\">\n//             <button className=\"btn btn-primary me-2\" onClick={() => navigate(\"/\")}>\n//               Back to Home\n//             </button>\n//             <button className=\"btn btn-outline-secondary\" onClick={() => window.location.reload()}>\n//               Retake Test\n//             </button>\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n\n//   const currentQ = questions[currentIdx];\n//   const selectedAnswer = answers[currentQ._id] || \"\";\n\n//   return (\n//     <div className=\"test-container\">\n//       <div className=\"card test-card\">\n//         <div className=\"test-header\">\n//           <div>\n//             <h5 className=\"text-danger fw-bold\">\n//               Candidate: {fullName.toLowerCase()}\n//             </h5>\n//             <small className=\"text-muted\">{email}</small>\n//           </div>\n//           <div>\n//             <span className=\"badge bg-primary\">\n//               Question {currentIdx + 1} / {questions.length}\n//             </span>\n//           </div>\n//         </div>\n\n//         <div className=\"test-body\">\n//           <h6 className=\"question-text\">\n//              <b>Q{currentIdx + 1}:</b> {currentQ.questionText}\n//           </h6>\n\n//           {/* 🧠 Conditional rendering for MCQ / Theory */}\n//           {currentQ.questionType === \"MCQ\" && currentQ.options?.length > 0 ? (\n//             <div className=\"options-container\">\n//               {currentQ.options.map((opt, i) => (\n//                 <label\n//                   key={i}\n//                   className={`option-item ${\n//                     selectedAnswer === opt ? \"selected\" : \"\"\n//                   }`}\n//                 >\n//                   <input\n//                     type=\"radio\"\n//                     name={`question-${currentQ._id}`}\n//                     value={opt}\n//                     checked={selectedAnswer === opt}\n//                     onChange={(e) => handleSelect(currentQ._id, e.target.value)}\n//                   />\n//                   {opt}\n//                 </label>\n//               ))}\n//             </div>\n//           ) : (\n//             <textarea\n//               className=\"theory-input\"\n//               placeholder=\"Type your answer here...\"\n//               value={selectedAnswer}\n//               onChange={(e) => handleSelect(currentQ._id, e.target.value)}\n//               rows={5}\n//             ></textarea>\n//           )}\n//         </div>\n\n//         <div className=\"test-footer\">\n//           <div>\n//             <button\n//               className=\"btn btn-secondary me-3\"\n//               onClick={goPrev}\n//               disabled={currentIdx === 0}\n//             >\n//               Previous\n//             </button>\n//             <button\n//               className=\"btn btn-secondary\"\n//               onClick={goNext}\n//               disabled={currentIdx === questions.length - 1}\n//             >\n//               Next\n//             </button>\n//           </div>\n\n//           <div>\n//             {/* <button\n//               className=\"btn btn-danger me-2\"\n//               onClick={() => {\n//                 if (window.confirm(\"Are you sure you want to abandon this test?\"))\n//                   navigate(\"/\");\n//               }}\n//             >\n//               Abandon\n//             </button> */}\n//             <button className=\"btn btn-success\" onClick={handleSubmit}>\n//               Submit Test\n//             </button>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// import React, { useEffect, useState } from \"react\";\n// import { useLocation, useNavigate } from \"react-router-dom\";\n// import API from \"../services/api\";\n// import QuestionCard from \"../components/QuestionCard\";\n// import \"../styles/TestPage.css\";\n\n// function pickRandom(arr, n) {\n//   const copy = [...arr];\n//   const res = [];\n//   while (res.length < n && copy.length > 0) {\n//     const idx = Math.floor(Math.random() * copy.length);\n//     res.push(copy.splice(idx, 1)[0]);\n//   }\n//   return res;\n// }\n\n// export default function TestPage() {\n//   const location = useLocation();\n//   const navigate = useNavigate();\n//   const { fullName, email, numQ } = location.state || {};\n//   const [allQuestions, setAllQuestions] = useState([]);\n//   const [questions, setQuestions] = useState([]);\n//   const [answers, setAnswers] = useState({});\n//   const [currentIdx, setCurrentIdx] = useState(0);\n//   const [loading, setLoading] = useState(true);\n//   const [submitted, setSubmitted] = useState(false);\n//   const [score, setScore] = useState(0);\n//   const [resultSaved, setResultSaved] = useState(false);\n\n//   useEffect(() => {\n//     if (!fullName || !email) {\n//       navigate(\"/\");\n//       return;\n//     }\n\n//     const fetchQuestions = async () => {\n//       try {\n//         const res = await API.get(\"/questions\");\n//         setAllQuestions(res.data || []);\n//       } catch (err) {\n//         console.error(err);\n//         alert(\"Failed to fetch questions from server.\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchQuestions();\n//   }, [fullName, email, navigate]);\n\n//   useEffect(() => {\n//     if (!loading && allQuestions.length > 0) {\n//       const selected = pickRandom(allQuestions, Math.min(numQ || 10, allQuestions.length));\n//       setQuestions(selected);\n//     }\n//   }, [loading, allQuestions, numQ]);\n\n//   const handleSelect = (opt) => {\n//     const q = questions[currentIdx];\n//     setAnswers({ ...answers, [q._id]: opt });\n//   };\n\n//   const goNext = () => {\n//     if (currentIdx < questions.length - 1) setCurrentIdx(currentIdx + 1);\n//   };\n//   const goPrev = () => {\n//     if (currentIdx > 0) setCurrentIdx(currentIdx - 1);\n//   };\n\n//   const handleSubmit = async () => {\n//     if (Object.keys(answers).length < questions.length) {\n//       if (!window.confirm(\"Some questions are unanswered. Submit anyway?\")) return;\n//     }\n\n//     // calculate score\n//     let s = 0;\n//     questions.forEach((q) => {\n//       if (answers[q._id] && answers[q._id] === q.correctAnswer) s += 1;\n//     });\n//     setScore(s);\n//     setSubmitted(true);\n\n//     // format answers for backend\n//     const formattedAnswers = questions.map((q) => ({\n//       question: q.questionText,\n//       userAnswer: answers[q._id] || \"Not answered\",\n//       correctAnswer: q.correctAnswer,\n//       isCorrect: answers[q._id] === q.correctAnswer,\n//     }));\n\n//     try {\n//       await API.post(\"/tests\", {\n//         name: fullName,\n//         email,\n//         answers: formattedAnswers,\n//       });\n//       setResultSaved(true);\n//     } catch (err) {\n//       console.error(\"Error saving result:\", err);\n//       alert(\"Failed to save result to server.\");\n//     }\n//   };\n\n//   if (loading) return <div className=\"container container-center\">Loading questions…</div>;\n//   if (!questions || questions.length === 0)\n//     return <div className=\"container container-center\">No questions available. Please try later.</div>;\n\n//   if (submitted) {\n//     return (\n//       <div className=\"container container-center\">\n//         <div className=\"card card-clean p-4\">\n//           <h3 className=\"text-success\">Test Completed Successfully</h3>\n//           <p><strong>{fullName}</strong> ({email})</p>\n//           <h4>Your Score: {score} / {questions.length}</h4>\n\n//           {resultSaved && (\n//             <div className=\"alert alert-success mt-2\">\n//               ✅ Your result has been recorded successfully!\n//             </div>\n//           )}\n\n//           <hr />\n//           <h5>Review Answers</h5>\n//           <div>\n//             {questions.map((q, idx) => (\n//               <div className=\"mb-3\" key={q._id}>\n//                 <b>Q{idx + 1}:</b> {q.questionText}\n//                 <div>\n//                   Your answer:{\" \"}\n//                   <span\n//                     className={\n//                       answers[q._id] === q.correctAnswer\n//                         ? \"text-success\"\n//                         : \"text-danger\"\n//                     }\n//                   >\n//                     {answers[q._id] || \"Not answered\"}\n//                   </span>\n//                 </div>\n//                 <div>\n//                   Correct answer:{\" \"}\n//                   <span className=\"text-success\">{q.correctAnswer}</span>\n//                 </div>\n//               </div>\n//             ))}\n//           </div>\n\n//           <div className=\"mt-3\">\n//             <button className=\"btn btn-primary me-2\" onClick={() => navigate(\"/\")}>\n//               Back to Home\n//             </button>\n//             <button className=\"btn btn-outline-secondary\" onClick={() => window.location.reload()}>\n//               Retake Test\n//             </button>\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n\n//   const currentQ = questions[currentIdx];\n//   const selectedForCurrent = answers[currentQ._id];\n\n//   return (\n//     <div className=\"container container-center\">\n//       <div className=\"card card-clean p-4\">\n//         <div className=\"d-flex justify-content-between align-items-start\">\n//           <div>\n//             <h5 className=\"mb-0\">Candidate: {fullName}</h5>\n//             <small className=\"text-muted\">{email}</small>\n//           </div>\n//           <div>\n//             <span className=\"badge bg-primary\">\n//               Question {currentIdx + 1} / {questions.length}\n//             </span>\n//           </div>\n//         </div>\n\n//         <div className=\"mt-4\">\n//           <QuestionCard\n//             question={currentQ}\n//             selectedAnswer={selectedForCurrent}\n//             onSelect={handleSelect}\n//           />\n//         </div>\n\n//         <div className=\"mt-3 d-flex justify-content-between\">\n//           <div>\n//             <button\n//               className=\"btn btn-secondary me-2\"\n//               onClick={goPrev}\n//               disabled={currentIdx === 0}\n//             >\n//               Previous\n//             </button>\n//             <button\n//               className=\"btn btn-secondary\"\n//               onClick={goNext}\n//               disabled={currentIdx === questions.length - 1}\n//             >\n//               Next\n//             </button>\n//           </div>\n\n//           <div>\n//             <button\n//               className=\"btn btn-danger me-2\"\n//               onClick={() => {\n//                 if (window.confirm(\"Are you sure you want to abandon this test?\"))\n//                   navigate(\"/\");\n//               }}\n//             >\n//               Abandon\n//             </button>\n\n//             <button className=\"btn btn-success\" onClick={handleSubmit}>\n//               Submit Test\n//             </button>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// // import React, { useEffect, useState } from \"react\";\n// // import { useLocation, useNavigate } from \"react-router-dom\";\n// // import API from \"../services/api\";\n// // import QuestionCard from \"../components/QuestionCard\";\n// // import \"../styles/TestPage.css\";\n\n// // function pickRandom(arr, n) {\n// //   const copy = [...arr];\n// //   const res = [];\n// //   while (res.length < n && copy.length > 0) {\n// //     const idx = Math.floor(Math.random() * copy.length);\n// //     res.push(copy.splice(idx, 1)[0]);\n// //   }\n// //   return res;\n// // }\n\n// // export default function TestPage() {\n// //   const location = useLocation();\n// //   const navigate = useNavigate();\n// //   const { fullName, email, numQ } = location.state || {};\n// //   const [allQuestions, setAllQuestions] = useState([]);\n// //   const [questions, setQuestions] = useState([]);\n// //   const [answers, setAnswers] = useState({}); // { questionId: selectedOption }\n// //   const [currentIdx, setCurrentIdx] = useState(0);\n// //   const [loading, setLoading] = useState(true);\n// //   const [submitted, setSubmitted] = useState(false);\n// //   const [score, setScore] = useState(0);\n\n// //   useEffect(() => {\n// //     if (!fullName || !email) {\n// //       // if page opened without details -> back to home\n// //       navigate(\"/\");\n// //       return;\n// //     }\n\n// //     const fetchQuestions = async () => {\n// //       try {\n// //         const res = await API.get(\"/questions\");\n// //         setAllQuestions(res.data || []);\n// //       } catch (err) {\n// //         console.error(err);\n// //         alert(\"Failed to fetch questions from server.\");\n// //       } finally {\n// //         setLoading(false);\n// //       }\n// //     };\n\n// //     fetchQuestions();\n// //   }, [fullName, email, navigate]);\n\n// //   useEffect(() => {\n// //     if (!loading && allQuestions.length > 0) {\n// //       const chunk = pickRandom(allQuestions, Math.min(numQ || 10, allQuestions.length));\n// //       setQuestions(chunk);\n// //     }\n// //   }, [loading, allQuestions, numQ]);\n\n// //   const handleSelect = (opt) => {\n// //     const q = questions[currentIdx];\n// //     setAnswers({ ...answers, [q._id]: opt });\n// //   };\n\n// //   const goNext = () => {\n// //     if (currentIdx < questions.length - 1) setCurrentIdx(currentIdx + 1);\n// //   };\n// //   const goPrev = () => {\n// //     if (currentIdx > 0) setCurrentIdx(currentIdx - 1);\n// //   };\n\n// //   const handleSubmit = () => {\n// //     // ensure all answered\n// //     if (Object.keys(answers).length < questions.length) {\n// //       if (!window.confirm(\"Some questions are unanswered. Submit anyway?\")) return;\n// //     }\n\n// //     // compute score\n// //     let s = 0;\n// //     questions.forEach((q) => {\n// //       if (answers[q._id] && answers[q._id] === q.correctAnswer) s += 1;\n// //     });\n// //     setScore(s);\n// //     setSubmitted(true);\n// //   };\n\n// //   if (loading) return <div className=\"container container-center\">Loading questions…</div>;\n// //   if (!questions || questions.length === 0) return <div className=\"container container-center\">No questions available. Please try later.</div>;\n\n// //   if (submitted) {\n// //     return (\n// //       <div className=\"container container-center\">\n// //         <div className=\"card card-clean p-4\">\n// //           <h3>Test Completed</h3>\n// //           <p><strong>{fullName}</strong> ({email})</p>\n// //           <h4>Your score: {score} out of {questions.length}</h4>\n// //           <hr />\n// //           <h5>Review</h5>\n// //           <div>\n// //             {questions.map((q, idx) => (\n// //               <div className=\"mb-3\" key={q._id}>\n// //                 <b>Q{idx + 1}:</b> {q.questionText}\n// //                 <div>Your answer: <span className={answers[q._id] === q.correctAnswer ? \"text-success\" : \"text-danger\"}>{answers[q._id] || \"Not answered\"}</span></div>\n// //                 <div>Correct answer: <span className=\"text-success\">{q.correctAnswer}</span></div>\n// //               </div>\n// //             ))}\n// //           </div>\n\n// //           <div className=\"mt-3\">\n// //             <button className=\"btn btn-primary me-2\" onClick={() => navigate(\"/\")}>Back to Home</button>\n// //             <button className=\"btn btn-outline-secondary\" onClick={() => window.location.reload()}>Take New Test</button>\n// //           </div>\n// //         </div>\n// //       </div>\n// //     );\n// //   }\n\n// //   const currentQ = questions[currentIdx];\n// //   const selectedForCurrent = answers[currentQ._id];\n\n// //   return (\n// //     <div className=\"container container-center\">\n// //       <div className=\"card card-clean p-4\">\n// //         <div className=\"d-flex justify-content-between align-items-start\">\n// //           <div>\n// //             <h5 className=\"mb-0\">Candidate: {fullName}</h5>\n// //             <small className=\"text-muted\">{email}</small>\n// //           </div>\n// //           <div>\n// //             <span className=\"badge bg-primary\">Question {currentIdx + 1} / {questions.length}</span>\n// //           </div>\n// //         </div>\n\n// //         <div className=\"mt-4\">\n// //           <QuestionCard question={currentQ} selectedAnswer={selectedForCurrent} onSelect={handleSelect} />\n// //         </div>\n\n// //         <div className=\"mt-3 d-flex justify-content-between\">\n// //           <div>\n// //             <button className=\"btn btn-secondary me-2\" onClick={goPrev} disabled={currentIdx === 0}>Previous</button>\n// //             <button className=\"btn btn-secondary\" onClick={goNext} disabled={currentIdx === questions.length - 1}>Next</button>\n// //           </div>\n\n// //           <div>\n// //             <button className=\"btn btn-danger me-2\" onClick={() => {\n// //               if (window.confirm(\"Are you sure you want to abandon this test?\")) navigate(\"/\");\n// //             }}>Abandon</button>\n\n// //             <button className=\"btn btn-success\" onClick={handleSubmit}>Submit Test</button>\n// //           </div>\n// //         </div>\n// //       </div>\n// //     </div>\n// //   );\n// // }\n_s(TestPage, \"7U9XQVoTuSKbWs4c9I8hKszfvKo=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = TestPage;\nvar _c;\n$RefreshReg$(_c, \"TestPage\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","useNavigate","API","jsxDEV","_jsxDEV","timeLeft","setTimeLeft","pickRandom","arr","n","copy","res","length","idx","Math","floor","random","push","splice","TestPage","_s","_currentQ$options","location","navigate","fullName","email","numQ","state","allQuestions","setAllQuestions","questions","setQuestions","answers","setAnswers","currentIdx","setCurrentIdx","loading","setLoading","submitted","setSubmitted","score","setScore","resultSaved","setResultSaved","testEnded","setTestEnded","fetchQuestions","getAll","data","error","alert","timeLimit","err","console","selected","min","handleBeforeUnload","e","preventDefault","returnValue","handleVisibilityChange","document","hidden","window","addEventListener","removeEventListener","handleSelect","questionId","value","goNext","goPrev","handleSubmit","Object","keys","confirm","s","forEach","q","questionType","_id","correctAnswer","formattedAnswers","map","question","questionText","userAnswer","isCorrect","type","tests","submit","name","totalQuestions","correctAnswers","scorePercent","toFixed","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","reload","currentQ","selectedAnswer","toLowerCase","options","opt","i","checked","onChange","target","placeholder","rows","disabled","_c","$RefreshReg$"],"sources":["C:/Users/HP/Downloads/INTERVIEW PROCESS/INTERVIEW PROCESS/client/src/pages/TestPage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport API from \"../services/api\";\r\nimport \"../styles/TestPage.css\";\r\nconst [timeLeft, setTimeLeft] = useState(null);\r\n\r\n\r\nfunction pickRandom(arr, n) {\r\n  const copy = [...arr];\r\n  const res = [];\r\n  while (res.length < n && copy.length > 0) {\r\n    const idx = Math.floor(Math.random() * copy.length);\r\n    res.push(copy.splice(idx, 1)[0]);\r\n  }\r\n  return res;\r\n}\r\n\r\nexport default function TestPage() {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const { fullName, email, numQ } = location.state || {};\r\n\r\n  const [allQuestions, setAllQuestions] = useState([]);\r\n  const [questions, setQuestions] = useState([]);\r\n  const [answers, setAnswers] = useState({});\r\n  const [currentIdx, setCurrentIdx] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [resultSaved, setResultSaved] = useState(false);\r\n  const [testEnded, setTestEnded] = useState(false); // 🆕 detect tab switch/reload\r\n\r\n  // 🟢 Fetch questions\r\n  useEffect(() => {\r\n    if (!fullName || !email) {\r\n      navigate(\"/\");\r\n      return;\r\n    }\r\n\r\n    const fetchQuestions = async () => {\r\n  try {\r\n    const res = await API.questions.getAll();\r\n    if (res.data.error) {\r\n      alert(res.data.error);\r\n      navigate(\"/\");\r\n      return;\r\n    }\r\n\r\n    setQuestions(res.data.questions || []);\r\n    setTimeLeft(res.data.timeLimit * 60); // seconds\r\n  } catch (err) {\r\n    console.error(err);\r\n    alert(\"Failed to fetch questions. Please wait for admin to start the test.\");\r\n    navigate(\"/\");\r\n  } finally {\r\n    setLoading(false);\r\n  }\r\n};\r\n\r\n\r\n    fetchQuestions();\r\n  }, [fullName, email, navigate]);\r\n\r\n  // 🟢 Pick random questions\r\n  useEffect(() => {\r\n    if (!loading && allQuestions.length > 0) {\r\n      const selected = pickRandom(allQuestions, Math.min(numQ || 10, allQuestions.length));\r\n      setQuestions(selected);\r\n    }\r\n  }, [loading, allQuestions, numQ]);\r\n\r\n  // 🛑 Detect tab switch, reload, or page exit\r\n  useEffect(() => {\r\n    const handleBeforeUnload = (e) => {\r\n      e.preventDefault();\r\n      e.returnValue = \"\";\r\n      setTestEnded(true);\r\n    };\r\n\r\n    const handleVisibilityChange = () => {\r\n      if (document.hidden) {\r\n        setTestEnded(true);\r\n      }\r\n    };\r\n\r\n    window.addEventListener(\"beforeunload\", handleBeforeUnload);\r\n    document.addEventListener(\"visibilitychange\", handleVisibilityChange);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"beforeunload\", handleBeforeUnload);\r\n      document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\r\n    };\r\n  }, []);\r\n\r\n  const handleSelect = (questionId, value) => {\r\n    setAnswers({ ...answers, [questionId]: value });\r\n  };\r\n\r\n  const goNext = () => {\r\n    if (currentIdx < questions.length - 1) setCurrentIdx(currentIdx + 1);\r\n  };\r\n  const goPrev = () => {\r\n    if (currentIdx > 0) setCurrentIdx(currentIdx - 1);\r\n  };\r\n\r\n  // 🟢 Submit handler\r\n  const handleSubmit = async () => {\r\n    if (Object.keys(answers).length < questions.length) {\r\n      if (!window.confirm(\"Some questions are unanswered. Submit anyway?\")) return;\r\n    }\r\n\r\n    // Calculate score only for MCQs\r\n    let s = 0;\r\n    questions.forEach((q) => {\r\n      if (q.questionType === \"MCQ\" && answers[q._id] === q.correctAnswer) s += 1;\r\n    });\r\n    setScore(s);\r\n    setSubmitted(true);\r\n\r\n    // Prepare formatted answers\r\n    const formattedAnswers = questions.map((q) => ({\r\n      question: q.questionText,\r\n      userAnswer: answers[q._id] || \"Not answered\",\r\n      correctAnswer: q.correctAnswer || \"\",\r\n      isCorrect: q.questionType === \"MCQ\" ? answers[q._id] === q.correctAnswer : null,\r\n      type: q.questionType || \"Theory\",\r\n    }));\r\n\r\n    try {\r\n      await API.tests.submit({\r\n        name: fullName,\r\n        email,\r\n        answers: formattedAnswers,\r\n        totalQuestions: questions.length,\r\n        correctAnswers: s,\r\n        scorePercent: ((s / questions.length) * 100).toFixed(2),\r\n      });\r\n      setResultSaved(true);\r\n    } catch (err) {\r\n      console.error(\"Error saving result:\", err);\r\n      alert(\"Failed to save result to server.\");\r\n    }\r\n  };\r\n\r\n  // 🛑 If test was ended (tab switch or reload)\r\n  if (testEnded) {\r\n    return (\r\n      <div className=\"container container-center\">\r\n        <div className=\"card card-clean p-4 text-center\">\r\n          <h3 className=\"text-danger\">⚠️ Test Ended</h3>\r\n          <p>Your test session has ended because you switched tabs, reloaded, or left the page.</p>\r\n          <h4 className=\"mt-3 text-success\">Thank you for your time!</h4>\r\n          <button\r\n            className=\"btn btn-primary mt-3\"\r\n            onClick={() => navigate(\"/\")}\r\n          >\r\n            Go to Home\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (loading) return <div className=\"container container-center\">Loading questions…</div>;\r\n  if (!questions || questions.length === 0)\r\n    return <div className=\"container container-center\">No questions available. Please try later.</div>;\r\n\r\n  if (submitted) {\r\n    return (\r\n      <div className=\"container container-center\">\r\n        <div className=\"card card-clean p-4\">\r\n          <h3 className=\"text-success\">Test Completed Successfully</h3>\r\n          <p><strong>{fullName}</strong> ({email})</p>\r\n          <h4>Your Score: {score} / {questions.length}</h4>\r\n\r\n          {resultSaved && (\r\n            <div className=\"alert alert-success mt-2\">\r\n              ✅ Your result has been recorded successfully!\r\n            </div>\r\n          )}\r\n\r\n          <hr />\r\n          <h5>Review Answers</h5>\r\n          <div>\r\n            {questions.map((q, idx) => (\r\n              <div className=\"review-question\" key={q._id}>\r\n                <b>Q{idx + 1}:</b> {q.questionText}\r\n                <div>\r\n                  Your answer:{\" \"}\r\n                  <span\r\n                    className={\r\n                      q.questionType === \"MCQ\"\r\n                        ? answers[q._id] === q.correctAnswer\r\n                          ? \"text-success\"\r\n                          : \"text-danger\"\r\n                        : \"text-primary\"\r\n                    }\r\n                  >\r\n                    {answers[q._id] || \"Not answered\"}\r\n                  </span>\r\n                </div>\r\n                {q.questionType === \"MCQ\" && (\r\n                  <div>\r\n                    Correct answer:{\" \"}\r\n                    <span className=\"text-success\">{q.correctAnswer}</span>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          <div className=\"mt-4\">\r\n            <button className=\"btn btn-primary me-2\" onClick={() => navigate(\"/\")}>\r\n              Back to Home\r\n            </button>\r\n            <button className=\"btn btn-outline-secondary\" onClick={() => window.location.reload()}>\r\n              Retake Test\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const currentQ = questions[currentIdx];\r\n  const selectedAnswer = answers[currentQ._id] || \"\";\r\n\r\n  return (\r\n    <div className=\"test-container\">\r\n      <div className=\"card test-card\">\r\n        <div className=\"test-header\">\r\n          <div>\r\n            <h5 className=\"text-danger fw-bold\">\r\n              Candidate: {fullName.toLowerCase()}\r\n            </h5>\r\n            <small className=\"text-muted\">{email}</small>\r\n          </div>\r\n          <div>\r\n            <span className=\"badge bg-primary\">\r\n              Question {currentIdx + 1} / {questions.length}\r\n            </span>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"test-body\">\r\n          <h6 className=\"question-text\">\r\n            <b>Q{currentIdx + 1}:</b> {currentQ.questionText}\r\n          </h6>\r\n\r\n          {currentQ.questionType === \"MCQ\" && currentQ.options?.length > 0 ? (\r\n            <div className=\"options-container\">\r\n              {currentQ.options.map((opt, i) => (\r\n                <label\r\n                  key={i}\r\n                  className={`option-item ${\r\n                    selectedAnswer === opt ? \"selected\" : \"\"\r\n                  }`}\r\n                >\r\n                  <input\r\n                    type=\"radio\"\r\n                    name={`question-${currentQ._id}`}\r\n                    value={opt}\r\n                    checked={selectedAnswer === opt}\r\n                    onChange={(e) => handleSelect(currentQ._id, e.target.value)}\r\n                  />\r\n                  {opt}\r\n                </label>\r\n              ))}\r\n            </div>\r\n          ) : (\r\n            <textarea\r\n              className=\"theory-input\"\r\n              placeholder=\"Type your answer here...\"\r\n              value={selectedAnswer}\r\n              onChange={(e) => handleSelect(currentQ._id, e.target.value)}\r\n              rows={5}\r\n            ></textarea>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"test-footer\">\r\n          <div>\r\n            <button\r\n              className=\"btn btn-secondary me-3\"\r\n              onClick={goPrev}\r\n              disabled={currentIdx === 0}\r\n            >\r\n              Previous\r\n            </button>\r\n            <button\r\n              className=\"btn btn-secondary\"\r\n              onClick={goNext}\r\n              disabled={currentIdx === questions.length - 1}\r\n            >\r\n              Next\r\n            </button>\r\n          </div>\r\n\r\n          <div>\r\n            <button className=\"btn btn-success\" onClick={handleSubmit}>\r\n              Submit Test\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { useLocation, useNavigate } from \"react-router-dom\";\r\n// import API from \"../services/api\";\r\n// import \"../styles/TestPage.css\";\r\n\r\n// function pickRandom(arr, n) {\r\n//   const copy = [...arr];\r\n//   const res = [];\r\n//   while (res.length < n && copy.length > 0) {\r\n//     const idx = Math.floor(Math.random() * copy.length);\r\n//     res.push(copy.splice(idx, 1)[0]);\r\n//   }\r\n//   return res;\r\n// }\r\n\r\n// export default function TestPage() {\r\n//   const location = useLocation();\r\n//   const navigate = useNavigate();\r\n//   const { fullName, email, numQ } = location.state || {};\r\n\r\n//   const [allQuestions, setAllQuestions] = useState([]);\r\n//   const [questions, setQuestions] = useState([]);\r\n//   const [answers, setAnswers] = useState({});\r\n//   const [currentIdx, setCurrentIdx] = useState(0);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [submitted, setSubmitted] = useState(false);\r\n//   const [score, setScore] = useState(0);\r\n//   const [resultSaved, setResultSaved] = useState(false);\r\n\r\n//   // 🟢 Fetch questions\r\n//   useEffect(() => {\r\n//     if (!fullName || !email) {\r\n//       navigate(\"/\");\r\n//       return;\r\n//     }\r\n\r\n//     const fetchQuestions = async () => {\r\n//       try {\r\n//         const res = await API.questions.getAll();\r\n//         setAllQuestions(res.data || []);\r\n//       } catch (err) {\r\n//         console.error(err);\r\n//         alert(\"Failed to fetch questions from server.\");\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchQuestions();\r\n//   }, [fullName, email, navigate]);\r\n\r\n//   // 🟢 Pick random questions\r\n//   useEffect(() => {\r\n//     if (!loading && allQuestions.length > 0) {\r\n//       const selected = pickRandom(allQuestions, Math.min(numQ || 10, allQuestions.length));\r\n//       setQuestions(selected);\r\n//     }\r\n//   }, [loading, allQuestions, numQ]);\r\n\r\n//   const handleSelect = (questionId, value) => {\r\n//     setAnswers({ ...answers, [questionId]: value });\r\n//   };\r\n\r\n//   const goNext = () => {\r\n//     if (currentIdx < questions.length - 1) setCurrentIdx(currentIdx + 1);\r\n//   };\r\n//   const goPrev = () => {\r\n//     if (currentIdx > 0) setCurrentIdx(currentIdx - 1);\r\n//   };\r\n\r\n//   // 🟢 Submit handler\r\n//   const handleSubmit = async () => {\r\n//     if (Object.keys(answers).length < questions.length) {\r\n//       if (!window.confirm(\"Some questions are unanswered. Submit anyway?\")) return;\r\n//     }\r\n\r\n//     // Calculate score only for MCQs\r\n//     let s = 0;\r\n//     questions.forEach((q) => {\r\n//       if (q.questionType === \"MCQ\" && answers[q._id] === q.correctAnswer) s += 1;\r\n//     });\r\n//     setScore(s);\r\n//     setSubmitted(true);\r\n\r\n//     // Prepare formatted answers\r\n//     const formattedAnswers = questions.map((q) => ({\r\n//       question: q.questionText,\r\n//       userAnswer: answers[q._id] || \"Not answered\",\r\n//       correctAnswer: q.correctAnswer || \"\",\r\n//       isCorrect: q.questionType === \"MCQ\" ? answers[q._id] === q.correctAnswer : null,\r\n//       type: q.questionType || \"Theory\",\r\n//     }));\r\n\r\n//     try {\r\n//       await API.tests.submit({\r\n//         name: fullName,\r\n//         email,\r\n//         answers: formattedAnswers,\r\n//         totalQuestions: questions.length,\r\n//         correctAnswers: s,\r\n//         scorePercent: ((s / questions.length) * 100).toFixed(2),\r\n//       });\r\n//       setResultSaved(true);\r\n//     } catch (err) {\r\n//       console.error(\"Error saving result:\", err);\r\n//       alert(\"Failed to save result to server.\");\r\n//     }\r\n//   };\r\n\r\n//   if (loading) return <div className=\"container container-center\">Loading questions…</div>;\r\n//   if (!questions || questions.length === 0)\r\n//     return <div className=\"container container-center\">No questions available. Please try later.</div>;\r\n\r\n//   if (submitted) {\r\n//     return (\r\n//       <div className=\"container container-center\">\r\n//         <div className=\"card card-clean p-4\">\r\n//           <h3 className=\"text-success\">Test Completed Successfully</h3>\r\n//           <p><strong>{fullName}</strong> ({email})</p>\r\n//           <h4>Your Score: {score} / {questions.length}</h4>\r\n\r\n//           {resultSaved && (\r\n//             <div className=\"alert alert-success mt-2\">\r\n//               ✅ Your result has been recorded successfully!\r\n//             </div>\r\n//           )}\r\n\r\n//           <hr />\r\n//           <h5>Review Answers</h5>\r\n//           <div>\r\n//             {questions.map((q, idx) => (\r\n//               <div className=\"review-question\" key={q._id}>\r\n//                 <b>Q{idx + 1}:</b> {q.questionText}\r\n//                 <div>\r\n//                   Your answer:{\" \"}\r\n//                   <span\r\n//                     className={\r\n//                       q.questionType === \"MCQ\"\r\n//                         ? answers[q._id] === q.correctAnswer\r\n//                           ? \"text-success\"\r\n//                           : \"text-danger\"\r\n//                         : \"text-primary\"\r\n//                     }\r\n//                   >\r\n//                     {answers[q._id] || \"Not answered\"}\r\n//                   </span>\r\n//                 </div>\r\n//                 {q.questionType === \"MCQ\" && (\r\n//                   <div>\r\n//                     Correct answer:{\" \"}\r\n//                     <span className=\"text-success\">{q.correctAnswer}</span>\r\n//                   </div>\r\n//                 )}\r\n//               </div>\r\n//             ))}\r\n//           </div>\r\n\r\n//           <div className=\"mt-4\">\r\n//             <button className=\"btn btn-primary me-2\" onClick={() => navigate(\"/\")}>\r\n//               Back to Home\r\n//             </button>\r\n//             <button className=\"btn btn-outline-secondary\" onClick={() => window.location.reload()}>\r\n//               Retake Test\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   const currentQ = questions[currentIdx];\r\n//   const selectedAnswer = answers[currentQ._id] || \"\";\r\n\r\n//   return (\r\n//     <div className=\"test-container\">\r\n//       <div className=\"card test-card\">\r\n//         <div className=\"test-header\">\r\n//           <div>\r\n//             <h5 className=\"text-danger fw-bold\">\r\n//               Candidate: {fullName.toLowerCase()}\r\n//             </h5>\r\n//             <small className=\"text-muted\">{email}</small>\r\n//           </div>\r\n//           <div>\r\n//             <span className=\"badge bg-primary\">\r\n//               Question {currentIdx + 1} / {questions.length}\r\n//             </span>\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"test-body\">\r\n//           <h6 className=\"question-text\">\r\n//              <b>Q{currentIdx + 1}:</b> {currentQ.questionText}\r\n//           </h6>\r\n\r\n//           {/* 🧠 Conditional rendering for MCQ / Theory */}\r\n//           {currentQ.questionType === \"MCQ\" && currentQ.options?.length > 0 ? (\r\n//             <div className=\"options-container\">\r\n//               {currentQ.options.map((opt, i) => (\r\n//                 <label\r\n//                   key={i}\r\n//                   className={`option-item ${\r\n//                     selectedAnswer === opt ? \"selected\" : \"\"\r\n//                   }`}\r\n//                 >\r\n//                   <input\r\n//                     type=\"radio\"\r\n//                     name={`question-${currentQ._id}`}\r\n//                     value={opt}\r\n//                     checked={selectedAnswer === opt}\r\n//                     onChange={(e) => handleSelect(currentQ._id, e.target.value)}\r\n//                   />\r\n//                   {opt}\r\n//                 </label>\r\n//               ))}\r\n//             </div>\r\n//           ) : (\r\n//             <textarea\r\n//               className=\"theory-input\"\r\n//               placeholder=\"Type your answer here...\"\r\n//               value={selectedAnswer}\r\n//               onChange={(e) => handleSelect(currentQ._id, e.target.value)}\r\n//               rows={5}\r\n//             ></textarea>\r\n//           )}\r\n//         </div>\r\n\r\n//         <div className=\"test-footer\">\r\n//           <div>\r\n//             <button\r\n//               className=\"btn btn-secondary me-3\"\r\n//               onClick={goPrev}\r\n//               disabled={currentIdx === 0}\r\n//             >\r\n//               Previous\r\n//             </button>\r\n//             <button\r\n//               className=\"btn btn-secondary\"\r\n//               onClick={goNext}\r\n//               disabled={currentIdx === questions.length - 1}\r\n//             >\r\n//               Next\r\n//             </button>\r\n//           </div>\r\n\r\n//           <div>\r\n//             {/* <button\r\n//               className=\"btn btn-danger me-2\"\r\n//               onClick={() => {\r\n//                 if (window.confirm(\"Are you sure you want to abandon this test?\"))\r\n//                   navigate(\"/\");\r\n//               }}\r\n//             >\r\n//               Abandon\r\n//             </button> */}\r\n//             <button className=\"btn btn-success\" onClick={handleSubmit}>\r\n//               Submit Test\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { useLocation, useNavigate } from \"react-router-dom\";\r\n// import API from \"../services/api\";\r\n// import QuestionCard from \"../components/QuestionCard\";\r\n// import \"../styles/TestPage.css\";\r\n\r\n// function pickRandom(arr, n) {\r\n//   const copy = [...arr];\r\n//   const res = [];\r\n//   while (res.length < n && copy.length > 0) {\r\n//     const idx = Math.floor(Math.random() * copy.length);\r\n//     res.push(copy.splice(idx, 1)[0]);\r\n//   }\r\n//   return res;\r\n// }\r\n\r\n// export default function TestPage() {\r\n//   const location = useLocation();\r\n//   const navigate = useNavigate();\r\n//   const { fullName, email, numQ } = location.state || {};\r\n//   const [allQuestions, setAllQuestions] = useState([]);\r\n//   const [questions, setQuestions] = useState([]);\r\n//   const [answers, setAnswers] = useState({});\r\n//   const [currentIdx, setCurrentIdx] = useState(0);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [submitted, setSubmitted] = useState(false);\r\n//   const [score, setScore] = useState(0);\r\n//   const [resultSaved, setResultSaved] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     if (!fullName || !email) {\r\n//       navigate(\"/\");\r\n//       return;\r\n//     }\r\n\r\n//     const fetchQuestions = async () => {\r\n//       try {\r\n//         const res = await API.get(\"/questions\");\r\n//         setAllQuestions(res.data || []);\r\n//       } catch (err) {\r\n//         console.error(err);\r\n//         alert(\"Failed to fetch questions from server.\");\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchQuestions();\r\n//   }, [fullName, email, navigate]);\r\n\r\n//   useEffect(() => {\r\n//     if (!loading && allQuestions.length > 0) {\r\n//       const selected = pickRandom(allQuestions, Math.min(numQ || 10, allQuestions.length));\r\n//       setQuestions(selected);\r\n//     }\r\n//   }, [loading, allQuestions, numQ]);\r\n\r\n//   const handleSelect = (opt) => {\r\n//     const q = questions[currentIdx];\r\n//     setAnswers({ ...answers, [q._id]: opt });\r\n//   };\r\n\r\n//   const goNext = () => {\r\n//     if (currentIdx < questions.length - 1) setCurrentIdx(currentIdx + 1);\r\n//   };\r\n//   const goPrev = () => {\r\n//     if (currentIdx > 0) setCurrentIdx(currentIdx - 1);\r\n//   };\r\n\r\n//   const handleSubmit = async () => {\r\n//     if (Object.keys(answers).length < questions.length) {\r\n//       if (!window.confirm(\"Some questions are unanswered. Submit anyway?\")) return;\r\n//     }\r\n\r\n//     // calculate score\r\n//     let s = 0;\r\n//     questions.forEach((q) => {\r\n//       if (answers[q._id] && answers[q._id] === q.correctAnswer) s += 1;\r\n//     });\r\n//     setScore(s);\r\n//     setSubmitted(true);\r\n\r\n//     // format answers for backend\r\n//     const formattedAnswers = questions.map((q) => ({\r\n//       question: q.questionText,\r\n//       userAnswer: answers[q._id] || \"Not answered\",\r\n//       correctAnswer: q.correctAnswer,\r\n//       isCorrect: answers[q._id] === q.correctAnswer,\r\n//     }));\r\n\r\n//     try {\r\n//       await API.post(\"/tests\", {\r\n//         name: fullName,\r\n//         email,\r\n//         answers: formattedAnswers,\r\n//       });\r\n//       setResultSaved(true);\r\n//     } catch (err) {\r\n//       console.error(\"Error saving result:\", err);\r\n//       alert(\"Failed to save result to server.\");\r\n//     }\r\n//   };\r\n\r\n//   if (loading) return <div className=\"container container-center\">Loading questions…</div>;\r\n//   if (!questions || questions.length === 0)\r\n//     return <div className=\"container container-center\">No questions available. Please try later.</div>;\r\n\r\n//   if (submitted) {\r\n//     return (\r\n//       <div className=\"container container-center\">\r\n//         <div className=\"card card-clean p-4\">\r\n//           <h3 className=\"text-success\">Test Completed Successfully</h3>\r\n//           <p><strong>{fullName}</strong> ({email})</p>\r\n//           <h4>Your Score: {score} / {questions.length}</h4>\r\n\r\n//           {resultSaved && (\r\n//             <div className=\"alert alert-success mt-2\">\r\n//               ✅ Your result has been recorded successfully!\r\n//             </div>\r\n//           )}\r\n\r\n//           <hr />\r\n//           <h5>Review Answers</h5>\r\n//           <div>\r\n//             {questions.map((q, idx) => (\r\n//               <div className=\"mb-3\" key={q._id}>\r\n//                 <b>Q{idx + 1}:</b> {q.questionText}\r\n//                 <div>\r\n//                   Your answer:{\" \"}\r\n//                   <span\r\n//                     className={\r\n//                       answers[q._id] === q.correctAnswer\r\n//                         ? \"text-success\"\r\n//                         : \"text-danger\"\r\n//                     }\r\n//                   >\r\n//                     {answers[q._id] || \"Not answered\"}\r\n//                   </span>\r\n//                 </div>\r\n//                 <div>\r\n//                   Correct answer:{\" \"}\r\n//                   <span className=\"text-success\">{q.correctAnswer}</span>\r\n//                 </div>\r\n//               </div>\r\n//             ))}\r\n//           </div>\r\n\r\n//           <div className=\"mt-3\">\r\n//             <button className=\"btn btn-primary me-2\" onClick={() => navigate(\"/\")}>\r\n//               Back to Home\r\n//             </button>\r\n//             <button className=\"btn btn-outline-secondary\" onClick={() => window.location.reload()}>\r\n//               Retake Test\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   const currentQ = questions[currentIdx];\r\n//   const selectedForCurrent = answers[currentQ._id];\r\n\r\n//   return (\r\n//     <div className=\"container container-center\">\r\n//       <div className=\"card card-clean p-4\">\r\n//         <div className=\"d-flex justify-content-between align-items-start\">\r\n//           <div>\r\n//             <h5 className=\"mb-0\">Candidate: {fullName}</h5>\r\n//             <small className=\"text-muted\">{email}</small>\r\n//           </div>\r\n//           <div>\r\n//             <span className=\"badge bg-primary\">\r\n//               Question {currentIdx + 1} / {questions.length}\r\n//             </span>\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"mt-4\">\r\n//           <QuestionCard\r\n//             question={currentQ}\r\n//             selectedAnswer={selectedForCurrent}\r\n//             onSelect={handleSelect}\r\n//           />\r\n//         </div>\r\n\r\n//         <div className=\"mt-3 d-flex justify-content-between\">\r\n//           <div>\r\n//             <button\r\n//               className=\"btn btn-secondary me-2\"\r\n//               onClick={goPrev}\r\n//               disabled={currentIdx === 0}\r\n//             >\r\n//               Previous\r\n//             </button>\r\n//             <button\r\n//               className=\"btn btn-secondary\"\r\n//               onClick={goNext}\r\n//               disabled={currentIdx === questions.length - 1}\r\n//             >\r\n//               Next\r\n//             </button>\r\n//           </div>\r\n\r\n//           <div>\r\n//             <button\r\n//               className=\"btn btn-danger me-2\"\r\n//               onClick={() => {\r\n//                 if (window.confirm(\"Are you sure you want to abandon this test?\"))\r\n//                   navigate(\"/\");\r\n//               }}\r\n//             >\r\n//               Abandon\r\n//             </button>\r\n\r\n//             <button className=\"btn btn-success\" onClick={handleSubmit}>\r\n//               Submit Test\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// // import React, { useEffect, useState } from \"react\";\r\n// // import { useLocation, useNavigate } from \"react-router-dom\";\r\n// // import API from \"../services/api\";\r\n// // import QuestionCard from \"../components/QuestionCard\";\r\n// // import \"../styles/TestPage.css\";\r\n\r\n// // function pickRandom(arr, n) {\r\n// //   const copy = [...arr];\r\n// //   const res = [];\r\n// //   while (res.length < n && copy.length > 0) {\r\n// //     const idx = Math.floor(Math.random() * copy.length);\r\n// //     res.push(copy.splice(idx, 1)[0]);\r\n// //   }\r\n// //   return res;\r\n// // }\r\n\r\n// // export default function TestPage() {\r\n// //   const location = useLocation();\r\n// //   const navigate = useNavigate();\r\n// //   const { fullName, email, numQ } = location.state || {};\r\n// //   const [allQuestions, setAllQuestions] = useState([]);\r\n// //   const [questions, setQuestions] = useState([]);\r\n// //   const [answers, setAnswers] = useState({}); // { questionId: selectedOption }\r\n// //   const [currentIdx, setCurrentIdx] = useState(0);\r\n// //   const [loading, setLoading] = useState(true);\r\n// //   const [submitted, setSubmitted] = useState(false);\r\n// //   const [score, setScore] = useState(0);\r\n\r\n// //   useEffect(() => {\r\n// //     if (!fullName || !email) {\r\n// //       // if page opened without details -> back to home\r\n// //       navigate(\"/\");\r\n// //       return;\r\n// //     }\r\n\r\n// //     const fetchQuestions = async () => {\r\n// //       try {\r\n// //         const res = await API.get(\"/questions\");\r\n// //         setAllQuestions(res.data || []);\r\n// //       } catch (err) {\r\n// //         console.error(err);\r\n// //         alert(\"Failed to fetch questions from server.\");\r\n// //       } finally {\r\n// //         setLoading(false);\r\n// //       }\r\n// //     };\r\n\r\n// //     fetchQuestions();\r\n// //   }, [fullName, email, navigate]);\r\n\r\n// //   useEffect(() => {\r\n// //     if (!loading && allQuestions.length > 0) {\r\n// //       const chunk = pickRandom(allQuestions, Math.min(numQ || 10, allQuestions.length));\r\n// //       setQuestions(chunk);\r\n// //     }\r\n// //   }, [loading, allQuestions, numQ]);\r\n\r\n// //   const handleSelect = (opt) => {\r\n// //     const q = questions[currentIdx];\r\n// //     setAnswers({ ...answers, [q._id]: opt });\r\n// //   };\r\n\r\n// //   const goNext = () => {\r\n// //     if (currentIdx < questions.length - 1) setCurrentIdx(currentIdx + 1);\r\n// //   };\r\n// //   const goPrev = () => {\r\n// //     if (currentIdx > 0) setCurrentIdx(currentIdx - 1);\r\n// //   };\r\n\r\n// //   const handleSubmit = () => {\r\n// //     // ensure all answered\r\n// //     if (Object.keys(answers).length < questions.length) {\r\n// //       if (!window.confirm(\"Some questions are unanswered. Submit anyway?\")) return;\r\n// //     }\r\n\r\n// //     // compute score\r\n// //     let s = 0;\r\n// //     questions.forEach((q) => {\r\n// //       if (answers[q._id] && answers[q._id] === q.correctAnswer) s += 1;\r\n// //     });\r\n// //     setScore(s);\r\n// //     setSubmitted(true);\r\n// //   };\r\n\r\n// //   if (loading) return <div className=\"container container-center\">Loading questions…</div>;\r\n// //   if (!questions || questions.length === 0) return <div className=\"container container-center\">No questions available. Please try later.</div>;\r\n\r\n// //   if (submitted) {\r\n// //     return (\r\n// //       <div className=\"container container-center\">\r\n// //         <div className=\"card card-clean p-4\">\r\n// //           <h3>Test Completed</h3>\r\n// //           <p><strong>{fullName}</strong> ({email})</p>\r\n// //           <h4>Your score: {score} out of {questions.length}</h4>\r\n// //           <hr />\r\n// //           <h5>Review</h5>\r\n// //           <div>\r\n// //             {questions.map((q, idx) => (\r\n// //               <div className=\"mb-3\" key={q._id}>\r\n// //                 <b>Q{idx + 1}:</b> {q.questionText}\r\n// //                 <div>Your answer: <span className={answers[q._id] === q.correctAnswer ? \"text-success\" : \"text-danger\"}>{answers[q._id] || \"Not answered\"}</span></div>\r\n// //                 <div>Correct answer: <span className=\"text-success\">{q.correctAnswer}</span></div>\r\n// //               </div>\r\n// //             ))}\r\n// //           </div>\r\n\r\n// //           <div className=\"mt-3\">\r\n// //             <button className=\"btn btn-primary me-2\" onClick={() => navigate(\"/\")}>Back to Home</button>\r\n// //             <button className=\"btn btn-outline-secondary\" onClick={() => window.location.reload()}>Take New Test</button>\r\n// //           </div>\r\n// //         </div>\r\n// //       </div>\r\n// //     );\r\n// //   }\r\n\r\n// //   const currentQ = questions[currentIdx];\r\n// //   const selectedForCurrent = answers[currentQ._id];\r\n\r\n// //   return (\r\n// //     <div className=\"container container-center\">\r\n// //       <div className=\"card card-clean p-4\">\r\n// //         <div className=\"d-flex justify-content-between align-items-start\">\r\n// //           <div>\r\n// //             <h5 className=\"mb-0\">Candidate: {fullName}</h5>\r\n// //             <small className=\"text-muted\">{email}</small>\r\n// //           </div>\r\n// //           <div>\r\n// //             <span className=\"badge bg-primary\">Question {currentIdx + 1} / {questions.length}</span>\r\n// //           </div>\r\n// //         </div>\r\n\r\n// //         <div className=\"mt-4\">\r\n// //           <QuestionCard question={currentQ} selectedAnswer={selectedForCurrent} onSelect={handleSelect} />\r\n// //         </div>\r\n\r\n// //         <div className=\"mt-3 d-flex justify-content-between\">\r\n// //           <div>\r\n// //             <button className=\"btn btn-secondary me-2\" onClick={goPrev} disabled={currentIdx === 0}>Previous</button>\r\n// //             <button className=\"btn btn-secondary\" onClick={goNext} disabled={currentIdx === questions.length - 1}>Next</button>\r\n// //           </div>\r\n\r\n// //           <div>\r\n// //             <button className=\"btn btn-danger me-2\" onClick={() => {\r\n// //               if (window.confirm(\"Are you sure you want to abandon this test?\")) navigate(\"/\");\r\n// //             }}>Abandon</button>\r\n\r\n// //             <button className=\"btn btn-success\" onClick={handleSubmit}>Submit Test</button>\r\n// //           </div>\r\n// //         </div>\r\n// //       </div>\r\n// //     </div>\r\n// //   );\r\n// // }\r\n"],"mappings":"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AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAhF,EAAA,CAt6BwBD,QAAQ;EAAA,QACbnB,WAAW,EACXC,WAAW;AAAA;AAAAkH,EAAA,GAFNhG,QAAQ;AAAA,IAAAgG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}