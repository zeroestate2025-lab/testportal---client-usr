{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Downloads\\\\INTERVIEW PROCESS\\\\INTERVIEW PROCESS\\\\client\\\\src\\\\pages\\\\TestPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport API from \"../services/api\";\nimport QuestionCard from \"../components/QuestionCard\";\nimport \"../styles/TestPage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction pickRandom(arr, n) {\n  const copy = [...arr];\n  const res = [];\n  while (res.length < n && copy.length > 0) {\n    const idx = Math.floor(Math.random() * copy.length);\n    res.push(copy.splice(idx, 1)[0]);\n  }\n  return res;\n}\nexport default function TestPage() {\n  _s();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const {\n    fullName,\n    email,\n    numQ\n  } = location.state || {};\n  const [allQuestions, setAllQuestions] = useState([]);\n  const [questions, setQuestions] = useState([]);\n  const [answers, setAnswers] = useState({});\n  const [currentIdx, setCurrentIdx] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [submitted, setSubmitted] = useState(false);\n  const [score, setScore] = useState(0);\n  const [resultSaved, setResultSaved] = useState(false);\n  useEffect(() => {\n    if (!fullName || !email) {\n      navigate(\"/\");\n      return;\n    }\n    const fetchQuestions = async () => {\n      try {\n        const res = await API.get(\"/questions\");\n        setAllQuestions(res.data || []);\n      } catch (err) {\n        console.error(err);\n        alert(\"Failed to fetch questions from server.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchQuestions();\n  }, [fullName, email, navigate]);\n  useEffect(() => {\n    if (!loading && allQuestions.length > 0) {\n      const selected = pickRandom(allQuestions, Math.min(numQ || 10, allQuestions.length));\n      setQuestions(selected);\n    }\n  }, [loading, allQuestions, numQ]);\n  const handleSelect = opt => {\n    const q = questions[currentIdx];\n    setAnswers({\n      ...answers,\n      [q._id]: opt\n    });\n  };\n  const goNext = () => {\n    if (currentIdx < questions.length - 1) setCurrentIdx(currentIdx + 1);\n  };\n  const goPrev = () => {\n    if (currentIdx > 0) setCurrentIdx(currentIdx - 1);\n  };\n  const handleSubmit = async () => {\n    if (Object.keys(answers).length < questions.length) {\n      if (!window.confirm(\"Some questions are unanswered. Submit anyway?\")) return;\n    }\n\n    // calculate score\n    let s = 0;\n    questions.forEach(q => {\n      if (answers[q._id] && answers[q._id] === q.correctAnswer) s += 1;\n    });\n    setScore(s);\n    setSubmitted(true);\n\n    // format answers for backend\n    const formattedAnswers = questions.map(q => ({\n      question: q.questionText,\n      userAnswer: answers[q._id] || \"Not answered\",\n      correctAnswer: q.correctAnswer,\n      isCorrect: answers[q._id] === q.correctAnswer\n    }));\n    try {\n      await API.post(\"/tests\", {\n        name: fullName,\n        email,\n        answers: formattedAnswers\n      });\n      setResultSaved(true);\n    } catch (err) {\n      console.error(\"Error saving result:\", err);\n      alert(\"Failed to save result to server.\");\n    }\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container container-center\",\n    children: \"Loading questions\\u2026\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 23\n  }, this);\n  if (!questions || questions.length === 0) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container container-center\",\n    children: \"No questions available. Please try later.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 12\n  }, this);\n  if (submitted) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container container-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card card-clean p-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-success\",\n          children: \"Test Completed Successfully\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: fullName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 14\n          }, this), \" (\", email, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Your Score: \", score, \" / \", questions.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), resultSaved && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"alert alert-success mt-2\",\n          children: \"\\u2705 Your result has been recorded successfully!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Review Answers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: questions.map((q, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: [\"Q\", idx + 1, \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 17\n            }, this), \" \", q.questionText, /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"Your answer:\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: answers[q._id] === q.correctAnswer ? \"text-success\" : \"text-danger\",\n                children: answers[q._id] || \"Not answered\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"Correct answer:\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-success\",\n                children: q.correctAnswer\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 17\n            }, this)]\n          }, q._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary me-2\",\n            onClick: () => navigate(\"/\"),\n            children: \"Back to Home\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-outline-secondary\",\n            onClick: () => window.location.reload(),\n            children: \"Retake Test\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this);\n  }\n  const currentQ = questions[currentIdx];\n  const selectedForCurrent = answers[currentQ._id];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container container-center\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card card-clean p-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex justify-content-between align-items-start\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"mb-0\",\n            children: [\"Candidate: \", fullName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n            className: \"text-muted\",\n            children: email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"badge bg-primary\",\n            children: [\"Question \", currentIdx + 1, \" / \", questions.length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-4\",\n        children: /*#__PURE__*/_jsxDEV(QuestionCard, {\n          question: currentQ,\n          selectedAnswer: selectedForCurrent,\n          onSelect: handleSelect\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-3 d-flex justify-content-between\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-secondary me-2\",\n            onClick: goPrev,\n            disabled: currentIdx === 0,\n            children: \"Previous\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-secondary\",\n            onClick: goNext,\n            disabled: currentIdx === questions.length - 1,\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-danger me-2\",\n            onClick: () => {\n              if (window.confirm(\"Are you sure you want to abandon this test?\")) navigate(\"/\");\n            },\n            children: \"Abandon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-success\",\n            onClick: handleSubmit,\n            children: \"Submit Test\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n}\n\n// import React, { useEffect, useState } from \"react\";\n// import { useLocation, useNavigate } from \"react-router-dom\";\n// import API from \"../services/api\";\n// import QuestionCard from \"../components/QuestionCard\";\n// import \"../styles/TestPage.css\";\n\n// function pickRandom(arr, n) {\n//   const copy = [...arr];\n//   const res = [];\n//   while (res.length < n && copy.length > 0) {\n//     const idx = Math.floor(Math.random() * copy.length);\n//     res.push(copy.splice(idx, 1)[0]);\n//   }\n//   return res;\n// }\n\n// export default function TestPage() {\n//   const location = useLocation();\n//   const navigate = useNavigate();\n//   const { fullName, email, numQ } = location.state || {};\n//   const [allQuestions, setAllQuestions] = useState([]);\n//   const [questions, setQuestions] = useState([]);\n//   const [answers, setAnswers] = useState({}); // { questionId: selectedOption }\n//   const [currentIdx, setCurrentIdx] = useState(0);\n//   const [loading, setLoading] = useState(true);\n//   const [submitted, setSubmitted] = useState(false);\n//   const [score, setScore] = useState(0);\n\n//   useEffect(() => {\n//     if (!fullName || !email) {\n//       // if page opened without details -> back to home\n//       navigate(\"/\");\n//       return;\n//     }\n\n//     const fetchQuestions = async () => {\n//       try {\n//         const res = await API.get(\"/questions\");\n//         setAllQuestions(res.data || []);\n//       } catch (err) {\n//         console.error(err);\n//         alert(\"Failed to fetch questions from server.\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchQuestions();\n//   }, [fullName, email, navigate]);\n\n//   useEffect(() => {\n//     if (!loading && allQuestions.length > 0) {\n//       const chunk = pickRandom(allQuestions, Math.min(numQ || 10, allQuestions.length));\n//       setQuestions(chunk);\n//     }\n//   }, [loading, allQuestions, numQ]);\n\n//   const handleSelect = (opt) => {\n//     const q = questions[currentIdx];\n//     setAnswers({ ...answers, [q._id]: opt });\n//   };\n\n//   const goNext = () => {\n//     if (currentIdx < questions.length - 1) setCurrentIdx(currentIdx + 1);\n//   };\n//   const goPrev = () => {\n//     if (currentIdx > 0) setCurrentIdx(currentIdx - 1);\n//   };\n\n//   const handleSubmit = () => {\n//     // ensure all answered\n//     if (Object.keys(answers).length < questions.length) {\n//       if (!window.confirm(\"Some questions are unanswered. Submit anyway?\")) return;\n//     }\n\n//     // compute score\n//     let s = 0;\n//     questions.forEach((q) => {\n//       if (answers[q._id] && answers[q._id] === q.correctAnswer) s += 1;\n//     });\n//     setScore(s);\n//     setSubmitted(true);\n//   };\n\n//   if (loading) return <div className=\"container container-center\">Loading questions…</div>;\n//   if (!questions || questions.length === 0) return <div className=\"container container-center\">No questions available. Please try later.</div>;\n\n//   if (submitted) {\n//     return (\n//       <div className=\"container container-center\">\n//         <div className=\"card card-clean p-4\">\n//           <h3>Test Completed</h3>\n//           <p><strong>{fullName}</strong> ({email})</p>\n//           <h4>Your score: {score} out of {questions.length}</h4>\n//           <hr />\n//           <h5>Review</h5>\n//           <div>\n//             {questions.map((q, idx) => (\n//               <div className=\"mb-3\" key={q._id}>\n//                 <b>Q{idx + 1}:</b> {q.questionText}\n//                 <div>Your answer: <span className={answers[q._id] === q.correctAnswer ? \"text-success\" : \"text-danger\"}>{answers[q._id] || \"Not answered\"}</span></div>\n//                 <div>Correct answer: <span className=\"text-success\">{q.correctAnswer}</span></div>\n//               </div>\n//             ))}\n//           </div>\n\n//           <div className=\"mt-3\">\n//             <button className=\"btn btn-primary me-2\" onClick={() => navigate(\"/\")}>Back to Home</button>\n//             <button className=\"btn btn-outline-secondary\" onClick={() => window.location.reload()}>Take New Test</button>\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n\n//   const currentQ = questions[currentIdx];\n//   const selectedForCurrent = answers[currentQ._id];\n\n//   return (\n//     <div className=\"container container-center\">\n//       <div className=\"card card-clean p-4\">\n//         <div className=\"d-flex justify-content-between align-items-start\">\n//           <div>\n//             <h5 className=\"mb-0\">Candidate: {fullName}</h5>\n//             <small className=\"text-muted\">{email}</small>\n//           </div>\n//           <div>\n//             <span className=\"badge bg-primary\">Question {currentIdx + 1} / {questions.length}</span>\n//           </div>\n//         </div>\n\n//         <div className=\"mt-4\">\n//           <QuestionCard question={currentQ} selectedAnswer={selectedForCurrent} onSelect={handleSelect} />\n//         </div>\n\n//         <div className=\"mt-3 d-flex justify-content-between\">\n//           <div>\n//             <button className=\"btn btn-secondary me-2\" onClick={goPrev} disabled={currentIdx === 0}>Previous</button>\n//             <button className=\"btn btn-secondary\" onClick={goNext} disabled={currentIdx === questions.length - 1}>Next</button>\n//           </div>\n\n//           <div>\n//             <button className=\"btn btn-danger me-2\" onClick={() => {\n//               if (window.confirm(\"Are you sure you want to abandon this test?\")) navigate(\"/\");\n//             }}>Abandon</button>\n\n//             <button className=\"btn btn-success\" onClick={handleSubmit}>Submit Test</button>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n_s(TestPage, \"ciYXyczRBTaciDa7JubBM8j2IBI=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = TestPage;\nvar _c;\n$RefreshReg$(_c, \"TestPage\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","useNavigate","API","QuestionCard","jsxDEV","_jsxDEV","pickRandom","arr","n","copy","res","length","idx","Math","floor","random","push","splice","TestPage","_s","location","navigate","fullName","email","numQ","state","allQuestions","setAllQuestions","questions","setQuestions","answers","setAnswers","currentIdx","setCurrentIdx","loading","setLoading","submitted","setSubmitted","score","setScore","resultSaved","setResultSaved","fetchQuestions","get","data","err","console","error","alert","selected","min","handleSelect","opt","q","_id","goNext","goPrev","handleSubmit","Object","keys","window","confirm","s","forEach","correctAnswer","formattedAnswers","map","question","questionText","userAnswer","isCorrect","post","name","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","reload","currentQ","selectedForCurrent","selectedAnswer","onSelect","disabled","_c","$RefreshReg$"],"sources":["C:/Users/HP/Downloads/INTERVIEW PROCESS/INTERVIEW PROCESS/client/src/pages/TestPage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport API from \"../services/api\";\r\nimport QuestionCard from \"../components/QuestionCard\";\r\nimport \"../styles/TestPage.css\";\r\n\r\nfunction pickRandom(arr, n) {\r\n  const copy = [...arr];\r\n  const res = [];\r\n  while (res.length < n && copy.length > 0) {\r\n    const idx = Math.floor(Math.random() * copy.length);\r\n    res.push(copy.splice(idx, 1)[0]);\r\n  }\r\n  return res;\r\n}\r\n\r\nexport default function TestPage() {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const { fullName, email, numQ } = location.state || {};\r\n  const [allQuestions, setAllQuestions] = useState([]);\r\n  const [questions, setQuestions] = useState([]);\r\n  const [answers, setAnswers] = useState({});\r\n  const [currentIdx, setCurrentIdx] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [resultSaved, setResultSaved] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!fullName || !email) {\r\n      navigate(\"/\");\r\n      return;\r\n    }\r\n\r\n    const fetchQuestions = async () => {\r\n      try {\r\n        const res = await API.get(\"/questions\");\r\n        setAllQuestions(res.data || []);\r\n      } catch (err) {\r\n        console.error(err);\r\n        alert(\"Failed to fetch questions from server.\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchQuestions();\r\n  }, [fullName, email, navigate]);\r\n\r\n  useEffect(() => {\r\n    if (!loading && allQuestions.length > 0) {\r\n      const selected = pickRandom(allQuestions, Math.min(numQ || 10, allQuestions.length));\r\n      setQuestions(selected);\r\n    }\r\n  }, [loading, allQuestions, numQ]);\r\n\r\n  const handleSelect = (opt) => {\r\n    const q = questions[currentIdx];\r\n    setAnswers({ ...answers, [q._id]: opt });\r\n  };\r\n\r\n  const goNext = () => {\r\n    if (currentIdx < questions.length - 1) setCurrentIdx(currentIdx + 1);\r\n  };\r\n  const goPrev = () => {\r\n    if (currentIdx > 0) setCurrentIdx(currentIdx - 1);\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (Object.keys(answers).length < questions.length) {\r\n      if (!window.confirm(\"Some questions are unanswered. Submit anyway?\")) return;\r\n    }\r\n\r\n    // calculate score\r\n    let s = 0;\r\n    questions.forEach((q) => {\r\n      if (answers[q._id] && answers[q._id] === q.correctAnswer) s += 1;\r\n    });\r\n    setScore(s);\r\n    setSubmitted(true);\r\n\r\n    // format answers for backend\r\n    const formattedAnswers = questions.map((q) => ({\r\n      question: q.questionText,\r\n      userAnswer: answers[q._id] || \"Not answered\",\r\n      correctAnswer: q.correctAnswer,\r\n      isCorrect: answers[q._id] === q.correctAnswer,\r\n    }));\r\n\r\n    try {\r\n      await API.post(\"/tests\", {\r\n        name: fullName,\r\n        email,\r\n        answers: formattedAnswers,\r\n      });\r\n      setResultSaved(true);\r\n    } catch (err) {\r\n      console.error(\"Error saving result:\", err);\r\n      alert(\"Failed to save result to server.\");\r\n    }\r\n  };\r\n\r\n  if (loading) return <div className=\"container container-center\">Loading questions…</div>;\r\n  if (!questions || questions.length === 0)\r\n    return <div className=\"container container-center\">No questions available. Please try later.</div>;\r\n\r\n  if (submitted) {\r\n    return (\r\n      <div className=\"container container-center\">\r\n        <div className=\"card card-clean p-4\">\r\n          <h3 className=\"text-success\">Test Completed Successfully</h3>\r\n          <p><strong>{fullName}</strong> ({email})</p>\r\n          <h4>Your Score: {score} / {questions.length}</h4>\r\n\r\n          {resultSaved && (\r\n            <div className=\"alert alert-success mt-2\">\r\n              ✅ Your result has been recorded successfully!\r\n            </div>\r\n          )}\r\n\r\n          <hr />\r\n          <h5>Review Answers</h5>\r\n          <div>\r\n            {questions.map((q, idx) => (\r\n              <div className=\"mb-3\" key={q._id}>\r\n                <b>Q{idx + 1}:</b> {q.questionText}\r\n                <div>\r\n                  Your answer:{\" \"}\r\n                  <span\r\n                    className={\r\n                      answers[q._id] === q.correctAnswer\r\n                        ? \"text-success\"\r\n                        : \"text-danger\"\r\n                    }\r\n                  >\r\n                    {answers[q._id] || \"Not answered\"}\r\n                  </span>\r\n                </div>\r\n                <div>\r\n                  Correct answer:{\" \"}\r\n                  <span className=\"text-success\">{q.correctAnswer}</span>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          <div className=\"mt-3\">\r\n            <button className=\"btn btn-primary me-2\" onClick={() => navigate(\"/\")}>\r\n              Back to Home\r\n            </button>\r\n            <button className=\"btn btn-outline-secondary\" onClick={() => window.location.reload()}>\r\n              Retake Test\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const currentQ = questions[currentIdx];\r\n  const selectedForCurrent = answers[currentQ._id];\r\n\r\n  return (\r\n    <div className=\"container container-center\">\r\n      <div className=\"card card-clean p-4\">\r\n        <div className=\"d-flex justify-content-between align-items-start\">\r\n          <div>\r\n            <h5 className=\"mb-0\">Candidate: {fullName}</h5>\r\n            <small className=\"text-muted\">{email}</small>\r\n          </div>\r\n          <div>\r\n            <span className=\"badge bg-primary\">\r\n              Question {currentIdx + 1} / {questions.length}\r\n            </span>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"mt-4\">\r\n          <QuestionCard\r\n            question={currentQ}\r\n            selectedAnswer={selectedForCurrent}\r\n            onSelect={handleSelect}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"mt-3 d-flex justify-content-between\">\r\n          <div>\r\n            <button\r\n              className=\"btn btn-secondary me-2\"\r\n              onClick={goPrev}\r\n              disabled={currentIdx === 0}\r\n            >\r\n              Previous\r\n            </button>\r\n            <button\r\n              className=\"btn btn-secondary\"\r\n              onClick={goNext}\r\n              disabled={currentIdx === questions.length - 1}\r\n            >\r\n              Next\r\n            </button>\r\n          </div>\r\n\r\n          <div>\r\n            <button\r\n              className=\"btn btn-danger me-2\"\r\n              onClick={() => {\r\n                if (window.confirm(\"Are you sure you want to abandon this test?\"))\r\n                  navigate(\"/\");\r\n              }}\r\n            >\r\n              Abandon\r\n            </button>\r\n\r\n            <button className=\"btn btn-success\" onClick={handleSubmit}>\r\n              Submit Test\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { useLocation, useNavigate } from \"react-router-dom\";\r\n// import API from \"../services/api\";\r\n// import QuestionCard from \"../components/QuestionCard\";\r\n// import \"../styles/TestPage.css\";\r\n\r\n// function pickRandom(arr, n) {\r\n//   const copy = [...arr];\r\n//   const res = [];\r\n//   while (res.length < n && copy.length > 0) {\r\n//     const idx = Math.floor(Math.random() * copy.length);\r\n//     res.push(copy.splice(idx, 1)[0]);\r\n//   }\r\n//   return res;\r\n// }\r\n\r\n// export default function TestPage() {\r\n//   const location = useLocation();\r\n//   const navigate = useNavigate();\r\n//   const { fullName, email, numQ } = location.state || {};\r\n//   const [allQuestions, setAllQuestions] = useState([]);\r\n//   const [questions, setQuestions] = useState([]);\r\n//   const [answers, setAnswers] = useState({}); // { questionId: selectedOption }\r\n//   const [currentIdx, setCurrentIdx] = useState(0);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [submitted, setSubmitted] = useState(false);\r\n//   const [score, setScore] = useState(0);\r\n\r\n//   useEffect(() => {\r\n//     if (!fullName || !email) {\r\n//       // if page opened without details -> back to home\r\n//       navigate(\"/\");\r\n//       return;\r\n//     }\r\n\r\n//     const fetchQuestions = async () => {\r\n//       try {\r\n//         const res = await API.get(\"/questions\");\r\n//         setAllQuestions(res.data || []);\r\n//       } catch (err) {\r\n//         console.error(err);\r\n//         alert(\"Failed to fetch questions from server.\");\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchQuestions();\r\n//   }, [fullName, email, navigate]);\r\n\r\n//   useEffect(() => {\r\n//     if (!loading && allQuestions.length > 0) {\r\n//       const chunk = pickRandom(allQuestions, Math.min(numQ || 10, allQuestions.length));\r\n//       setQuestions(chunk);\r\n//     }\r\n//   }, [loading, allQuestions, numQ]);\r\n\r\n//   const handleSelect = (opt) => {\r\n//     const q = questions[currentIdx];\r\n//     setAnswers({ ...answers, [q._id]: opt });\r\n//   };\r\n\r\n//   const goNext = () => {\r\n//     if (currentIdx < questions.length - 1) setCurrentIdx(currentIdx + 1);\r\n//   };\r\n//   const goPrev = () => {\r\n//     if (currentIdx > 0) setCurrentIdx(currentIdx - 1);\r\n//   };\r\n\r\n//   const handleSubmit = () => {\r\n//     // ensure all answered\r\n//     if (Object.keys(answers).length < questions.length) {\r\n//       if (!window.confirm(\"Some questions are unanswered. Submit anyway?\")) return;\r\n//     }\r\n\r\n//     // compute score\r\n//     let s = 0;\r\n//     questions.forEach((q) => {\r\n//       if (answers[q._id] && answers[q._id] === q.correctAnswer) s += 1;\r\n//     });\r\n//     setScore(s);\r\n//     setSubmitted(true);\r\n//   };\r\n\r\n//   if (loading) return <div className=\"container container-center\">Loading questions…</div>;\r\n//   if (!questions || questions.length === 0) return <div className=\"container container-center\">No questions available. Please try later.</div>;\r\n\r\n//   if (submitted) {\r\n//     return (\r\n//       <div className=\"container container-center\">\r\n//         <div className=\"card card-clean p-4\">\r\n//           <h3>Test Completed</h3>\r\n//           <p><strong>{fullName}</strong> ({email})</p>\r\n//           <h4>Your score: {score} out of {questions.length}</h4>\r\n//           <hr />\r\n//           <h5>Review</h5>\r\n//           <div>\r\n//             {questions.map((q, idx) => (\r\n//               <div className=\"mb-3\" key={q._id}>\r\n//                 <b>Q{idx + 1}:</b> {q.questionText}\r\n//                 <div>Your answer: <span className={answers[q._id] === q.correctAnswer ? \"text-success\" : \"text-danger\"}>{answers[q._id] || \"Not answered\"}</span></div>\r\n//                 <div>Correct answer: <span className=\"text-success\">{q.correctAnswer}</span></div>\r\n//               </div>\r\n//             ))}\r\n//           </div>\r\n\r\n//           <div className=\"mt-3\">\r\n//             <button className=\"btn btn-primary me-2\" onClick={() => navigate(\"/\")}>Back to Home</button>\r\n//             <button className=\"btn btn-outline-secondary\" onClick={() => window.location.reload()}>Take New Test</button>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   const currentQ = questions[currentIdx];\r\n//   const selectedForCurrent = answers[currentQ._id];\r\n\r\n//   return (\r\n//     <div className=\"container container-center\">\r\n//       <div className=\"card card-clean p-4\">\r\n//         <div className=\"d-flex justify-content-between align-items-start\">\r\n//           <div>\r\n//             <h5 className=\"mb-0\">Candidate: {fullName}</h5>\r\n//             <small className=\"text-muted\">{email}</small>\r\n//           </div>\r\n//           <div>\r\n//             <span className=\"badge bg-primary\">Question {currentIdx + 1} / {questions.length}</span>\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"mt-4\">\r\n//           <QuestionCard question={currentQ} selectedAnswer={selectedForCurrent} onSelect={handleSelect} />\r\n//         </div>\r\n\r\n//         <div className=\"mt-3 d-flex justify-content-between\">\r\n//           <div>\r\n//             <button className=\"btn btn-secondary me-2\" onClick={goPrev} disabled={currentIdx === 0}>Previous</button>\r\n//             <button className=\"btn btn-secondary\" onClick={goNext} disabled={currentIdx === questions.length - 1}>Next</button>\r\n//           </div>\r\n\r\n//           <div>\r\n//             <button className=\"btn btn-danger me-2\" onClick={() => {\r\n//               if (window.confirm(\"Are you sure you want to abandon this test?\")) navigate(\"/\");\r\n//             }}>Abandon</button>\r\n\r\n//             <button className=\"btn btn-success\" onClick={handleSubmit}>Submit Test</button>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n"],"mappings":"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AO,EAAEtB,YAAa;YAAAiB,QAAA,EAAC;UAE3D;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA3D,EAAA,CAzWwBD,QAAQ;EAAA,QACblB,WAAW,EACXC,WAAW;AAAA;AAAAqF,EAAA,GAFNpE,QAAQ;AAAA,IAAAoE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}