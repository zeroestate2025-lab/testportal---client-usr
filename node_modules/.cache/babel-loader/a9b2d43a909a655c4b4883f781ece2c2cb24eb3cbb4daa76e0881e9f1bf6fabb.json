{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Downloads\\\\INTERVIEW PROCESS\\\\INTERVIEW PROCESS\\\\client\\\\src\\\\pages\\\\Home.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport API from \"../services/api\";\nimport \"../styles/TestPage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TestPage() {\n  _s();\n  var _currentQ$options;\n  const location = useLocation();\n  const navigate = useNavigate();\n  const {\n    fullName,\n    email\n  } = location.state || {};\n  const [questions, setQuestions] = useState([]);\n  const [answers, setAnswers] = useState({});\n  const [currentIdx, setCurrentIdx] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [submitted, setSubmitted] = useState(false);\n  const [score, setScore] = useState(0);\n  const [resultSaved, setResultSaved] = useState(false);\n  const [testEnded, setTestEnded] = useState(false);\n  const [testNotStarted, setTestNotStarted] = useState(false);\n  const [timeLeft, setTimeLeft] = useState(null);\n\n  // 🟢 Fetch test control first, then load questions only if active\n  useEffect(() => {\n    if (!fullName || !email) {\n      navigate(\"/\");\n      return;\n    }\n    const initTest = async () => {\n      try {\n        // 1️⃣ Fetch control data\n        const controlRes = await API.testcontrol.get();\n        const control = controlRes.data;\n        if (!control || !control.isActive) {\n          setTestNotStarted(true);\n          setLoading(false);\n          return;\n        }\n\n        // 2️⃣ Set time limit (convert minutes → seconds)\n        setTimeLeft((control.timeLimit || 10) * 60);\n\n        // 3️⃣ Fetch questions from backend\n        const questionRes = await API.questions.getAll();\n        const allQuestions = questionRes.data || [];\n\n        // Limit number of questions\n        const limited = allQuestions.slice(0, control.questionLimit || allQuestions.length);\n        setQuestions(limited);\n      } catch (err) {\n        console.error(\"❌ Error initializing test:\", err);\n        setTestNotStarted(true);\n      } finally {\n        setLoading(false);\n      }\n    };\n    initTest();\n  }, [fullName, email, navigate]);\n\n  // 🕒 Timer\n  useEffect(() => {\n    if (timeLeft === null) return;\n    if (timeLeft <= 0) {\n      alert(\"⏰ Time’s up! Submitting your test automatically.\");\n      handleSubmit();\n      return;\n    }\n    const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n    return () => clearTimeout(timer);\n  }, [timeLeft]);\n\n  // 🛑 Detect tab switch or reload\n  useEffect(() => {\n    const handleBeforeUnload = e => {\n      e.preventDefault();\n      e.returnValue = \"\";\n      setTestEnded(true);\n    };\n    const handleVisibilityChange = () => {\n      if (document.hidden) {\n        setTestEnded(true);\n      }\n    };\n    window.addEventListener(\"beforeunload\", handleBeforeUnload);\n    document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n    return () => {\n      window.removeEventListener(\"beforeunload\", handleBeforeUnload);\n      document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n    };\n  }, []);\n  const handleSelect = (questionId, value) => {\n    setAnswers({\n      ...answers,\n      [questionId]: value\n    });\n  };\n  const goNext = () => {\n    if (currentIdx < questions.length - 1) setCurrentIdx(currentIdx + 1);\n  };\n  const goPrev = () => {\n    if (currentIdx > 0) setCurrentIdx(currentIdx - 1);\n  };\n  const handleSubmit = async () => {\n    if (submitted) return;\n    if (Object.keys(answers).length < questions.length) {\n      if (!window.confirm(\"Some questions are unanswered. Submit anyway?\")) return;\n    }\n    let s = 0;\n    questions.forEach(q => {\n      if (q.questionType === \"MCQ\" && answers[q._id] === q.correctAnswer) s += 1;\n    });\n    setScore(s);\n    setSubmitted(true);\n    const formattedAnswers = questions.map(q => ({\n      question: q.questionText,\n      userAnswer: answers[q._id] || \"Not answered\",\n      correctAnswer: q.correctAnswer || \"\",\n      isCorrect: q.questionType === \"MCQ\" ? answers[q._id] === q.correctAnswer : null,\n      type: q.questionType || \"Theory\"\n    }));\n    try {\n      await API.tests.submit({\n        name: fullName,\n        email,\n        answers: formattedAnswers,\n        totalQuestions: questions.length,\n        correctAnswers: s,\n        scorePercent: (s / questions.length * 100).toFixed(2)\n      });\n      setResultSaved(true);\n    } catch (err) {\n      console.error(\"Error saving result:\", err);\n      alert(\"Failed to save result to server.\");\n    }\n  };\n  if (testEnded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container container-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card card-clean p-4 text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-danger\",\n          children: \"\\u26A0\\uFE0F Test Ended\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"You switched tabs or reloaded. Session closed.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary mt-3\",\n          onClick: () => navigate(\"/\"),\n          children: \"Go Home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this);\n  }\n  if (testNotStarted) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container container-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card card-clean p-4 text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-warning\",\n          children: \"\\u26A0\\uFE0F Test Not Started\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"The test hasn\\u2019t been activated by the admin yet.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary mt-3\",\n          onClick: () => navigate(\"/\"),\n          children: \"Back Home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this);\n  }\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container container-center\",\n    children: \"Loading questions\\u2026\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 12\n  }, this);\n  if (!questions || questions.length === 0) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container container-center\",\n    children: \"No questions available.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 12\n  }, this);\n  if (submitted) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container container-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card card-clean p-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-success\",\n          children: \"\\u2705 Test Completed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: fullName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 13\n          }, this), \" (\", email, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Score: \", score, \" / \", questions.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this), resultSaved && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"alert alert-success mt-2\",\n          children: \"\\u2705 Your result has been saved!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Review Answers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this), questions.map((q, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"review-question\",\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: [\"Q\", idx + 1, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 15\n          }, this), \" \", q.questionText, /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Your answer:\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: q.questionType === \"MCQ\" ? answers[q._id] === q.correctAnswer ? \"text-success\" : \"text-danger\" : \"text-primary\",\n              children: answers[q._id] || \"Not answered\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 15\n          }, this), q.questionType === \"MCQ\" && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Correct: \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-success\",\n              children: q.correctAnswer\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 28\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 17\n          }, this)]\n        }, q._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary me-2\",\n            onClick: () => navigate(\"/\"),\n            children: \"Back Home\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-outline-secondary\",\n            onClick: () => window.location.reload(),\n            children: \"Retake\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this);\n  }\n  const currentQ = questions[currentIdx];\n  const selectedAnswer = answers[currentQ._id] || \"\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"test-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card test-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"text-danger fw-bold\",\n            children: [\"Candidate: \", fullName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n            className: \"text-muted\",\n            children: email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"badge bg-primary me-2\",\n            children: [\"Question \", currentIdx + 1, \"/\", questions.length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"badge bg-danger\",\n            children: [\"\\u23F3 \", Math.floor(timeLeft / 60), \":\", (timeLeft % 60).toString().padStart(2, \"0\")]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n          className: \"question-text\",\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: [\"Q\", currentIdx + 1, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 13\n          }, this), \" \", currentQ.questionText]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }, this), currentQ.questionType === \"MCQ\" && ((_currentQ$options = currentQ.options) === null || _currentQ$options === void 0 ? void 0 : _currentQ$options.length) > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"options-container\",\n          children: currentQ.options.map((opt, i) => /*#__PURE__*/_jsxDEV(\"label\", {\n            className: `option-item ${selectedAnswer === opt ? \"selected\" : \"\"}`,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: `question-${currentQ._id}`,\n              value: opt,\n              checked: selectedAnswer === opt,\n              onChange: e => handleSelect(currentQ._id, e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 19\n            }, this), opt]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"theory-input\",\n          placeholder: \"Type your answer...\",\n          value: selectedAnswer,\n          onChange: e => handleSelect(currentQ._id, e.target.value),\n          rows: 5\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test-footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-secondary me-3\",\n            onClick: goPrev,\n            disabled: currentIdx === 0,\n            children: \"Previous\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-secondary\",\n            onClick: goNext,\n            disabled: currentIdx === questions.length - 1,\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-success\",\n            onClick: handleSubmit,\n            children: \"Submit Test\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 245,\n    columnNumber: 5\n  }, this);\n}\n\n// import React, { useEffect, useState } from \"react\";\n// import { useLocation, useNavigate } from \"react-router-dom\";\n// import API from \"../services/api\";\n// import \"../styles/TestPage.css\";\n\n// export default function TestPage() {\n//   const location = useLocation();\n//   const navigate = useNavigate();\n//   const { fullName, email } = location.state || {};\n\n//   const [questions, setQuestions] = useState([]);\n//   const [answers, setAnswers] = useState({});\n//   const [currentIdx, setCurrentIdx] = useState(0);\n//   const [loading, setLoading] = useState(true);\n//   const [submitted, setSubmitted] = useState(false);\n//   const [score, setScore] = useState(0);\n//   const [resultSaved, setResultSaved] = useState(false);\n//   const [testEnded, setTestEnded] = useState(false);\n//   const [testNotStarted, setTestNotStarted] = useState(false);\n//   const [timeLeft, setTimeLeft] = useState(null);\n\n//   // 🟢 Fetch questions ONLY when admin starts test (fully backend controlled)\n//   useEffect(() => {\n//     if (!fullName || !email) {\n//       navigate(\"/\");\n//       return;\n//     }\n\n//     const fetchQuestions = async () => {\n//       try {\n//         const res = await API.questions.getAll();\n\n//         // 🛑 If admin hasn't started the test\n//         if (res.data?.error) {\n//           setTestNotStarted(true);\n//           setLoading(false);\n//           return;\n//         }\n\n//         // ✅ Admin-defined number of questions & time limit\n//         setQuestions(res.data.questions || []);\n//         setTimeLeft((res.data.timeLimit || 10) * 60); // Convert minutes → seconds\n//       } catch (err) {\n//         console.error(\"❌ Error fetching questions:\", err);\n//         alert(\"Please wait for admin to start the test.\");\n//         setTestNotStarted(true);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchQuestions();\n//   }, [fullName, email, navigate]);\n\n//   // 🕒 Countdown timer based on admin-defined time\n//   useEffect(() => {\n//     if (timeLeft === null) return;\n//     if (timeLeft <= 0) {\n//       alert(\"⏰ Time’s up! Submitting your test automatically.\");\n//       handleSubmit();\n//       return;\n//     }\n\n//     const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n//     return () => clearTimeout(timer);\n//   }, [timeLeft]);\n\n//   // 🛑 Detect tab switch, reload, or page exit → terminate test\n//   useEffect(() => {\n//     const handleBeforeUnload = (e) => {\n//       e.preventDefault();\n//       e.returnValue = \"\";\n//       setTestEnded(true);\n//     };\n\n//     const handleVisibilityChange = () => {\n//       if (document.hidden) {\n//         setTestEnded(true);\n//       }\n//     };\n\n//     window.addEventListener(\"beforeunload\", handleBeforeUnload);\n//     document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n\n//     return () => {\n//       window.removeEventListener(\"beforeunload\", handleBeforeUnload);\n//       document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n//     };\n//   }, []);\n\n//   // 🟢 Record answer\n//   const handleSelect = (questionId, value) => {\n//     setAnswers({ ...answers, [questionId]: value });\n//   };\n\n//   // 🟢 Navigation\n//   const goNext = () => {\n//     if (currentIdx < questions.length - 1) setCurrentIdx(currentIdx + 1);\n//   };\n//   const goPrev = () => {\n//     if (currentIdx > 0) setCurrentIdx(currentIdx - 1);\n//   };\n\n//   // 🟢 Submit test (auto or manual)\n//   const handleSubmit = async () => {\n//     if (submitted) return;\n//     if (Object.keys(answers).length < questions.length) {\n//       if (!window.confirm(\"Some questions are unanswered. Submit anyway?\")) return;\n//     }\n\n//     let s = 0;\n//     questions.forEach((q) => {\n//       if (q.questionType === \"MCQ\" && answers[q._id] === q.correctAnswer) s += 1;\n//     });\n\n//     setScore(s);\n//     setSubmitted(true);\n\n//     const formattedAnswers = questions.map((q) => ({\n//       question: q.questionText,\n//       userAnswer: answers[q._id] || \"Not answered\",\n//       correctAnswer: q.correctAnswer || \"\",\n//       isCorrect: q.questionType === \"MCQ\" ? answers[q._id] === q.correctAnswer : null,\n//       type: q.questionType || \"Theory\",\n//     }));\n\n//     try {\n//       await API.tests.submit({\n//         name: fullName,\n//         email,\n//         answers: formattedAnswers,\n//         totalQuestions: questions.length,\n//         correctAnswers: s,\n//         scorePercent: ((s / questions.length) * 100).toFixed(2),\n//       });\n//       setResultSaved(true);\n//     } catch (err) {\n//       console.error(\"❌ Error saving result:\", err);\n//       alert(\"Failed to save result to server.\");\n//     }\n//   };\n\n//   // 🛑 If user switched tab or reloaded\n//   if (testEnded) {\n//     return (\n//       <div className=\"container container-center\">\n//         <div className=\"card card-clean p-4 text-center\">\n//           <h3 className=\"text-danger\">⚠️ Test Ended</h3>\n//           <p>Your session ended because you switched tabs, reloaded, or left the page.</p>\n//           <h4 className=\"mt-3 text-success\">Thank you for your time!</h4>\n//           <button className=\"btn btn-primary mt-3\" onClick={() => navigate(\"/\")}>\n//             Go to Home\n//           </button>\n//         </div>\n//       </div>\n//     );\n//   }\n\n//   // 🛑 If test not started by admin\n//   if (testNotStarted) {\n//     return (\n//       <div className=\"container container-center\">\n//         <div className=\"card card-clean p-4 text-center\">\n//           <h3 className=\"text-warning\">⚠️ Test Not Active</h3>\n//           <p>The test has not been started by the administrator.</p>\n//           <h5 className=\"mt-2\">Please contact admin to start your test.</h5>\n//           <button className=\"btn btn-primary mt-3\" onClick={() => navigate(\"/\")}>\n//             Back to Home\n//           </button>\n//         </div>\n//       </div>\n//     );\n//   }\n\n//   // 🟢 Loading screen\n//   if (loading)\n//     return <div className=\"container container-center\">Loading questions…</div>;\n\n//   if (!questions || questions.length === 0)\n//     return (\n//       <div className=\"container container-center\">\n//         No questions available. Please try later.\n//       </div>\n//     );\n\n//   // 🟢 After submission — review screen\n//   if (submitted) {\n//     return (\n//       <div className=\"container container-center\">\n//         <div className=\"card card-clean p-4\">\n//           <h3 className=\"text-success\">Test Completed Successfully</h3>\n//           <p>\n//             <strong>{fullName}</strong> ({email})\n//           </p>\n//           <h4>\n//             Your Score: {score} / {questions.length}\n//           </h4>\n\n//           {resultSaved && (\n//             <div className=\"alert alert-success mt-2\">\n//               ✅ Your result has been recorded successfully!\n//             </div>\n//           )}\n\n//           <hr />\n//           <h5>Review Answers</h5>\n//           <div>\n//             {questions.map((q, idx) => (\n//               <div className=\"review-question\" key={q._id}>\n//                 <b>Q{idx + 1}:</b> {q.questionText}\n//                 <div>\n//                   Your answer:{\" \"}\n//                   <span\n//                     className={\n//                       q.questionType === \"MCQ\"\n//                         ? answers[q._id] === q.correctAnswer\n//                           ? \"text-success\"\n//                           : \"text-danger\"\n//                         : \"text-primary\"\n//                     }\n//                   >\n//                     {answers[q._id] || \"Not answered\"}\n//                   </span>\n//                 </div>\n//                 {q.questionType === \"MCQ\" && (\n//                   <div>\n//                     Correct answer:{\" \"}\n//                     <span className=\"text-success\">{q.correctAnswer}</span>\n//                   </div>\n//                 )}\n//               </div>\n//             ))}\n//           </div>\n\n//           <div className=\"mt-4\">\n//             <button className=\"btn btn-primary me-2\" onClick={() => navigate(\"/\")}>\n//               Back to Home\n//             </button>\n//             <button\n//               className=\"btn btn-outline-secondary\"\n//               onClick={() => window.location.reload()}\n//             >\n//               Retake Test\n//             </button>\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n\n//   // 🟢 Active test page\n//   const currentQ = questions[currentIdx];\n//   const selectedAnswer = answers[currentQ._id] || \"\";\n\n//   return (\n//     <div className=\"test-container\">\n//       <div className=\"card test-card\">\n//         {/* Header */}\n//         <div className=\"test-header\">\n//           <div>\n//             <h5 className=\"text-danger fw-bold\">Candidate: {fullName}</h5>\n//             <small className=\"text-muted\">{email}</small>\n//           </div>\n//           <div>\n//             <span className=\"badge bg-primary me-2\">\n//               Question {currentIdx + 1} / {questions.length}\n//             </span>\n//             <span className=\"badge bg-danger\">\n//               ⏳ {Math.floor(timeLeft / 60)}:\n//               {(timeLeft % 60).toString().padStart(2, \"0\")}\n//             </span>\n//           </div>\n//         </div>\n\n//         {/* Question Body */}\n//         <div className=\"test-body\">\n//           <h6 className=\"question-text\">\n//             <b>Q{currentIdx + 1}:</b> {currentQ.questionText}\n//           </h6>\n\n//           {currentQ.questionType === \"MCQ\" && currentQ.options?.length > 0 ? (\n//             <div className=\"options-container\">\n//               {currentQ.options.map((opt, i) => (\n//                 <label\n//                   key={i}\n//                   className={`option-item ${\n//                     selectedAnswer === opt ? \"selected\" : \"\"\n//                   }`}\n//                 >\n//                   <input\n//                     type=\"radio\"\n//                     name={`question-${currentQ._id}`}\n//                     value={opt}\n//                     checked={selectedAnswer === opt}\n//                     onChange={(e) => handleSelect(currentQ._id, e.target.value)}\n//                   />\n//                   {opt}\n//                 </label>\n//               ))}\n//             </div>\n//           ) : (\n//             <textarea\n//               className=\"theory-input\"\n//               placeholder=\"Type your answer here...\"\n//               value={selectedAnswer}\n//               onChange={(e) => handleSelect(currentQ._id, e.target.value)}\n//               rows={5}\n//             ></textarea>\n//           )}\n//         </div>\n\n//         {/* Footer */}\n//         <div className=\"test-footer\">\n//           <div>\n//             <button\n//               className=\"btn btn-secondary me-3\"\n//               onClick={goPrev}\n//               disabled={currentIdx === 0}\n//             >\n//               Previous\n//             </button>\n//             <button\n//               className=\"btn btn-secondary\"\n//               onClick={goNext}\n//               disabled={currentIdx === questions.length - 1}\n//             >\n//               Next\n//             </button>\n//           </div>\n\n//           <div>\n//             <button className=\"btn btn-success\" onClick={handleSubmit}>\n//               Submit Test\n//             </button>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// // import React, { useState } from \"react\";\n// // import { useNavigate } from \"react-router-dom\";\n// // import \"../styles/Home.css\";\n\n// // export default function Home() {\n// //   const [fullName, setFullName] = useState(\"\");\n// //   const [email, setEmail] = useState(\"\");\n// //   const [numQ, setNumQ] = useState(10);\n// //   const navigate = useNavigate();\n\n// //   const handleStart = () => {\n// //     if (!fullName.trim() || !email.trim()) {\n// //       return alert(\"Please enter your full name and email.\");\n// //     }\n// //     // Navigate to test page with state (we pass via router state)\n// //     navigate(\"/test\", { state: { fullName, email, numQ } });\n// //   };\n\n// //   return (\n// //     <div className=\"container container-center\">\n// //       <div className=\"header-banner mb-4\">\n// //         <h1 className=\"display-6\">VLSI Interview Assessment</h1>\n// //         <p className=\"lead\">Test your knowledge of Very Large Scale Integration (VLSI) concepts</p>\n// //       </div>\n\n// //       <div className=\"card card-clean p-4 mb-4\">\n// //         <h5>Start Your Interview Test</h5>\n// //         <p className=\"text-muted\">You will be presented with randomly selected questions. Please answer to the best of your ability.</p>\n\n// //         <div className=\"row g-3\">\n// //           <div className=\"col-md-6\">\n// //             <label className=\"form-label\">Full Name *</label>\n// //             <input className=\"form-control\" placeholder=\"Enter your full name\" value={fullName} onChange={(e) => setFullName(e.target.value)} />\n// //           </div>\n\n// //           <div className=\"col-md-6\">\n// //             <label className=\"form-label\">Email Address *</label>\n// //             <input className=\"form-control\" placeholder=\"Enter your email\" value={email} onChange={(e) => setEmail(e.target.value)} />\n// //           </div>\n\n// //           <div className=\"col-md-6\">\n// //             <label className=\"form-label\">Number of Questions</label>\n// //             <select className=\"form-select\" value={numQ} onChange={(e) => setNumQ(Number(e.target.value))}>\n// //               <option value={5}>5 Questions</option>\n// //               <option value={10}>10 Questions</option>\n// //             </select>\n// //           </div>\n\n// //           <div className=\"col-12 mt-3\">\n// //             <button className=\"btn btn-primary btn-lg w-100\" onClick={handleStart}>Start Test</button>\n// //           </div>\n// //         </div>\n// //       </div>\n\n// //       <div className=\"card card-clean p-3\">\n// //         <h6>Instructions</h6>\n// //         <ul>\n// //           <li>Read each question carefully before answering.</li>\n// //           <li>Use Next and Previous to navigate.</li>\n// //           <li>Submit once all questions are answered.</li>\n// //         </ul>\n// //       </div>\n// //     </div>\n// //   );\n// // }\n_s(TestPage, \"Ylksd7z7Z9qiSMWGUMCXltKXFm4=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = TestPage;\nvar _c;\n$RefreshReg$(_c, \"TestPage\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","useNavigate","API","jsxDEV","_jsxDEV","TestPage","_s","_currentQ$options","location","navigate","fullName","email","state","questions","setQuestions","answers","setAnswers","currentIdx","setCurrentIdx","loading","setLoading","submitted","setSubmitted","score","setScore","resultSaved","setResultSaved","testEnded","setTestEnded","testNotStarted","setTestNotStarted","timeLeft","setTimeLeft","initTest","controlRes","testcontrol","get","control","data","isActive","timeLimit","questionRes","getAll","allQuestions","limited","slice","questionLimit","length","err","console","error","alert","handleSubmit","timer","setTimeout","clearTimeout","handleBeforeUnload","e","preventDefault","returnValue","handleVisibilityChange","document","hidden","window","addEventListener","removeEventListener","handleSelect","questionId","value","goNext","goPrev","Object","keys","confirm","s","forEach","q","questionType","_id","correctAnswer","formattedAnswers","map","question","questionText","userAnswer","isCorrect","type","tests","submit","name","totalQuestions","correctAnswers","scorePercent","toFixed","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","idx","reload","currentQ","selectedAnswer","Math","floor","toString","padStart","options","opt","i","checked","onChange","target","placeholder","rows","disabled","_c","$RefreshReg$"],"sources":["C:/Users/HP/Downloads/INTERVIEW PROCESS/INTERVIEW PROCESS/client/src/pages/Home.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport API from \"../services/api\";\r\nimport \"../styles/TestPage.css\";\r\n\r\nexport default function TestPage() {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const { fullName, email } = location.state || {};\r\n\r\n  const [questions, setQuestions] = useState([]);\r\n  const [answers, setAnswers] = useState({});\r\n  const [currentIdx, setCurrentIdx] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [resultSaved, setResultSaved] = useState(false);\r\n  const [testEnded, setTestEnded] = useState(false);\r\n  const [testNotStarted, setTestNotStarted] = useState(false);\r\n  const [timeLeft, setTimeLeft] = useState(null);\r\n\r\n  // 🟢 Fetch test control first, then load questions only if active\r\n  useEffect(() => {\r\n    if (!fullName || !email) {\r\n      navigate(\"/\");\r\n      return;\r\n    }\r\n\r\n    const initTest = async () => {\r\n      try {\r\n        // 1️⃣ Fetch control data\r\n        const controlRes = await API.testcontrol.get();\r\n        const control = controlRes.data;\r\n\r\n        if (!control || !control.isActive) {\r\n          setTestNotStarted(true);\r\n          setLoading(false);\r\n          return;\r\n        }\r\n\r\n        // 2️⃣ Set time limit (convert minutes → seconds)\r\n        setTimeLeft((control.timeLimit || 10) * 60);\r\n\r\n        // 3️⃣ Fetch questions from backend\r\n        const questionRes = await API.questions.getAll();\r\n        const allQuestions = questionRes.data || [];\r\n\r\n        // Limit number of questions\r\n        const limited = allQuestions.slice(0, control.questionLimit || allQuestions.length);\r\n        setQuestions(limited);\r\n      } catch (err) {\r\n        console.error(\"❌ Error initializing test:\", err);\r\n        setTestNotStarted(true);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    initTest();\r\n  }, [fullName, email, navigate]);\r\n\r\n  // 🕒 Timer\r\n  useEffect(() => {\r\n    if (timeLeft === null) return;\r\n    if (timeLeft <= 0) {\r\n      alert(\"⏰ Time’s up! Submitting your test automatically.\");\r\n      handleSubmit();\r\n      return;\r\n    }\r\n    const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r\n    return () => clearTimeout(timer);\r\n  }, [timeLeft]);\r\n\r\n  // 🛑 Detect tab switch or reload\r\n  useEffect(() => {\r\n    const handleBeforeUnload = (e) => {\r\n      e.preventDefault();\r\n      e.returnValue = \"\";\r\n      setTestEnded(true);\r\n    };\r\n\r\n    const handleVisibilityChange = () => {\r\n      if (document.hidden) {\r\n        setTestEnded(true);\r\n      }\r\n    };\r\n\r\n    window.addEventListener(\"beforeunload\", handleBeforeUnload);\r\n    document.addEventListener(\"visibilitychange\", handleVisibilityChange);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"beforeunload\", handleBeforeUnload);\r\n      document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\r\n    };\r\n  }, []);\r\n\r\n  const handleSelect = (questionId, value) => {\r\n    setAnswers({ ...answers, [questionId]: value });\r\n  };\r\n\r\n  const goNext = () => {\r\n    if (currentIdx < questions.length - 1) setCurrentIdx(currentIdx + 1);\r\n  };\r\n  const goPrev = () => {\r\n    if (currentIdx > 0) setCurrentIdx(currentIdx - 1);\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (submitted) return;\r\n\r\n    if (Object.keys(answers).length < questions.length) {\r\n      if (!window.confirm(\"Some questions are unanswered. Submit anyway?\")) return;\r\n    }\r\n\r\n    let s = 0;\r\n    questions.forEach((q) => {\r\n      if (q.questionType === \"MCQ\" && answers[q._id] === q.correctAnswer) s += 1;\r\n    });\r\n    setScore(s);\r\n    setSubmitted(true);\r\n\r\n    const formattedAnswers = questions.map((q) => ({\r\n      question: q.questionText,\r\n      userAnswer: answers[q._id] || \"Not answered\",\r\n      correctAnswer: q.correctAnswer || \"\",\r\n      isCorrect: q.questionType === \"MCQ\" ? answers[q._id] === q.correctAnswer : null,\r\n      type: q.questionType || \"Theory\",\r\n    }));\r\n\r\n    try {\r\n      await API.tests.submit({\r\n        name: fullName,\r\n        email,\r\n        answers: formattedAnswers,\r\n        totalQuestions: questions.length,\r\n        correctAnswers: s,\r\n        scorePercent: ((s / questions.length) * 100).toFixed(2),\r\n      });\r\n      setResultSaved(true);\r\n    } catch (err) {\r\n      console.error(\"Error saving result:\", err);\r\n      alert(\"Failed to save result to server.\");\r\n    }\r\n  };\r\n\r\n  if (testEnded) {\r\n    return (\r\n      <div className=\"container container-center\">\r\n        <div className=\"card card-clean p-4 text-center\">\r\n          <h3 className=\"text-danger\">⚠️ Test Ended</h3>\r\n          <p>You switched tabs or reloaded. Session closed.</p>\r\n          <button className=\"btn btn-primary mt-3\" onClick={() => navigate(\"/\")}>\r\n            Go Home\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (testNotStarted) {\r\n    return (\r\n      <div className=\"container container-center\">\r\n        <div className=\"card card-clean p-4 text-center\">\r\n          <h3 className=\"text-warning\">⚠️ Test Not Started</h3>\r\n          <p>The test hasn’t been activated by the admin yet.</p>\r\n          <button className=\"btn btn-primary mt-3\" onClick={() => navigate(\"/\")}>\r\n            Back Home\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (loading)\r\n    return <div className=\"container container-center\">Loading questions…</div>;\r\n\r\n  if (!questions || questions.length === 0)\r\n    return <div className=\"container container-center\">No questions available.</div>;\r\n\r\n  if (submitted) {\r\n    return (\r\n      <div className=\"container container-center\">\r\n        <div className=\"card card-clean p-4\">\r\n          <h3 className=\"text-success\">✅ Test Completed</h3>\r\n          <p>\r\n            <strong>{fullName}</strong> ({email})\r\n          </p>\r\n          <h4>\r\n            Score: {score} / {questions.length}\r\n          </h4>\r\n\r\n          {resultSaved && (\r\n            <div className=\"alert alert-success mt-2\">\r\n              ✅ Your result has been saved!\r\n            </div>\r\n          )}\r\n\r\n          <hr />\r\n          <h5>Review Answers</h5>\r\n          {questions.map((q, idx) => (\r\n            <div className=\"review-question\" key={q._id}>\r\n              <b>Q{idx + 1}:</b> {q.questionText}\r\n              <div>\r\n                Your answer:{\" \"}\r\n                <span\r\n                  className={\r\n                    q.questionType === \"MCQ\"\r\n                      ? answers[q._id] === q.correctAnswer\r\n                        ? \"text-success\"\r\n                        : \"text-danger\"\r\n                      : \"text-primary\"\r\n                  }\r\n                >\r\n                  {answers[q._id] || \"Not answered\"}\r\n                </span>\r\n              </div>\r\n              {q.questionType === \"MCQ\" && (\r\n                <div>\r\n                  Correct: <span className=\"text-success\">{q.correctAnswer}</span>\r\n                </div>\r\n              )}\r\n            </div>\r\n          ))}\r\n\r\n          <div className=\"mt-4\">\r\n            <button className=\"btn btn-primary me-2\" onClick={() => navigate(\"/\")}>\r\n              Back Home\r\n            </button>\r\n            <button\r\n              className=\"btn btn-outline-secondary\"\r\n              onClick={() => window.location.reload()}\r\n            >\r\n              Retake\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const currentQ = questions[currentIdx];\r\n  const selectedAnswer = answers[currentQ._id] || \"\";\r\n\r\n  return (\r\n    <div className=\"test-container\">\r\n      <div className=\"card test-card\">\r\n        <div className=\"test-header\">\r\n          <div>\r\n            <h5 className=\"text-danger fw-bold\">Candidate: {fullName}</h5>\r\n            <small className=\"text-muted\">{email}</small>\r\n          </div>\r\n          <div>\r\n            <span className=\"badge bg-primary me-2\">\r\n              Question {currentIdx + 1}/{questions.length}\r\n            </span>\r\n            <span className=\"badge bg-danger\">\r\n              ⏳ {Math.floor(timeLeft / 60)}:\r\n              {(timeLeft % 60).toString().padStart(2, \"0\")}\r\n            </span>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"test-body\">\r\n          <h6 className=\"question-text\">\r\n            <b>Q{currentIdx + 1}:</b> {currentQ.questionText}\r\n          </h6>\r\n\r\n          {currentQ.questionType === \"MCQ\" && currentQ.options?.length > 0 ? (\r\n            <div className=\"options-container\">\r\n              {currentQ.options.map((opt, i) => (\r\n                <label\r\n                  key={i}\r\n                  className={`option-item ${selectedAnswer === opt ? \"selected\" : \"\"}`}\r\n                >\r\n                  <input\r\n                    type=\"radio\"\r\n                    name={`question-${currentQ._id}`}\r\n                    value={opt}\r\n                    checked={selectedAnswer === opt}\r\n                    onChange={(e) => handleSelect(currentQ._id, e.target.value)}\r\n                  />\r\n                  {opt}\r\n                </label>\r\n              ))}\r\n            </div>\r\n          ) : (\r\n            <textarea\r\n              className=\"theory-input\"\r\n              placeholder=\"Type your answer...\"\r\n              value={selectedAnswer}\r\n              onChange={(e) => handleSelect(currentQ._id, e.target.value)}\r\n              rows={5}\r\n            ></textarea>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"test-footer\">\r\n          <div>\r\n            <button\r\n              className=\"btn btn-secondary me-3\"\r\n              onClick={goPrev}\r\n              disabled={currentIdx === 0}\r\n            >\r\n              Previous\r\n            </button>\r\n            <button\r\n              className=\"btn btn-secondary\"\r\n              onClick={goNext}\r\n              disabled={currentIdx === questions.length - 1}\r\n            >\r\n              Next\r\n            </button>\r\n          </div>\r\n\r\n          <div>\r\n            <button className=\"btn btn-success\" onClick={handleSubmit}>\r\n              Submit Test\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { useLocation, useNavigate } from \"react-router-dom\";\r\n// import API from \"../services/api\";\r\n// import \"../styles/TestPage.css\";\r\n\r\n// export default function TestPage() {\r\n//   const location = useLocation();\r\n//   const navigate = useNavigate();\r\n//   const { fullName, email } = location.state || {};\r\n\r\n//   const [questions, setQuestions] = useState([]);\r\n//   const [answers, setAnswers] = useState({});\r\n//   const [currentIdx, setCurrentIdx] = useState(0);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [submitted, setSubmitted] = useState(false);\r\n//   const [score, setScore] = useState(0);\r\n//   const [resultSaved, setResultSaved] = useState(false);\r\n//   const [testEnded, setTestEnded] = useState(false);\r\n//   const [testNotStarted, setTestNotStarted] = useState(false);\r\n//   const [timeLeft, setTimeLeft] = useState(null);\r\n\r\n//   // 🟢 Fetch questions ONLY when admin starts test (fully backend controlled)\r\n//   useEffect(() => {\r\n//     if (!fullName || !email) {\r\n//       navigate(\"/\");\r\n//       return;\r\n//     }\r\n\r\n//     const fetchQuestions = async () => {\r\n//       try {\r\n//         const res = await API.questions.getAll();\r\n\r\n//         // 🛑 If admin hasn't started the test\r\n//         if (res.data?.error) {\r\n//           setTestNotStarted(true);\r\n//           setLoading(false);\r\n//           return;\r\n//         }\r\n\r\n//         // ✅ Admin-defined number of questions & time limit\r\n//         setQuestions(res.data.questions || []);\r\n//         setTimeLeft((res.data.timeLimit || 10) * 60); // Convert minutes → seconds\r\n//       } catch (err) {\r\n//         console.error(\"❌ Error fetching questions:\", err);\r\n//         alert(\"Please wait for admin to start the test.\");\r\n//         setTestNotStarted(true);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchQuestions();\r\n//   }, [fullName, email, navigate]);\r\n\r\n//   // 🕒 Countdown timer based on admin-defined time\r\n//   useEffect(() => {\r\n//     if (timeLeft === null) return;\r\n//     if (timeLeft <= 0) {\r\n//       alert(\"⏰ Time’s up! Submitting your test automatically.\");\r\n//       handleSubmit();\r\n//       return;\r\n//     }\r\n\r\n//     const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r\n//     return () => clearTimeout(timer);\r\n//   }, [timeLeft]);\r\n\r\n//   // 🛑 Detect tab switch, reload, or page exit → terminate test\r\n//   useEffect(() => {\r\n//     const handleBeforeUnload = (e) => {\r\n//       e.preventDefault();\r\n//       e.returnValue = \"\";\r\n//       setTestEnded(true);\r\n//     };\r\n\r\n//     const handleVisibilityChange = () => {\r\n//       if (document.hidden) {\r\n//         setTestEnded(true);\r\n//       }\r\n//     };\r\n\r\n//     window.addEventListener(\"beforeunload\", handleBeforeUnload);\r\n//     document.addEventListener(\"visibilitychange\", handleVisibilityChange);\r\n\r\n//     return () => {\r\n//       window.removeEventListener(\"beforeunload\", handleBeforeUnload);\r\n//       document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\r\n//     };\r\n//   }, []);\r\n\r\n//   // 🟢 Record answer\r\n//   const handleSelect = (questionId, value) => {\r\n//     setAnswers({ ...answers, [questionId]: value });\r\n//   };\r\n\r\n//   // 🟢 Navigation\r\n//   const goNext = () => {\r\n//     if (currentIdx < questions.length - 1) setCurrentIdx(currentIdx + 1);\r\n//   };\r\n//   const goPrev = () => {\r\n//     if (currentIdx > 0) setCurrentIdx(currentIdx - 1);\r\n//   };\r\n\r\n//   // 🟢 Submit test (auto or manual)\r\n//   const handleSubmit = async () => {\r\n//     if (submitted) return;\r\n//     if (Object.keys(answers).length < questions.length) {\r\n//       if (!window.confirm(\"Some questions are unanswered. Submit anyway?\")) return;\r\n//     }\r\n\r\n//     let s = 0;\r\n//     questions.forEach((q) => {\r\n//       if (q.questionType === \"MCQ\" && answers[q._id] === q.correctAnswer) s += 1;\r\n//     });\r\n\r\n//     setScore(s);\r\n//     setSubmitted(true);\r\n\r\n//     const formattedAnswers = questions.map((q) => ({\r\n//       question: q.questionText,\r\n//       userAnswer: answers[q._id] || \"Not answered\",\r\n//       correctAnswer: q.correctAnswer || \"\",\r\n//       isCorrect: q.questionType === \"MCQ\" ? answers[q._id] === q.correctAnswer : null,\r\n//       type: q.questionType || \"Theory\",\r\n//     }));\r\n\r\n//     try {\r\n//       await API.tests.submit({\r\n//         name: fullName,\r\n//         email,\r\n//         answers: formattedAnswers,\r\n//         totalQuestions: questions.length,\r\n//         correctAnswers: s,\r\n//         scorePercent: ((s / questions.length) * 100).toFixed(2),\r\n//       });\r\n//       setResultSaved(true);\r\n//     } catch (err) {\r\n//       console.error(\"❌ Error saving result:\", err);\r\n//       alert(\"Failed to save result to server.\");\r\n//     }\r\n//   };\r\n\r\n//   // 🛑 If user switched tab or reloaded\r\n//   if (testEnded) {\r\n//     return (\r\n//       <div className=\"container container-center\">\r\n//         <div className=\"card card-clean p-4 text-center\">\r\n//           <h3 className=\"text-danger\">⚠️ Test Ended</h3>\r\n//           <p>Your session ended because you switched tabs, reloaded, or left the page.</p>\r\n//           <h4 className=\"mt-3 text-success\">Thank you for your time!</h4>\r\n//           <button className=\"btn btn-primary mt-3\" onClick={() => navigate(\"/\")}>\r\n//             Go to Home\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   // 🛑 If test not started by admin\r\n//   if (testNotStarted) {\r\n//     return (\r\n//       <div className=\"container container-center\">\r\n//         <div className=\"card card-clean p-4 text-center\">\r\n//           <h3 className=\"text-warning\">⚠️ Test Not Active</h3>\r\n//           <p>The test has not been started by the administrator.</p>\r\n//           <h5 className=\"mt-2\">Please contact admin to start your test.</h5>\r\n//           <button className=\"btn btn-primary mt-3\" onClick={() => navigate(\"/\")}>\r\n//             Back to Home\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   // 🟢 Loading screen\r\n//   if (loading)\r\n//     return <div className=\"container container-center\">Loading questions…</div>;\r\n\r\n//   if (!questions || questions.length === 0)\r\n//     return (\r\n//       <div className=\"container container-center\">\r\n//         No questions available. Please try later.\r\n//       </div>\r\n//     );\r\n\r\n//   // 🟢 After submission — review screen\r\n//   if (submitted) {\r\n//     return (\r\n//       <div className=\"container container-center\">\r\n//         <div className=\"card card-clean p-4\">\r\n//           <h3 className=\"text-success\">Test Completed Successfully</h3>\r\n//           <p>\r\n//             <strong>{fullName}</strong> ({email})\r\n//           </p>\r\n//           <h4>\r\n//             Your Score: {score} / {questions.length}\r\n//           </h4>\r\n\r\n//           {resultSaved && (\r\n//             <div className=\"alert alert-success mt-2\">\r\n//               ✅ Your result has been recorded successfully!\r\n//             </div>\r\n//           )}\r\n\r\n//           <hr />\r\n//           <h5>Review Answers</h5>\r\n//           <div>\r\n//             {questions.map((q, idx) => (\r\n//               <div className=\"review-question\" key={q._id}>\r\n//                 <b>Q{idx + 1}:</b> {q.questionText}\r\n//                 <div>\r\n//                   Your answer:{\" \"}\r\n//                   <span\r\n//                     className={\r\n//                       q.questionType === \"MCQ\"\r\n//                         ? answers[q._id] === q.correctAnswer\r\n//                           ? \"text-success\"\r\n//                           : \"text-danger\"\r\n//                         : \"text-primary\"\r\n//                     }\r\n//                   >\r\n//                     {answers[q._id] || \"Not answered\"}\r\n//                   </span>\r\n//                 </div>\r\n//                 {q.questionType === \"MCQ\" && (\r\n//                   <div>\r\n//                     Correct answer:{\" \"}\r\n//                     <span className=\"text-success\">{q.correctAnswer}</span>\r\n//                   </div>\r\n//                 )}\r\n//               </div>\r\n//             ))}\r\n//           </div>\r\n\r\n//           <div className=\"mt-4\">\r\n//             <button className=\"btn btn-primary me-2\" onClick={() => navigate(\"/\")}>\r\n//               Back to Home\r\n//             </button>\r\n//             <button\r\n//               className=\"btn btn-outline-secondary\"\r\n//               onClick={() => window.location.reload()}\r\n//             >\r\n//               Retake Test\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   // 🟢 Active test page\r\n//   const currentQ = questions[currentIdx];\r\n//   const selectedAnswer = answers[currentQ._id] || \"\";\r\n\r\n//   return (\r\n//     <div className=\"test-container\">\r\n//       <div className=\"card test-card\">\r\n//         {/* Header */}\r\n//         <div className=\"test-header\">\r\n//           <div>\r\n//             <h5 className=\"text-danger fw-bold\">Candidate: {fullName}</h5>\r\n//             <small className=\"text-muted\">{email}</small>\r\n//           </div>\r\n//           <div>\r\n//             <span className=\"badge bg-primary me-2\">\r\n//               Question {currentIdx + 1} / {questions.length}\r\n//             </span>\r\n//             <span className=\"badge bg-danger\">\r\n//               ⏳ {Math.floor(timeLeft / 60)}:\r\n//               {(timeLeft % 60).toString().padStart(2, \"0\")}\r\n//             </span>\r\n//           </div>\r\n//         </div>\r\n\r\n//         {/* Question Body */}\r\n//         <div className=\"test-body\">\r\n//           <h6 className=\"question-text\">\r\n//             <b>Q{currentIdx + 1}:</b> {currentQ.questionText}\r\n//           </h6>\r\n\r\n//           {currentQ.questionType === \"MCQ\" && currentQ.options?.length > 0 ? (\r\n//             <div className=\"options-container\">\r\n//               {currentQ.options.map((opt, i) => (\r\n//                 <label\r\n//                   key={i}\r\n//                   className={`option-item ${\r\n//                     selectedAnswer === opt ? \"selected\" : \"\"\r\n//                   }`}\r\n//                 >\r\n//                   <input\r\n//                     type=\"radio\"\r\n//                     name={`question-${currentQ._id}`}\r\n//                     value={opt}\r\n//                     checked={selectedAnswer === opt}\r\n//                     onChange={(e) => handleSelect(currentQ._id, e.target.value)}\r\n//                   />\r\n//                   {opt}\r\n//                 </label>\r\n//               ))}\r\n//             </div>\r\n//           ) : (\r\n//             <textarea\r\n//               className=\"theory-input\"\r\n//               placeholder=\"Type your answer here...\"\r\n//               value={selectedAnswer}\r\n//               onChange={(e) => handleSelect(currentQ._id, e.target.value)}\r\n//               rows={5}\r\n//             ></textarea>\r\n//           )}\r\n//         </div>\r\n\r\n//         {/* Footer */}\r\n//         <div className=\"test-footer\">\r\n//           <div>\r\n//             <button\r\n//               className=\"btn btn-secondary me-3\"\r\n//               onClick={goPrev}\r\n//               disabled={currentIdx === 0}\r\n//             >\r\n//               Previous\r\n//             </button>\r\n//             <button\r\n//               className=\"btn btn-secondary\"\r\n//               onClick={goNext}\r\n//               disabled={currentIdx === questions.length - 1}\r\n//             >\r\n//               Next\r\n//             </button>\r\n//           </div>\r\n\r\n//           <div>\r\n//             <button className=\"btn btn-success\" onClick={handleSubmit}>\r\n//               Submit Test\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// // import React, { useState } from \"react\";\r\n// // import { useNavigate } from \"react-router-dom\";\r\n// // import \"../styles/Home.css\";\r\n\r\n// // export default function Home() {\r\n// //   const [fullName, setFullName] = useState(\"\");\r\n// //   const [email, setEmail] = useState(\"\");\r\n// //   const [numQ, setNumQ] = useState(10);\r\n// //   const navigate = useNavigate();\r\n\r\n// //   const handleStart = () => {\r\n// //     if (!fullName.trim() || !email.trim()) {\r\n// //       return alert(\"Please enter your full name and email.\");\r\n// //     }\r\n// //     // Navigate to test page with state (we pass via router state)\r\n// //     navigate(\"/test\", { state: { fullName, email, numQ } });\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div className=\"container container-center\">\r\n// //       <div className=\"header-banner mb-4\">\r\n// //         <h1 className=\"display-6\">VLSI Interview Assessment</h1>\r\n// //         <p className=\"lead\">Test your knowledge of Very Large Scale Integration (VLSI) concepts</p>\r\n// //       </div>\r\n\r\n// //       <div className=\"card card-clean p-4 mb-4\">\r\n// //         <h5>Start Your Interview Test</h5>\r\n// //         <p className=\"text-muted\">You will be presented with randomly selected questions. Please answer to the best of your ability.</p>\r\n\r\n// //         <div className=\"row g-3\">\r\n// //           <div className=\"col-md-6\">\r\n// //             <label className=\"form-label\">Full Name *</label>\r\n// //             <input className=\"form-control\" placeholder=\"Enter your full name\" value={fullName} onChange={(e) => setFullName(e.target.value)} />\r\n// //           </div>\r\n\r\n// //           <div className=\"col-md-6\">\r\n// //             <label className=\"form-label\">Email Address *</label>\r\n// //             <input className=\"form-control\" placeholder=\"Enter your email\" value={email} onChange={(e) => setEmail(e.target.value)} />\r\n// //           </div>\r\n\r\n// //           <div className=\"col-md-6\">\r\n// //             <label className=\"form-label\">Number of Questions</label>\r\n// //             <select className=\"form-select\" value={numQ} onChange={(e) => setNumQ(Number(e.target.value))}>\r\n// //               <option value={5}>5 Questions</option>\r\n// //               <option value={10}>10 Questions</option>\r\n// //             </select>\r\n// //           </div>\r\n\r\n// //           <div className=\"col-12 mt-3\">\r\n// //             <button className=\"btn btn-primary btn-lg w-100\" onClick={handleStart}>Start Test</button>\r\n// //           </div>\r\n// //         </div>\r\n// //       </div>\r\n\r\n// //       <div className=\"card card-clean p-3\">\r\n// //         <h6>Instructions</h6>\r\n// //         <ul>\r\n// //           <li>Read each question carefully before answering.</li>\r\n// //           <li>Use Next and Previous to navigate.</li>\r\n// //           <li>Submit once all questions are answered.</li>\r\n// //         </ul>\r\n// //       </div>\r\n// //     </div>\r\n// //   );\r\n// // }\r\n"],"mappings":"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AA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA7F,EAAA,CArtBwBD,QAAQ;EAAA,QACbL,WAAW,EACXC,WAAW;AAAA;AAAAqH,EAAA,GAFNjH,QAAQ;AAAA,IAAAiH,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}