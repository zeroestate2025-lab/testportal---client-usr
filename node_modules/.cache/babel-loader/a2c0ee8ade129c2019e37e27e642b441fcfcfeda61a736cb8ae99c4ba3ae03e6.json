{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Questions API\nexport const questionsAPI = {\n  getAll: () => api.get('/questions'),\n  getById: id => api.get(`/questions/${id}`),\n  getRandom: (count = 10) => api.get(`/questions/random/${count}`),\n  create: question => api.post('/questions', question),\n  update: (id, question) => api.put(`/questions/${id}`, question),\n  delete: id => api.delete(`/questions/${id}`)\n};\n\n// Tests API\nexport const testsAPI = {\n  createSession: candidateData => api.post('/tests/create', candidateData),\n  getSession: token => api.get(`/tests/session/${token}`),\n  submitAnswer: answerData => api.post('/tests/answer', answerData),\n  completeTest: token => api.post('/tests/complete', {\n    session_token: token\n  }),\n  getResults: token => api.get(`/tests/results/${token}`),\n  getAllSessions: () => api.get('/tests/all')\n};\n\n// Candidates API\nexport const candidatesAPI = {\n  getAll: () => api.get('/candidates'),\n  getById: id => api.get(`/candidates/${id}`),\n  create: candidate => api.post('/candidates', candidate),\n  update: (id, candidate) => api.put(`/candidates/${id}`, candidate),\n  delete: id => api.delete(`/candidates/${id}`)\n};\n\n// Import API\nexport const importAPI = {\n  getDocumentStatus: () => api.get('/import/document-status'),\n  importFromDocument: () => api.post('/import/import-from-document'),\n  uploadDocument: formData => api.post('/import/upload-document', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  }),\n  saveQuestions: questions => api.post('/import/save-questions', {\n    questions\n  })\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","questionsAPI","getAll","get","getById","id","getRandom","count","question","post","update","put","delete","testsAPI","createSession","candidateData","getSession","token","submitAnswer","answerData","completeTest","session_token","getResults","getAllSessions","candidatesAPI","candidate","importAPI","getDocumentStatus","importFromDocument","uploadDocument","formData","saveQuestions","questions"],"sources":["C:/Users/HP/Downloads/INTERVIEW PROCESS/INTERVIEW PROCESS/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Questions API\r\nexport const questionsAPI = {\r\n  getAll: () => api.get('/questions'),\r\n  getById: (id) => api.get(`/questions/${id}`),\r\n  getRandom: (count = 10) => api.get(`/questions/random/${count}`),\r\n  create: (question) => api.post('/questions', question),\r\n  update: (id, question) => api.put(`/questions/${id}`, question),\r\n  delete: (id) => api.delete(`/questions/${id}`),\r\n};\r\n\r\n// Tests API\r\nexport const testsAPI = {\r\n  createSession: (candidateData) => api.post('/tests/create', candidateData),\r\n  getSession: (token) => api.get(`/tests/session/${token}`),\r\n  submitAnswer: (answerData) => api.post('/tests/answer', answerData),\r\n  completeTest: (token) => api.post('/tests/complete', { session_token: token }),\r\n  getResults: (token) => api.get(`/tests/results/${token}`),\r\n  getAllSessions: () => api.get('/tests/all'),\r\n};\r\n\r\n// Candidates API\r\nexport const candidatesAPI = {\r\n  getAll: () => api.get('/candidates'),\r\n  getById: (id) => api.get(`/candidates/${id}`),\r\n  create: (candidate) => api.post('/candidates', candidate),\r\n  update: (id, candidate) => api.put(`/candidates/${id}`, candidate),\r\n  delete: (id) => api.delete(`/candidates/${id}`),\r\n};\r\n\r\n// Import API\r\nexport const importAPI = {\r\n  getDocumentStatus: () => api.get('/import/document-status'),\r\n  importFromDocument: () => api.post('/import/import-from-document'),\r\n  uploadDocument: (formData) => api.post('/import/upload-document', formData, {\r\n    headers: { 'Content-Type': 'multipart/form-data' }\r\n  }),\r\n  saveQuestions: (questions) => api.post('/import/save-questions', { questions }),\r\n};\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}