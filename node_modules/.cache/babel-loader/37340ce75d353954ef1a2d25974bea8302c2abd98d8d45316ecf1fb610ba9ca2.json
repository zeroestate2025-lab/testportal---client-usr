{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Downloads\\\\INTERVIEW PROCESS\\\\INTERVIEW PROCESS\\\\client\\\\src\\\\pages\\\\TestPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"../styles/TestPage.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TestPage = () => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [userAnswers, setUserAnswers] = useState({});\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [submitted, setSubmitted] = useState(false);\n  const [score, setScore] = useState(null);\n  useEffect(() => {\n    axios.get(\"http://localhost:5000/api/questions/random/10\").then(res => setQuestions(res.data)).catch(err => console.error(err));\n  }, []);\n  const handleAnswer = (questionId, answer) => {\n    setUserAnswers({\n      ...userAnswers,\n      [questionId]: answer\n    });\n  };\n  const handleSubmit = async () => {\n    try {\n      const formattedAnswers = questions.map(q => ({\n        question: q.text,\n        userAnswer: userAnswers[q._id] || \"\",\n        correctAnswer: q.correctAnswer\n      }));\n      const response = await axios.post(\"http://localhost:5000/api/tests\", {\n        name,\n        email,\n        answers: formattedAnswers\n      });\n      setScore(response.data.scorePercent);\n      setSubmitted(true);\n    } catch (err) {\n      console.error(\"Error submitting test:\", err);\n      alert(\"Failed to submit test.\");\n    }\n  };\n  if (submitted) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-page\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Test Submitted Successfully \\uD83C\\uDF89\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 14\n          }, this), \" \", name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Email:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 14\n          }, this), \" \", email]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Your Score: \", score, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"test-page\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"VLSI Interview Test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Full Name:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: name,\n        onChange: e => setName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Email Address:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        value: email,\n        onChange: e => setEmail(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), questions.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Q\", currentIndex + 1, \". \", questions[currentIndex].text]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this), questions[currentIndex].options.map((opt, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: `q-${currentIndex}`,\n              value: opt,\n              checked: userAnswers[questions[currentIndex]._id] === opt,\n              onChange: () => handleAnswer(questions[currentIndex]._id, opt)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 19\n            }, this), opt]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 17\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 15\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"test-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: currentIndex === 0,\n            onClick: () => setCurrentIndex(currentIndex - 1),\n            children: \"Previous\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }, this), currentIndex < questions.length - 1 ? /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setCurrentIndex(currentIndex + 1),\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn-submit\",\n            onClick: handleSubmit,\n            children: \"Submit Test\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading questions...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(TestPage, \"Bge/EWpn7eVVLIG70yo/gLHCOG8=\");\n_c = TestPage;\nexport default TestPage;\n\n// import React, { useEffect, useState } from \"react\";\n// import { useLocation, useNavigate } from \"react-router-dom\";\n// import API from \"../services/api\";\n// import QuestionCard from \"../components/QuestionCard\";\n// import \"../styles/TestPage.css\";\n\n// function pickRandom(arr, n) {\n//   const copy = [...arr];\n//   const res = [];\n//   while (res.length < n && copy.length > 0) {\n//     const idx = Math.floor(Math.random() * copy.length);\n//     res.push(copy.splice(idx, 1)[0]);\n//   }\n//   return res;\n// }\n\n// export default function TestPage() {\n//   const location = useLocation();\n//   const navigate = useNavigate();\n//   const { fullName, email, numQ } = location.state || {};\n//   const [allQuestions, setAllQuestions] = useState([]);\n//   const [questions, setQuestions] = useState([]);\n//   const [answers, setAnswers] = useState({}); // { questionId: selectedOption }\n//   const [currentIdx, setCurrentIdx] = useState(0);\n//   const [loading, setLoading] = useState(true);\n//   const [submitted, setSubmitted] = useState(false);\n//   const [score, setScore] = useState(0);\n\n//   useEffect(() => {\n//     if (!fullName || !email) {\n//       // if page opened without details -> back to home\n//       navigate(\"/\");\n//       return;\n//     }\n\n//     const fetchQuestions = async () => {\n//       try {\n//         const res = await API.get(\"/questions\");\n//         setAllQuestions(res.data || []);\n//       } catch (err) {\n//         console.error(err);\n//         alert(\"Failed to fetch questions from server.\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchQuestions();\n//   }, [fullName, email, navigate]);\n\n//   useEffect(() => {\n//     if (!loading && allQuestions.length > 0) {\n//       const chunk = pickRandom(allQuestions, Math.min(numQ || 10, allQuestions.length));\n//       setQuestions(chunk);\n//     }\n//   }, [loading, allQuestions, numQ]);\n\n//   const handleSelect = (opt) => {\n//     const q = questions[currentIdx];\n//     setAnswers({ ...answers, [q._id]: opt });\n//   };\n\n//   const goNext = () => {\n//     if (currentIdx < questions.length - 1) setCurrentIdx(currentIdx + 1);\n//   };\n//   const goPrev = () => {\n//     if (currentIdx > 0) setCurrentIdx(currentIdx - 1);\n//   };\n\n//   const handleSubmit = () => {\n//     // ensure all answered\n//     if (Object.keys(answers).length < questions.length) {\n//       if (!window.confirm(\"Some questions are unanswered. Submit anyway?\")) return;\n//     }\n\n//     // compute score\n//     let s = 0;\n//     questions.forEach((q) => {\n//       if (answers[q._id] && answers[q._id] === q.correctAnswer) s += 1;\n//     });\n//     setScore(s);\n//     setSubmitted(true);\n//   };\n\n//   if (loading) return <div className=\"container container-center\">Loading questions…</div>;\n//   if (!questions || questions.length === 0) return <div className=\"container container-center\">No questions available. Please try later.</div>;\n\n//   if (submitted) {\n//     return (\n//       <div className=\"container container-center\">\n//         <div className=\"card card-clean p-4\">\n//           <h3>Test Completed</h3>\n//           <p><strong>{fullName}</strong> ({email})</p>\n//           <h4>Your score: {score} out of {questions.length}</h4>\n//           <hr />\n//           <h5>Review</h5>\n//           <div>\n//             {questions.map((q, idx) => (\n//               <div className=\"mb-3\" key={q._id}>\n//                 <b>Q{idx + 1}:</b> {q.questionText}\n//                 <div>Your answer: <span className={answers[q._id] === q.correctAnswer ? \"text-success\" : \"text-danger\"}>{answers[q._id] || \"Not answered\"}</span></div>\n//                 <div>Correct answer: <span className=\"text-success\">{q.correctAnswer}</span></div>\n//               </div>\n//             ))}\n//           </div>\n\n//           <div className=\"mt-3\">\n//             <button className=\"btn btn-primary me-2\" onClick={() => navigate(\"/\")}>Back to Home</button>\n//             <button className=\"btn btn-outline-secondary\" onClick={() => window.location.reload()}>Take New Test</button>\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n\n//   const currentQ = questions[currentIdx];\n//   const selectedForCurrent = answers[currentQ._id];\n\n//   return (\n//     <div className=\"container container-center\">\n//       <div className=\"card card-clean p-4\">\n//         <div className=\"d-flex justify-content-between align-items-start\">\n//           <div>\n//             <h5 className=\"mb-0\">Candidate: {fullName}</h5>\n//             <small className=\"text-muted\">{email}</small>\n//           </div>\n//           <div>\n//             <span className=\"badge bg-primary\">Question {currentIdx + 1} / {questions.length}</span>\n//           </div>\n//         </div>\n\n//         <div className=\"mt-4\">\n//           <QuestionCard question={currentQ} selectedAnswer={selectedForCurrent} onSelect={handleSelect} />\n//         </div>\n\n//         <div className=\"mt-3 d-flex justify-content-between\">\n//           <div>\n//             <button className=\"btn btn-secondary me-2\" onClick={goPrev} disabled={currentIdx === 0}>Previous</button>\n//             <button className=\"btn btn-secondary\" onClick={goNext} disabled={currentIdx === questions.length - 1}>Next</button>\n//           </div>\n\n//           <div>\n//             <button className=\"btn btn-danger me-2\" onClick={() => {\n//               if (window.confirm(\"Are you sure you want to abandon this test?\")) navigate(\"/\");\n//             }}>Abandon</button>\n\n//             <button className=\"btn btn-success\" onClick={handleSubmit}>Submit Test</button>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\nvar _c;\n$RefreshReg$(_c, \"TestPage\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","TestPage","_s","questions","setQuestions","currentIndex","setCurrentIndex","userAnswers","setUserAnswers","name","setName","email","setEmail","submitted","setSubmitted","score","setScore","get","then","res","data","catch","err","console","error","handleAnswer","questionId","answer","handleSubmit","formattedAnswers","map","q","question","text","userAnswer","_id","correctAnswer","response","post","answers","scorePercent","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","length","options","opt","i","checked","disabled","onClick","_c","$RefreshReg$"],"sources":["C:/Users/HP/Downloads/INTERVIEW PROCESS/INTERVIEW PROCESS/client/src/pages/TestPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"../styles/TestPage.css\";\r\n\r\nconst TestPage = () => {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [userAnswers, setUserAnswers] = useState({});\r\n  const [name, setName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const [score, setScore] = useState(null);\r\n\r\n  useEffect(() => {\r\n    axios.get(\"http://localhost:5000/api/questions/random/10\")\r\n      .then((res) => setQuestions(res.data))\r\n      .catch((err) => console.error(err));\r\n  }, []);\r\n\r\n  const handleAnswer = (questionId, answer) => {\r\n    setUserAnswers({ ...userAnswers, [questionId]: answer });\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    try {\r\n      const formattedAnswers = questions.map((q) => ({\r\n        question: q.text,\r\n        userAnswer: userAnswers[q._id] || \"\",\r\n        correctAnswer: q.correctAnswer,\r\n      }));\r\n\r\n      const response = await axios.post(\"http://localhost:5000/api/tests\", {\r\n        name,\r\n        email,\r\n        answers: formattedAnswers,\r\n      });\r\n\r\n      setScore(response.data.scorePercent);\r\n      setSubmitted(true);\r\n    } catch (err) {\r\n      console.error(\"Error submitting test:\", err);\r\n      alert(\"Failed to submit test.\");\r\n    }\r\n  };\r\n\r\n  if (submitted) {\r\n    return (\r\n      <div className=\"test-page\">\r\n        <div className=\"test-card\">\r\n          <h2>Test Submitted Successfully 🎉</h2>\r\n          <p><strong>Name:</strong> {name}</p>\r\n          <p><strong>Email:</strong> {email}</p>\r\n          <h3>Your Score: {score}%</h3>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"test-page\">\r\n      <div className=\"test-card\">\r\n        <h2>VLSI Interview Test</h2>\r\n\r\n        <label>Full Name:</label>\r\n        <input\r\n          type=\"text\"\r\n          value={name}\r\n          onChange={(e) => setName(e.target.value)}\r\n        />\r\n\r\n        <label>Email Address:</label>\r\n        <input\r\n          type=\"email\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n\r\n        {questions.length > 0 ? (\r\n          <>\r\n            <h3>\r\n              Q{currentIndex + 1}. {questions[currentIndex].text}\r\n            </h3>\r\n            {questions[currentIndex].options.map((opt, i) => (\r\n              <div key={i}>\r\n                <label>\r\n                  <input\r\n                    type=\"radio\"\r\n                    name={`q-${currentIndex}`}\r\n                    value={opt}\r\n                    checked={userAnswers[questions[currentIndex]._id] === opt}\r\n                    onChange={() =>\r\n                      handleAnswer(questions[currentIndex]._id, opt)\r\n                    }\r\n                  />\r\n                  {opt}\r\n                </label>\r\n              </div>\r\n            ))}\r\n\r\n            <div className=\"test-controls\">\r\n              <button\r\n                disabled={currentIndex === 0}\r\n                onClick={() => setCurrentIndex(currentIndex - 1)}\r\n              >\r\n                Previous\r\n              </button>\r\n\r\n              {currentIndex < questions.length - 1 ? (\r\n                <button onClick={() => setCurrentIndex(currentIndex + 1)}>\r\n                  Next\r\n                </button>\r\n              ) : (\r\n                <button className=\"btn-submit\" onClick={handleSubmit}>\r\n                  Submit Test\r\n                </button>\r\n              )}\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <p>Loading questions...</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TestPage;\r\n\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { useLocation, useNavigate } from \"react-router-dom\";\r\n// import API from \"../services/api\";\r\n// import QuestionCard from \"../components/QuestionCard\";\r\n// import \"../styles/TestPage.css\";\r\n\r\n// function pickRandom(arr, n) {\r\n//   const copy = [...arr];\r\n//   const res = [];\r\n//   while (res.length < n && copy.length > 0) {\r\n//     const idx = Math.floor(Math.random() * copy.length);\r\n//     res.push(copy.splice(idx, 1)[0]);\r\n//   }\r\n//   return res;\r\n// }\r\n\r\n// export default function TestPage() {\r\n//   const location = useLocation();\r\n//   const navigate = useNavigate();\r\n//   const { fullName, email, numQ } = location.state || {};\r\n//   const [allQuestions, setAllQuestions] = useState([]);\r\n//   const [questions, setQuestions] = useState([]);\r\n//   const [answers, setAnswers] = useState({}); // { questionId: selectedOption }\r\n//   const [currentIdx, setCurrentIdx] = useState(0);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [submitted, setSubmitted] = useState(false);\r\n//   const [score, setScore] = useState(0);\r\n\r\n//   useEffect(() => {\r\n//     if (!fullName || !email) {\r\n//       // if page opened without details -> back to home\r\n//       navigate(\"/\");\r\n//       return;\r\n//     }\r\n\r\n//     const fetchQuestions = async () => {\r\n//       try {\r\n//         const res = await API.get(\"/questions\");\r\n//         setAllQuestions(res.data || []);\r\n//       } catch (err) {\r\n//         console.error(err);\r\n//         alert(\"Failed to fetch questions from server.\");\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchQuestions();\r\n//   }, [fullName, email, navigate]);\r\n\r\n//   useEffect(() => {\r\n//     if (!loading && allQuestions.length > 0) {\r\n//       const chunk = pickRandom(allQuestions, Math.min(numQ || 10, allQuestions.length));\r\n//       setQuestions(chunk);\r\n//     }\r\n//   }, [loading, allQuestions, numQ]);\r\n\r\n//   const handleSelect = (opt) => {\r\n//     const q = questions[currentIdx];\r\n//     setAnswers({ ...answers, [q._id]: opt });\r\n//   };\r\n\r\n//   const goNext = () => {\r\n//     if (currentIdx < questions.length - 1) setCurrentIdx(currentIdx + 1);\r\n//   };\r\n//   const goPrev = () => {\r\n//     if (currentIdx > 0) setCurrentIdx(currentIdx - 1);\r\n//   };\r\n\r\n//   const handleSubmit = () => {\r\n//     // ensure all answered\r\n//     if (Object.keys(answers).length < questions.length) {\r\n//       if (!window.confirm(\"Some questions are unanswered. Submit anyway?\")) return;\r\n//     }\r\n\r\n//     // compute score\r\n//     let s = 0;\r\n//     questions.forEach((q) => {\r\n//       if (answers[q._id] && answers[q._id] === q.correctAnswer) s += 1;\r\n//     });\r\n//     setScore(s);\r\n//     setSubmitted(true);\r\n//   };\r\n\r\n//   if (loading) return <div className=\"container container-center\">Loading questions…</div>;\r\n//   if (!questions || questions.length === 0) return <div className=\"container container-center\">No questions available. Please try later.</div>;\r\n\r\n//   if (submitted) {\r\n//     return (\r\n//       <div className=\"container container-center\">\r\n//         <div className=\"card card-clean p-4\">\r\n//           <h3>Test Completed</h3>\r\n//           <p><strong>{fullName}</strong> ({email})</p>\r\n//           <h4>Your score: {score} out of {questions.length}</h4>\r\n//           <hr />\r\n//           <h5>Review</h5>\r\n//           <div>\r\n//             {questions.map((q, idx) => (\r\n//               <div className=\"mb-3\" key={q._id}>\r\n//                 <b>Q{idx + 1}:</b> {q.questionText}\r\n//                 <div>Your answer: <span className={answers[q._id] === q.correctAnswer ? \"text-success\" : \"text-danger\"}>{answers[q._id] || \"Not answered\"}</span></div>\r\n//                 <div>Correct answer: <span className=\"text-success\">{q.correctAnswer}</span></div>\r\n//               </div>\r\n//             ))}\r\n//           </div>\r\n\r\n//           <div className=\"mt-3\">\r\n//             <button className=\"btn btn-primary me-2\" onClick={() => navigate(\"/\")}>Back to Home</button>\r\n//             <button className=\"btn btn-outline-secondary\" onClick={() => window.location.reload()}>Take New Test</button>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   const currentQ = questions[currentIdx];\r\n//   const selectedForCurrent = answers[currentQ._id];\r\n\r\n//   return (\r\n//     <div className=\"container container-center\">\r\n//       <div className=\"card card-clean p-4\">\r\n//         <div className=\"d-flex justify-content-between align-items-start\">\r\n//           <div>\r\n//             <h5 className=\"mb-0\">Candidate: {fullName}</h5>\r\n//             <small className=\"text-muted\">{email}</small>\r\n//           </div>\r\n//           <div>\r\n//             <span className=\"badge bg-primary\">Question {currentIdx + 1} / {questions.length}</span>\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"mt-4\">\r\n//           <QuestionCard question={currentQ} selectedAnswer={selectedForCurrent} onSelect={handleSelect} />\r\n//         </div>\r\n\r\n//         <div className=\"mt-3 d-flex justify-content-between\">\r\n//           <div>\r\n//             <button className=\"btn btn-secondary me-2\" onClick={goPrev} disabled={currentIdx === 0}>Previous</button>\r\n//             <button className=\"btn btn-secondary\" onClick={goNext} disabled={currentIdx === questions.length - 1}>Next</button>\r\n//           </div>\r\n\r\n//           <div>\r\n//             <button className=\"btn btn-danger me-2\" onClick={() => {\r\n//               if (window.confirm(\"Are you sure you want to abandon this test?\")) navigate(\"/\");\r\n//             }}>Abandon</button>\r\n\r\n//             <button className=\"btn btn-success\" onClick={handleSubmit}>Submit Test</button>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n"],"mappings":"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":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}