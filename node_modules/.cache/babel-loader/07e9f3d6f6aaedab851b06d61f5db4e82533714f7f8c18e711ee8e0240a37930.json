{"ast":null,"code":"import axios from \"axios\";\n\n// âœ… Create axios instance\nconst API = axios.create({\n  baseURL: \"http://localhost:5000/api\",\n  // baseURL: \"https://testportalserver.onrender.com/api\",\n  timeout: 10000\n});\n\n// âœ… Attach auth token automatically\nAPI.interceptors.request.use(config => {\n  const adminToken = localStorage.getItem(\"adminToken\");\n  const userToken = localStorage.getItem(\"userToken\");\n  const token = adminToken || userToken;\n  if (token) config.headers.Authorization = token;\n  return config;\n}, error => Promise.reject(error));\n\n// ðŸ§© ADMIN AUTH APIS\nconst adminAuth = {\n  login: credentials => API.post(\"/admin/login\", credentials),\n  register: data => API.post(\"/admin/register\", data)\n};\n\n// ðŸ§© USER APIS\nconst user = {\n  register: data => API.post(\"/user/register\", data),\n  activateAll: () => API.put(\"/user/activate-all\")\n};\n\n// ðŸ§© QUESTIONS APIS\nconst questions = {\n  getAll: () => API.get(\"/questions\"),\n  create: question => API.post(\"/questions\", question),\n  update: (id, question) => API.put(`/questions/${id}`, question),\n  delete: id => API.delete(`/questions/${id}`),\n  uploadDoc: formData => API.post(\"/questions/upload\", formData, {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  })\n};\n\n// ðŸ§© TEST RESULTS APIS\nconst tests = {\n  getAll: () => API.get(\"/tests\"),\n  submit: testData => API.post(\"/tests\", testData),\n  getById: id => API.get(`/tests/${id}`),\n  validate: (id, validationData) => API.put(`/tests/${id}/validate`, validationData)\n};\n\n// ðŸ§© TEST CONTROL APIS\nconst testcontrol = {\n  get: () => API.get(\"/testcontrol\"),\n  update: data => API.put(\"/testcontrol\", data)\n};\n\n// ðŸ§© WAITING USERS APIS â€” NEW ðŸ”¥\nconst waitingUsers = {\n  getAll: () => API.get(\"/waiting-users\"),\n  getCount: () => API.get(\"/waiting-users/count\"),\n  deleteLast: () => API.delete(\"/waiting-users/last\"),\n  activateAll: () => API.put(\"/waiting-users/activate-all\") // âœ… new\n};\n\n// ðŸ§© Combine all\nconst combinedAPI = {\n  ...API,\n  adminAuth,\n  user,\n  questions,\n  tests,\n  testcontrol,\n  waitingUsers\n};\nexport default combinedAPI;\n\n// import axios from \"axios\";\n\n// // âœ… Create axios instance\n// const API = axios.create({\n//   baseURL: \"http://localhost:5000/api\",\n//   // baseURL: \"https://testportalserver.onrender.com/api\",\n//   timeout: 10000,\n// });\n\n// // âœ… Attach auth token automatically\n// API.interceptors.request.use(\n//   (config) => {\n//     const adminToken = localStorage.getItem(\"adminToken\");\n//     const userToken = localStorage.getItem(\"userToken\");\n//     const token = adminToken || userToken;\n//     if (token) config.headers.Authorization = token;\n//     return config;\n//   },\n//   (error) => Promise.reject(error)\n// );\n\n// // ðŸ§© ADMIN AUTH APIS\n// const adminAuth = {\n//   login: (credentials) => API.post(\"/admin/login\", credentials),\n//   register: (data) => API.post(\"/admin/register\", data),\n// };\n\n// // ðŸ§© QUESTIONS APIS\n// const questions = {\n//   getAll: () => API.get(\"/questions\"),\n//   create: (question) => API.post(\"/questions\", question),\n//   update: (id, question) => API.put(`/questions/${id}`, question),\n//   delete: (id) => API.delete(`/questions/${id}`),\n//   uploadDoc: (formData) =>\n//     API.post(\"/questions/upload\", formData, {\n//       headers: { \"Content-Type\": \"multipart/form-data\" },\n//     }),\n// };\n\n// // ðŸ§© TEST RESULTS APIS\n// const tests = {\n//   getAll: () => API.get(\"/tests\"),\n//   submit: (testData) => API.post(\"/tests\", testData),\n//   getById: (id) => API.get(`/tests/${id}`),\n//   validate: (id, validationData) =>\n//     API.put(`/tests/${id}/validate`, validationData),\n// };\n\n// // ðŸ§© TEST CONTROL APIS\n// const testcontrol = {\n//   get: () => API.get(\"/testcontrol\"),\n//   update: (data) => API.put(\"/testcontrol\", data),\n// };\n\n// // ðŸ§© WAITING USERS APIS â€” NEW ðŸ”¥\n// const waitingUsers = {\n//   getAll: () => API.get(\"/waiting-users\"), // list of waiting users\n//   getCount: () => API.get(\"/waiting-users/count\"), // count of waiting users\n//   deleteLast: () => API.delete(\"/waiting-users/last\"), // âœ… NEW\n// };\n\n// // ðŸ§© Combine all\n// const combinedAPI = {\n//   ...API,\n//   adminAuth,\n//   questions,\n//   tests,\n//   testcontrol,\n//   waitingUsers, // âœ… Added here\n// };\n\n// export default combinedAPI;\n\n// // import axios from \"axios\";\n\n// // // âœ… Create axios instance\n// // const API = axios.create({\n// // baseURL: \"http://localhost:5000/api\",\n// // // baseURL: \"https://testportalserver.onrender.com/api\",\n// // timeout: 10000,\n// // });\n\n// // // âœ… Attach auth token for admin or user automatically\n// // API.interceptors.request.use(\n// //   (config) => {\n// //     const adminToken = localStorage.getItem(\"adminToken\");\n// //     const userToken = localStorage.getItem(\"userToken\");\n// //     const token = adminToken || userToken;\n// //     if (token) config.headers.Authorization = token;\n// //     return config;\n// //   },\n// //   (error) => Promise.reject(error)\n// // );\n\n// // // ðŸ§© ADMIN AUTH APIS\n// // const adminAuth = {\n// //   login: (credentials) => API.post(\"/admin/login\", credentials),\n// //   register: (data) => API.post(\"/admin/register\", data),\n// // };\n\n// // // ðŸ§© QUESTIONS APIS\n// // const questions = {\n// //   getAll: () => API.get(\"/questions\"),\n// //   create: (question) => API.post(\"/questions\", question),\n// //   update: (id, question) => API.put(`/questions/${id}`, question),\n// //   delete: (id) => API.delete(`/questions/${id}`),\n// //   uploadDoc: (formData) =>\n// //     API.post(\"/questions/upload\", formData, {\n// //       headers: { \"Content-Type\": \"multipart/form-data\" },\n// //     }),\n// // };\n\n// // // ðŸ§© TEST RESULTS APIS\n// // const tests = {\n// //   getAll: () => API.get(\"/tests\"),\n// //   submit: (testData) => API.post(\"/tests\", testData),\n// //   getById: (id) => API.get(`/tests/${id}`),\n// //   validate: (id, validationData) =>\n// //     API.put(`/tests/${id}/validate`, validationData),\n// // };\n\n// // // ðŸ§© NEW â€” TEST CONTROL APIS (Admin Test Settings)\n// // const testcontrol = {\n// //   get: () => API.get(\"/testcontrol\"),          // Get current test control state\n// //   update: (data) => API.put(\"/testcontrol\", data), // Update test control (start/stop/time/questions)\n// // };\n\n// // // ðŸ§© Combine all modules into one export\n// // const combinedAPI = {\n// //   ...API,\n// //   adminAuth,\n// //   questions,\n// //   tests,\n// //   testcontrol, // âœ… Added testcontrol module here\n// // };\n\n// // export default combinedAPI;\n\n// // // import axios from \"axios\";\n\n// // // const API = axios.create({\n// // //   baseURL: \"http://localhost:5000/api\",\n// // //   timeout: 10000,\n// // // });\n\n// // // API.interceptors.request.use((config) => {\n// // //   const adminToken = localStorage.getItem(\"adminToken\");\n// // //   const userToken = localStorage.getItem(\"userToken\");\n// // //   const token = adminToken || userToken;\n// // //   if (token) config.headers.Authorization = token;\n// // //   return config;\n// // // }, (error) => Promise.reject(error));\n\n// // // // Admin Authentication APIs\n// // // const adminAuth = {\n// // //   login: (credentials) => API.post(\"/admin/login\", credentials),\n// // //   register: (data) => API.post(\"/admin/register\", data),\n// // // };\n\n// // // // Questions APIs\n// // // const questions = {\n// // //   getAll: () => API.get(\"/questions\"),\n// // //   create: (question) => API.post(\"/questions\", question),\n// // //   update: (id, question) => API.put(`/questions/${id}`, question),\n// // //   delete: (id) => API.delete(`/questions/${id}`),\n// // //   uploadDoc: (formData) => API.post(\"/questions/upload\", formData, {\n// // //     headers: { \"Content-Type\": \"multipart/form-data\" }\n// // //   }),\n// // // };\n\n// // // // Test Results APIs\n// // // const tests = {\n// // //   getAll: () => API.get(\"/tests\"),\n// // //   submit: (testData) => API.post(\"/tests\", testData),\n// // //   getById: (id) => API.get(`/tests/${id}`),\n// // //   validate: (id, validationData) => API.put(`/tests/${id}/validate`, validationData),\n// // // };\n\n// // // // Combined API object\n// // // const combinedAPI = {\n// // //   ...API,\n// // //   adminAuth,\n// // //   questions,\n// // //   tests,\n// // // };\n\n// // // export default combinedAPI;","map":{"version":3,"names":["axios","API","create","baseURL","timeout","interceptors","request","use","config","adminToken","localStorage","getItem","userToken","token","headers","Authorization","error","Promise","reject","adminAuth","login","credentials","post","register","data","user","activateAll","put","questions","getAll","get","question","update","id","delete","uploadDoc","formData","tests","submit","testData","getById","validate","validationData","testcontrol","waitingUsers","getCount","deleteLast","combinedAPI"],"sources":["C:/Users/HP/Downloads/INTERVIEW PROCESS/INTERVIEW PROCESS/client/src/services/api.js"],"sourcesContent":["\r\nimport axios from \"axios\";\r\n\r\n// âœ… Create axios instance\r\nconst API = axios.create({\r\n  baseURL: \"http://localhost:5000/api\",\r\n  // baseURL: \"https://testportalserver.onrender.com/api\",\r\n  timeout: 10000,\r\n});\r\n\r\n// âœ… Attach auth token automatically\r\nAPI.interceptors.request.use(\r\n  (config) => {\r\n    const adminToken = localStorage.getItem(\"adminToken\");\r\n    const userToken = localStorage.getItem(\"userToken\");\r\n    const token = adminToken || userToken;\r\n    if (token) config.headers.Authorization = token;\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// ðŸ§© ADMIN AUTH APIS\r\nconst adminAuth = {\r\n  login: (credentials) => API.post(\"/admin/login\", credentials),\r\n  register: (data) => API.post(\"/admin/register\", data),\r\n};\r\n\r\n// ðŸ§© USER APIS\r\nconst user = {\r\n  register: (data) => API.post(\"/user/register\", data),\r\n  activateAll: () => API.put(\"/user/activate-all\"),\r\n};\r\n\r\n// ðŸ§© QUESTIONS APIS\r\nconst questions = {\r\n  getAll: () => API.get(\"/questions\"),\r\n  create: (question) => API.post(\"/questions\", question),\r\n  update: (id, question) => API.put(`/questions/${id}`, question),\r\n  delete: (id) => API.delete(`/questions/${id}`),\r\n  uploadDoc: (formData) =>\r\n    API.post(\"/questions/upload\", formData, {\r\n      headers: { \"Content-Type\": \"multipart/form-data\" },\r\n    }),\r\n};\r\n\r\n// ðŸ§© TEST RESULTS APIS\r\nconst tests = {\r\n  getAll: () => API.get(\"/tests\"),\r\n  submit: (testData) => API.post(\"/tests\", testData),\r\n  getById: (id) => API.get(`/tests/${id}`),\r\n  validate: (id, validationData) =>\r\n    API.put(`/tests/${id}/validate`, validationData),\r\n};\r\n\r\n// ðŸ§© TEST CONTROL APIS\r\nconst testcontrol = {\r\n  get: () => API.get(\"/testcontrol\"),\r\n  update: (data) => API.put(\"/testcontrol\", data),\r\n};\r\n\r\n// ðŸ§© WAITING USERS APIS â€” NEW ðŸ”¥\r\nconst waitingUsers = {\r\n  getAll: () => API.get(\"/waiting-users\"),\r\n  getCount: () => API.get(\"/waiting-users/count\"),\r\n  deleteLast: () => API.delete(\"/waiting-users/last\"),\r\n  activateAll: () => API.put(\"/waiting-users/activate-all\"), // âœ… new\r\n};\r\n\r\n// ðŸ§© Combine all\r\nconst combinedAPI = {\r\n  ...API,\r\n  adminAuth,\r\n  user,\r\n  questions,\r\n  tests,\r\n  testcontrol,\r\n  waitingUsers,\r\n};\r\n\r\nexport default combinedAPI;\r\n\r\n// import axios from \"axios\";\r\n\r\n// // âœ… Create axios instance\r\n// const API = axios.create({\r\n//   baseURL: \"http://localhost:5000/api\",\r\n//   // baseURL: \"https://testportalserver.onrender.com/api\",\r\n//   timeout: 10000,\r\n// });\r\n\r\n// // âœ… Attach auth token automatically\r\n// API.interceptors.request.use(\r\n//   (config) => {\r\n//     const adminToken = localStorage.getItem(\"adminToken\");\r\n//     const userToken = localStorage.getItem(\"userToken\");\r\n//     const token = adminToken || userToken;\r\n//     if (token) config.headers.Authorization = token;\r\n//     return config;\r\n//   },\r\n//   (error) => Promise.reject(error)\r\n// );\r\n\r\n// // ðŸ§© ADMIN AUTH APIS\r\n// const adminAuth = {\r\n//   login: (credentials) => API.post(\"/admin/login\", credentials),\r\n//   register: (data) => API.post(\"/admin/register\", data),\r\n// };\r\n\r\n// // ðŸ§© QUESTIONS APIS\r\n// const questions = {\r\n//   getAll: () => API.get(\"/questions\"),\r\n//   create: (question) => API.post(\"/questions\", question),\r\n//   update: (id, question) => API.put(`/questions/${id}`, question),\r\n//   delete: (id) => API.delete(`/questions/${id}`),\r\n//   uploadDoc: (formData) =>\r\n//     API.post(\"/questions/upload\", formData, {\r\n//       headers: { \"Content-Type\": \"multipart/form-data\" },\r\n//     }),\r\n// };\r\n\r\n// // ðŸ§© TEST RESULTS APIS\r\n// const tests = {\r\n//   getAll: () => API.get(\"/tests\"),\r\n//   submit: (testData) => API.post(\"/tests\", testData),\r\n//   getById: (id) => API.get(`/tests/${id}`),\r\n//   validate: (id, validationData) =>\r\n//     API.put(`/tests/${id}/validate`, validationData),\r\n// };\r\n\r\n// // ðŸ§© TEST CONTROL APIS\r\n// const testcontrol = {\r\n//   get: () => API.get(\"/testcontrol\"),\r\n//   update: (data) => API.put(\"/testcontrol\", data),\r\n// };\r\n\r\n// // ðŸ§© WAITING USERS APIS â€” NEW ðŸ”¥\r\n// const waitingUsers = {\r\n//   getAll: () => API.get(\"/waiting-users\"), // list of waiting users\r\n//   getCount: () => API.get(\"/waiting-users/count\"), // count of waiting users\r\n//   deleteLast: () => API.delete(\"/waiting-users/last\"), // âœ… NEW\r\n// };\r\n\r\n// // ðŸ§© Combine all\r\n// const combinedAPI = {\r\n//   ...API,\r\n//   adminAuth,\r\n//   questions,\r\n//   tests,\r\n//   testcontrol,\r\n//   waitingUsers, // âœ… Added here\r\n// };\r\n\r\n// export default combinedAPI;\r\n\r\n// // import axios from \"axios\";\r\n\r\n// // // âœ… Create axios instance\r\n// // const API = axios.create({\r\n// // baseURL: \"http://localhost:5000/api\",\r\n// // // baseURL: \"https://testportalserver.onrender.com/api\",\r\n// // timeout: 10000,\r\n// // });\r\n\r\n// // // âœ… Attach auth token for admin or user automatically\r\n// // API.interceptors.request.use(\r\n// //   (config) => {\r\n// //     const adminToken = localStorage.getItem(\"adminToken\");\r\n// //     const userToken = localStorage.getItem(\"userToken\");\r\n// //     const token = adminToken || userToken;\r\n// //     if (token) config.headers.Authorization = token;\r\n// //     return config;\r\n// //   },\r\n// //   (error) => Promise.reject(error)\r\n// // );\r\n\r\n// // // ðŸ§© ADMIN AUTH APIS\r\n// // const adminAuth = {\r\n// //   login: (credentials) => API.post(\"/admin/login\", credentials),\r\n// //   register: (data) => API.post(\"/admin/register\", data),\r\n// // };\r\n\r\n// // // ðŸ§© QUESTIONS APIS\r\n// // const questions = {\r\n// //   getAll: () => API.get(\"/questions\"),\r\n// //   create: (question) => API.post(\"/questions\", question),\r\n// //   update: (id, question) => API.put(`/questions/${id}`, question),\r\n// //   delete: (id) => API.delete(`/questions/${id}`),\r\n// //   uploadDoc: (formData) =>\r\n// //     API.post(\"/questions/upload\", formData, {\r\n// //       headers: { \"Content-Type\": \"multipart/form-data\" },\r\n// //     }),\r\n// // };\r\n\r\n// // // ðŸ§© TEST RESULTS APIS\r\n// // const tests = {\r\n// //   getAll: () => API.get(\"/tests\"),\r\n// //   submit: (testData) => API.post(\"/tests\", testData),\r\n// //   getById: (id) => API.get(`/tests/${id}`),\r\n// //   validate: (id, validationData) =>\r\n// //     API.put(`/tests/${id}/validate`, validationData),\r\n// // };\r\n\r\n// // // ðŸ§© NEW â€” TEST CONTROL APIS (Admin Test Settings)\r\n// // const testcontrol = {\r\n// //   get: () => API.get(\"/testcontrol\"),          // Get current test control state\r\n// //   update: (data) => API.put(\"/testcontrol\", data), // Update test control (start/stop/time/questions)\r\n// // };\r\n\r\n// // // ðŸ§© Combine all modules into one export\r\n// // const combinedAPI = {\r\n// //   ...API,\r\n// //   adminAuth,\r\n// //   questions,\r\n// //   tests,\r\n// //   testcontrol, // âœ… Added testcontrol module here\r\n// // };\r\n\r\n// // export default combinedAPI;\r\n\r\n\r\n// // // import axios from \"axios\";\r\n\r\n// // // const API = axios.create({\r\n// // //   baseURL: \"http://localhost:5000/api\",\r\n// // //   timeout: 10000,\r\n// // // });\r\n\r\n// // // API.interceptors.request.use((config) => {\r\n// // //   const adminToken = localStorage.getItem(\"adminToken\");\r\n// // //   const userToken = localStorage.getItem(\"userToken\");\r\n// // //   const token = adminToken || userToken;\r\n// // //   if (token) config.headers.Authorization = token;\r\n// // //   return config;\r\n// // // }, (error) => Promise.reject(error));\r\n\r\n// // // // Admin Authentication APIs\r\n// // // const adminAuth = {\r\n// // //   login: (credentials) => API.post(\"/admin/login\", credentials),\r\n// // //   register: (data) => API.post(\"/admin/register\", data),\r\n// // // };\r\n\r\n// // // // Questions APIs\r\n// // // const questions = {\r\n// // //   getAll: () => API.get(\"/questions\"),\r\n// // //   create: (question) => API.post(\"/questions\", question),\r\n// // //   update: (id, question) => API.put(`/questions/${id}`, question),\r\n// // //   delete: (id) => API.delete(`/questions/${id}`),\r\n// // //   uploadDoc: (formData) => API.post(\"/questions/upload\", formData, {\r\n// // //     headers: { \"Content-Type\": \"multipart/form-data\" }\r\n// // //   }),\r\n// // // };\r\n\r\n// // // // Test Results APIs\r\n// // // const tests = {\r\n// // //   getAll: () => API.get(\"/tests\"),\r\n// // //   submit: (testData) => API.post(\"/tests\", testData),\r\n// // //   getById: (id) => API.get(`/tests/${id}`),\r\n// // //   validate: (id, validationData) => API.put(`/tests/${id}/validate`, validationData),\r\n// // // };\r\n\r\n// // // // Combined API object\r\n// // // const combinedAPI = {\r\n// // //   ...API,\r\n// // //   adminAuth,\r\n// // //   questions,\r\n// // //   tests,\r\n// // // };\r\n\r\n// // // export default combinedAPI;\r\n"],"mappings":"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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}