{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Downloads\\\\INTERVIEW PROCESS\\\\INTERVIEW PROCESS\\\\client\\\\src\\\\pages\\\\TestPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport API from \"../services/api\";\nimport \"../styles/TestPage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TestPage() {\n  _s();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const {\n    fullName,\n    email\n  } = location.state || {};\n  const [questions, setQuestions] = useState([]);\n  const [answers, setAnswers] = useState({});\n  const [currentIdx, setCurrentIdx] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [submitted, setSubmitted] = useState(false);\n  const [score, setScore] = useState(0);\n  const [resultSaved, setResultSaved] = useState(false);\n  const [testEnded, setTestEnded] = useState(false);\n  const [testNotStarted, setTestNotStarted] = useState(false);\n  const [timeLeft, setTimeLeft] = useState(null);\n\n  // üß† Fetch test control first, then load questions\n  useEffect(() => {\n    if (!fullName || !email) {\n      navigate(\"/\");\n      return;\n    }\n    const initTest = async () => {\n      try {\n        var _questionRes$data;\n        // 1Ô∏è‚É£ Fetch test control (admin settings)\n        const controlRes = await API.testcontrol.get();\n        const control = controlRes.data;\n        if (!control || !control.isActive) {\n          setTestNotStarted(true);\n          setLoading(false);\n          return;\n        }\n\n        // 2Ô∏è‚É£ Now fetch questions only if test is active\n        const questionRes = await API.questions.getAll();\n        if ((_questionRes$data = questionRes.data) !== null && _questionRes$data !== void 0 && _questionRes$data.error) {\n          setTestNotStarted(true);\n          setLoading(false);\n          return;\n        }\n        const allQuestions = Array.isArray(questionRes.data.questions) ? questionRes.data.questions : [];\n        const limited = allQuestions.slice(0, control.questionLimit || allQuestions.length);\n        setQuestions(limited);\n        setTimeLeft((control.timeLimit || 10) * 60); // minutes ‚Üí seconds\n      } catch (err) {\n        console.error(\"‚ùå Error initializing test:\", err);\n        setTestNotStarted(true);\n      } finally {\n        setLoading(false);\n      }\n    };\n    initTest();\n  }, [fullName, email, navigate]);\n\n  // üïí Countdown\n  useEffect(() => {\n    if (timeLeft === null) return;\n    if (timeLeft <= 0) {\n      alert(\"‚è∞ Time‚Äôs up! Submitting your test automatically.\");\n      handleSubmit();\n      return;\n    }\n    const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n    return () => clearTimeout(timer);\n  }, [timeLeft]);\n\n  // üö´ Tab switch detection\n  useEffect(() => {\n    const handleBeforeUnload = e => {\n      e.preventDefault();\n      e.returnValue = \"\";\n      setTestEnded(true);\n    };\n    const handleVisibilityChange = () => {\n      if (document.hidden) setTestEnded(true);\n    };\n    window.addEventListener(\"beforeunload\", handleBeforeUnload);\n    document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n    return () => {\n      window.removeEventListener(\"beforeunload\", handleBeforeUnload);\n      document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n    };\n  }, []);\n  const handleSelect = (id, value) => {\n    setAnswers({\n      ...answers,\n      [id]: value\n    });\n  };\n  const goNext = () => currentIdx < questions.length - 1 && setCurrentIdx(currentIdx + 1);\n  const goPrev = () => currentIdx > 0 && setCurrentIdx(currentIdx - 1);\n  const handleSubmit = async () => {\n    if (submitted) return;\n    if (Object.keys(answers).length < questions.length) {\n      if (!window.confirm(\"Some questions are unanswered. Submit anyway?\")) return;\n    }\n    let s = 0;\n    questions.forEach(q => {\n      if (q.questionType === \"MCQ\" && answers[q._id] === q.correctAnswer) s++;\n    });\n    setScore(s);\n    setSubmitted(true);\n    const formattedAnswers = questions.map(q => ({\n      question: q.questionText,\n      userAnswer: answers[q._id] || \"Not answered\",\n      correctAnswer: q.correctAnswer || \"\",\n      isCorrect: q.questionType === \"MCQ\" ? answers[q._id] === q.correctAnswer : null,\n      type: q.questionType || \"Theory\"\n    }));\n    try {\n      await API.tests.submit({\n        name: fullName,\n        email,\n        answers: formattedAnswers,\n        totalQuestions: questions.length,\n        correctAnswers: s,\n        scorePercent: (s / questions.length * 100).toFixed(2)\n      });\n      setResultSaved(true);\n    } catch (err) {\n      console.error(\"Error saving result:\", err);\n      alert(\"Failed to save result to server.\");\n    }\n  };\n\n  // ‚õîÔ∏è If tab switched\n  if (testEnded) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container container-center text-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"text-danger\",\n      children: \"\\u26A0\\uFE0F Test Ended\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Your session ended because of a tab switch or reload.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary mt-3\",\n      onClick: () => navigate(\"/\"),\n      children: \"Go Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 7\n  }, this);\n\n  // ‚õîÔ∏è If test not started\n  if (testNotStarted) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container container-center text-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"text-warning\",\n      children: \"\\u26A0\\uFE0F Test Not Active\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please wait for admin to start the test.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary mt-3\",\n      onClick: () => navigate(\"/\"),\n      children: \"Back to Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 7\n  }, this);\n\n  // ‚è≥ Loading\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container container-center\",\n    children: \"Loading questions\\u2026\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 12\n  }, this);\n  if (!questions.length) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container container-center\",\n    children: \"No questions available.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 7\n  }, this);\n\n  // ‚úÖ Test UI\n  const currentQ = questions[currentIdx];\n  const selectedAnswer = answers[currentQ._id] || \"\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"test-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card test-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"text-danger fw-bold\",\n            children: [\"Candidate: \", fullName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n            className: \"text-muted\",\n            children: email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"badge bg-primary me-2\",\n            children: [\"Question \", currentIdx + 1, \" / \", questions.length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"badge bg-danger\",\n            children: [\"\\u23F3 \", Math.floor(timeLeft / 60), \":\", (timeLeft % 60).toString().padStart(2, \"0\")]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n          className: \"question-text\",\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: [\"Q\", currentIdx + 1, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 13\n          }, this), \" \", currentQ.questionText]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this), currentQ.questionType === \"MCQ\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"options-container\",\n          children: currentQ.options.map((opt, i) => /*#__PURE__*/_jsxDEV(\"label\", {\n            className: `option-item ${selectedAnswer === opt ? \"selected\" : \"\"}`,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: `question-${currentQ._id}`,\n              value: opt,\n              checked: selectedAnswer === opt,\n              onChange: e => handleSelect(currentQ._id, e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 19\n            }, this), opt]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"theory-input\",\n          placeholder: \"Type your answer...\",\n          value: selectedAnswer,\n          onChange: e => handleSelect(currentQ._id, e.target.value),\n          rows: 5\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test-footer d-flex justify-content-between\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-secondary me-2\",\n            onClick: goPrev,\n            disabled: currentIdx === 0,\n            children: \"Previous\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-secondary\",\n            onClick: goNext,\n            disabled: currentIdx === questions.length - 1,\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-success\",\n          onClick: handleSubmit,\n          children: \"Submit Test\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n}\n\n// import React, { useEffect, useState } from \"react\";\n// import { useLocation, useNavigate } from \"react-router-dom\";\n// import API from \"../services/api\";\n// import \"../styles/TestPage.css\";\n\n// export default function TestPage() {\n//   const location = useLocation();\n//   const navigate = useNavigate();\n//   const { fullName, email } = location.state || {};\n\n//   const [questions, setQuestions] = useState([]);\n//   const [answers, setAnswers] = useState({});\n//   const [currentIdx, setCurrentIdx] = useState(0);\n//   const [loading, setLoading] = useState(true);\n//   const [submitted, setSubmitted] = useState(false);\n//   const [score, setScore] = useState(0);\n//   const [resultSaved, setResultSaved] = useState(false);\n//   const [testEnded, setTestEnded] = useState(false);\n//   const [testNotStarted, setTestNotStarted] = useState(false);\n//   const [timeLeft, setTimeLeft] = useState(null);\n\n//   // üü¢ Fetch test control and questions only when test is active\n//   useEffect(() => {\n//     if (!fullName || !email) {\n//       navigate(\"/\");\n//       return;\n//     }\n\n//     const initTest = async () => {\n//       try {\n//         // 1Ô∏è‚É£ Fetch test control first\n//         const controlRes = await API.testcontrol.get();\n//         const control = controlRes.data;\n\n//         if (!control || !control.isActive) {\n//           setTestNotStarted(true);\n//           setLoading(false);\n//           return;\n//         }\n\n//         // 2Ô∏è‚É£ Fetch all questions\n//         const questionRes = await API.questions.getAll();\n//         const allQuestions = Array.isArray(questionRes.data)\n//           ? questionRes.data\n//           : [];\n\n//         // 3Ô∏è‚É£ Limit number of questions from admin config\n//         const limitedQuestions = allQuestions.slice(0, control.questionLimit || allQuestions.length);\n\n//         setQuestions(limitedQuestions);\n//         setTimeLeft((control.timeLimit || 10) * 60); // Convert minutes to seconds\n//       } catch (err) {\n//         console.error(\"‚ùå Error initializing test:\", err);\n//         setTestNotStarted(true);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     initTest();\n//   }, [fullName, email, navigate]);\n\n//   // üïí Countdown timer\n//   useEffect(() => {\n//     if (timeLeft === null) return;\n//     if (timeLeft <= 0) {\n//       alert(\"‚è∞ Time‚Äôs up! Submitting your test automatically.\");\n//       handleSubmit();\n//       return;\n//     }\n\n//     const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n//     return () => clearTimeout(timer);\n//   }, [timeLeft]);\n\n//   // üõë Detect tab switch, reload, or page exit\n//   useEffect(() => {\n//     const handleBeforeUnload = (e) => {\n//       e.preventDefault();\n//       e.returnValue = \"\";\n//       setTestEnded(true);\n//     };\n\n//     const handleVisibilityChange = () => {\n//       if (document.hidden) {\n//         setTestEnded(true);\n//       }\n//     };\n\n//     window.addEventListener(\"beforeunload\", handleBeforeUnload);\n//     document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n\n//     return () => {\n//       window.removeEventListener(\"beforeunload\", handleBeforeUnload);\n//       document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n//     };\n//   }, []);\n\n//   const handleSelect = (questionId, value) => {\n//     setAnswers({ ...answers, [questionId]: value });\n//   };\n\n//   const goNext = () => {\n//     if (currentIdx < questions.length - 1) setCurrentIdx(currentIdx + 1);\n//   };\n//   const goPrev = () => {\n//     if (currentIdx > 0) setCurrentIdx(currentIdx - 1);\n//   };\n\n//   const handleSubmit = async () => {\n//     if (submitted) return;\n//     if (Object.keys(answers).length < questions.length) {\n//       if (!window.confirm(\"Some questions are unanswered. Submit anyway?\")) return;\n//     }\n\n//     let s = 0;\n//     questions.forEach((q) => {\n//       if (q.questionType === \"MCQ\" && answers[q._id] === q.correctAnswer) s += 1;\n//     });\n//     setScore(s);\n//     setSubmitted(true);\n\n//     const formattedAnswers = questions.map((q) => ({\n//       question: q.questionText,\n//       userAnswer: answers[q._id] || \"Not answered\",\n//       correctAnswer: q.correctAnswer || \"\",\n//       isCorrect: q.questionType === \"MCQ\" ? answers[q._id] === q.correctAnswer : null,\n//       type: q.questionType || \"Theory\",\n//     }));\n\n//     try {\n//       await API.tests.submit({\n//         name: fullName,\n//         email,\n//         answers: formattedAnswers,\n//         totalQuestions: questions.length,\n//         correctAnswers: s,\n//         scorePercent: ((s / questions.length) * 100).toFixed(2),\n//       });\n//       setResultSaved(true);\n//     } catch (err) {\n//       console.error(\"Error saving result:\", err);\n//       alert(\"Failed to save result to server.\");\n//     }\n//   };\n\n//   // üõë If user switched tab or reloaded\n//   if (testEnded) {\n//     return (\n//       <div className=\"container container-center\">\n//         <div className=\"card card-clean p-4 text-center\">\n//           <h3 className=\"text-danger\">‚ö†Ô∏è Test Ended</h3>\n//           <p>Your session ended because you switched tabs or reloaded.</p>\n//           <button className=\"btn btn-primary mt-3\" onClick={() => navigate(\"/\")}>\n//             Go to Home\n//           </button>\n//         </div>\n//       </div>\n//     );\n//   }\n\n//   // üõë If test not started\n//   if (testNotStarted) {\n//     return (\n//       <div className=\"container container-center\">\n//         <div className=\"card card-clean p-4 text-center\">\n//           <h3 className=\"text-warning\">‚ö†Ô∏è Test Not Active</h3>\n//           <p>The test has not been started by admin yet.</p>\n//           <button className=\"btn btn-primary mt-3\" onClick={() => navigate(\"/\")}>\n//             Back to Home\n//           </button>\n//         </div>\n//       </div>\n//     );\n//   }\n\n//   // üü¢ Loading\n//   if (loading)\n//     return <div className=\"container container-center\">Loading questions‚Ä¶</div>;\n\n//   if (!questions || questions.length === 0)\n//     return <div className=\"container container-center\">No questions available.</div>;\n\n//   // üü¢ After submit\n//   if (submitted) {\n//     return (\n//       <div className=\"container container-center\">\n//         <div className=\"card card-clean p-4\">\n//           <h3 className=\"text-success\">‚úÖ Test Completed</h3>\n//           <p>\n//             <strong>{fullName}</strong> ({email})\n//           </p>\n//           <h4>\n//             Your Score: {score} / {questions.length}\n//           </h4>\n\n//           {resultSaved && (\n//             <div className=\"alert alert-success mt-2\">\n//               ‚úÖ Your result has been recorded successfully!\n//             </div>\n//           )}\n\n//           <hr />\n//           <h5>Review Answers</h5>\n//           <div>\n//             {questions.map((q, idx) => (\n//               <div className=\"review-question\" key={q._id}>\n//                 <b>Q{idx + 1}:</b> {q.questionText}\n//                 <div>\n//                   Your answer:{\" \"}\n//                   <span\n//                     className={\n//                       q.questionType === \"MCQ\"\n//                         ? answers[q._id] === q.correctAnswer\n//                           ? \"text-success\"\n//                           : \"text-danger\"\n//                         : \"text-primary\"\n//                     }\n//                   >\n//                     {answers[q._id] || \"Not answered\"}\n//                   </span>\n//                 </div>\n//                 {q.questionType === \"MCQ\" && (\n//                   <div>\n//                     Correct answer:{\" \"}\n//                     <span className=\"text-success\">{q.correctAnswer}</span>\n//                   </div>\n//                 )}\n//               </div>\n//             ))}\n//           </div>\n\n//           <div className=\"mt-4\">\n//             <button className=\"btn btn-primary me-2\" onClick={() => navigate(\"/\")}>\n//               Back to Home\n//             </button>\n//             <button\n//               className=\"btn btn-outline-secondary\"\n//               onClick={() => window.location.reload()}\n//             >\n//               Retake Test\n//             </button>\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n\n//   // üü¢ Active test page\n//   const currentQ = questions[currentIdx];\n//   const selectedAnswer = answers[currentQ._id] || \"\";\n\n//   return (\n//     <div className=\"test-container\">\n//       <div className=\"card test-card\">\n//         <div className=\"test-header\">\n//           <div>\n//             <h5 className=\"text-danger fw-bold\">Candidate: {fullName}</h5>\n//             <small className=\"text-muted\">{email}</small>\n//           </div>\n//           <div>\n//             <span className=\"badge bg-primary me-2\">\n//               Question {currentIdx + 1} / {questions.length}\n//             </span>\n//             <span className=\"badge bg-danger\">\n//               ‚è≥ {Math.floor(timeLeft / 60)}:\n//               {(timeLeft % 60).toString().padStart(2, \"0\")}\n//             </span>\n//           </div>\n//         </div>\n\n//         <div className=\"test-body\">\n//           <h6 className=\"question-text\">\n//             <b>Q{currentIdx + 1}:</b> {currentQ.questionText}\n//           </h6>\n\n//           {currentQ.questionType === \"MCQ\" && currentQ.options?.length > 0 ? (\n//             <div className=\"options-container\">\n//               {currentQ.options.map((opt, i) => (\n//                 <label\n//                   key={i}\n//                   className={`option-item ${\n//                     selectedAnswer === opt ? \"selected\" : \"\"\n//                   }`}\n//                 >\n//                   <input\n//                     type=\"radio\"\n//                     name={`question-${currentQ._id}`}\n//                     value={opt}\n//                     checked={selectedAnswer === opt}\n//                     onChange={(e) => handleSelect(currentQ._id, e.target.value)}\n//                   />\n//                   {opt}\n//                 </label>\n//               ))}\n//             </div>\n//           ) : (\n//             <textarea\n//               className=\"theory-input\"\n//               placeholder=\"Type your answer here...\"\n//               value={selectedAnswer}\n//               onChange={(e) => handleSelect(currentQ._id, e.target.value)}\n//               rows={5}\n//             ></textarea>\n//           )}\n//         </div>\n\n//         <div className=\"test-footer\">\n//           <div>\n//             <button\n//               className=\"btn btn-secondary me-3\"\n//               onClick={goPrev}\n//               disabled={currentIdx === 0}\n//             >\n//               Previous\n//             </button>\n//             <button\n//               className=\"btn btn-secondary\"\n//               onClick={goNext}\n//               disabled={currentIdx === questions.length - 1}\n//             >\n//               Next\n//             </button>\n//           </div>\n\n//           <div>\n//             <button className=\"btn btn-success\" onClick={handleSubmit}>\n//               Submit Test\n//             </button>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// // import React, { useEffect, useState } from \"react\";\n// // import { useLocation, useNavigate } from \"react-router-dom\";\n// // import API from \"../services/api\";\n// // import \"../styles/TestPage.css\";\n\n// // export default function TestPage() {\n// //   const location = useLocation();\n// //   const navigate = useNavigate();\n// //   const { fullName, email } = location.state || {};\n\n// //   const [questions, setQuestions] = useState([]);\n// //   const [answers, setAnswers] = useState({});\n// //   const [currentIdx, setCurrentIdx] = useState(0);\n// //   const [loading, setLoading] = useState(true);\n// //   const [submitted, setSubmitted] = useState(false);\n// //   const [score, setScore] = useState(0);\n// //   const [resultSaved, setResultSaved] = useState(false);\n// //   const [testEnded, setTestEnded] = useState(false);\n// //   const [testNotStarted, setTestNotStarted] = useState(false);\n// //   const [timeLeft, setTimeLeft] = useState(null);\n\n// //   // üü¢ Fetch questions only when test is active\n// //   useEffect(() => {\n// //     if (!fullName || !email) {\n// //       navigate(\"/\");\n// //       return;\n// //     }\n\n// //     const fetchQuestions = async () => {\n// //       try {\n// //         const res = await API.questions.getAll();\n\n// //         // üõë If test is not active\n// //         if (res.data?.error || !res.data?.isActive) {\n// //           setTestNotStarted(true);\n// //           setLoading(false);\n// //           return;\n// //         }\n\n// //         const questionsArray = Array.isArray(res.data)\n// //           ? res.data\n// //           : res.data.questions || [];\n\n// //         setQuestions(questionsArray);\n// //         setTimeLeft((res.data.timeLimit || 10) * 60); // Convert minutes ‚Üí seconds\n// //       } catch (err) {\n// //         console.error(err);\n// //         alert(\"Failed to fetch questions. Please wait for admin to start the test.\");\n// //         setTestNotStarted(true);\n// //       } finally {\n// //         setLoading(false);\n// //       }\n// //     };\n\n// //     fetchQuestions();\n// //   }, [fullName, email, navigate]);\n\n// //   // üïí Countdown timer\n// //   useEffect(() => {\n// //     if (timeLeft === null) return;\n// //     if (timeLeft <= 0) {\n// //       alert(\"‚è∞ Time‚Äôs up! Submitting your test automatically.\");\n// //       handleSubmit();\n// //       return;\n// //     }\n\n// //     const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n// //     return () => clearTimeout(timer);\n// //   }, [timeLeft]);\n\n// //   // üõë Detect tab switch, reload, or page exit\n// //   useEffect(() => {\n// //     const handleBeforeUnload = (e) => {\n// //       e.preventDefault();\n// //       e.returnValue = \"\";\n// //       setTestEnded(true);\n// //     };\n\n// //     const handleVisibilityChange = () => {\n// //       if (document.hidden) {\n// //         setTestEnded(true);\n// //       }\n// //     };\n\n// //     window.addEventListener(\"beforeunload\", handleBeforeUnload);\n// //     document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n\n// //     return () => {\n// //       window.removeEventListener(\"beforeunload\", handleBeforeUnload);\n// //       document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n// //     };\n// //   }, []);\n\n// //   // üü¢ Select answer\n// //   const handleSelect = (questionId, value) => {\n// //     setAnswers({ ...answers, [questionId]: value });\n// //   };\n\n// //   // üü¢ Navigation\n// //   const goNext = () => {\n// //     if (currentIdx < questions.length - 1) setCurrentIdx(currentIdx + 1);\n// //   };\n// //   const goPrev = () => {\n// //     if (currentIdx > 0) setCurrentIdx(currentIdx - 1);\n// //   };\n\n// //   // üü¢ Submit handler\n// //   const handleSubmit = async () => {\n// //     if (submitted) return; // Prevent multiple submits\n// //     if (Object.keys(answers).length < questions.length) {\n// //       if (!window.confirm(\"Some questions are unanswered. Submit anyway?\")) return;\n// //     }\n\n// //     // Calculate score (for MCQs only)\n// //     let s = 0;\n// //     questions.forEach((q) => {\n// //       if (q.questionType === \"MCQ\" && answers[q._id] === q.correctAnswer) s += 1;\n// //     });\n\n// //     setScore(s);\n// //     setSubmitted(true);\n\n// //     const formattedAnswers = questions.map((q) => ({\n// //       question: q.questionText,\n// //       userAnswer: answers[q._id] || \"Not answered\",\n// //       correctAnswer: q.correctAnswer || \"\",\n// //       isCorrect: q.questionType === \"MCQ\" ? answers[q._id] === q.correctAnswer : null,\n// //       type: q.questionType || \"Theory\",\n// //     }));\n\n// //     try {\n// //       await API.tests.submit({\n// //         name: fullName,\n// //         email,\n// //         answers: formattedAnswers,\n// //         totalQuestions: questions.length,\n// //         correctAnswers: s,\n// //         scorePercent: ((s / questions.length) * 100).toFixed(2),\n// //       });\n// //       setResultSaved(true);\n// //     } catch (err) {\n// //       console.error(\"Error saving result:\", err);\n// //       alert(\"Failed to save result to server.\");\n// //     }\n// //   };\n\n// //   // üõë If user switched tab or reloaded\n// //   if (testEnded) {\n// //     return (\n// //       <div className=\"container container-center\">\n// //         <div className=\"card card-clean p-4 text-center\">\n// //           <h3 className=\"text-danger\">‚ö†Ô∏è Test Ended</h3>\n// //           <p>Your session ended because you switched tabs, reloaded, or left the page.</p>\n// //           <h4 className=\"mt-3 text-success\">Thank you for your time!</h4>\n// //           <button className=\"btn btn-primary mt-3\" onClick={() => navigate(\"/\")}>\n// //             Go to Home\n// //           </button>\n// //         </div>\n// //       </div>\n// //     );\n// //   }\n\n// //   // üõë If test not started\n// //   if (testNotStarted) {\n// //     return (\n// //       <div className=\"container container-center\">\n// //         <div className=\"card card-clean p-4 text-center\">\n// //           <h3 className=\"text-warning\">‚ö†Ô∏è Test Not Active</h3>\n// //           <p>The test has not been started by admin yet.</p>\n// //           <h5 className=\"mt-2\">Please contact the administrator to begin your test.</h5>\n// //           <button className=\"btn btn-primary mt-3\" onClick={() => navigate(\"/\")}>\n// //             Back to Home\n// //           </button>\n// //         </div>\n// //       </div>\n// //     );\n// //   }\n\n// //   // üü¢ Loading\n// //   if (loading) return <div className=\"container container-center\">Loading questions‚Ä¶</div>;\n// //   if (!questions || questions.length === 0)\n// //     return <div className=\"container container-center\">No questions available. Please try later.</div>;\n\n// //   // üü¢ After submit (Review screen)\n// //   if (submitted) {\n// //     return (\n// //       <div className=\"container container-center\">\n// //         <div className=\"card card-clean p-4\">\n// //           <h3 className=\"text-success\">Test Completed Successfully</h3>\n// //           <p>\n// //             <strong>{fullName}</strong> ({email})\n// //           </p>\n// //           <h4>\n// //             Your Score: {score} / {questions.length}\n// //           </h4>\n\n// //           {resultSaved && (\n// //             <div className=\"alert alert-success mt-2\">\n// //               ‚úÖ Your result has been recorded successfully!\n// //             </div>\n// //           )}\n\n// //           <hr />\n// //           <h5>Review Answers</h5>\n// //           <div>\n// //             {questions.map((q, idx) => (\n// //               <div className=\"review-question\" key={q._id}>\n// //                 <b>Q{idx + 1}:</b> {q.questionText}\n// //                 <div>\n// //                   Your answer:{\" \"}\n// //                   <span\n// //                     className={\n// //                       q.questionType === \"MCQ\"\n// //                         ? answers[q._id] === q.correctAnswer\n// //                           ? \"text-success\"\n// //                           : \"text-danger\"\n// //                         : \"text-primary\"\n// //                     }\n// //                   >\n// //                     {answers[q._id] || \"Not answered\"}\n// //                   </span>\n// //                 </div>\n// //                 {q.questionType === \"MCQ\" && (\n// //                   <div>\n// //                     Correct answer:{\" \"}\n// //                     <span className=\"text-success\">{q.correctAnswer}</span>\n// //                   </div>\n// //                 )}\n// //               </div>\n// //             ))}\n// //           </div>\n\n// //           <div className=\"mt-4\">\n// //             <button className=\"btn btn-primary me-2\" onClick={() => navigate(\"/\")}>\n// //               Back to Home\n// //             </button>\n// //             <button className=\"btn btn-outline-secondary\" onClick={() => window.location.reload()}>\n// //               Retake Test\n// //             </button>\n// //           </div>\n// //         </div>\n// //       </div>\n// //     );\n// //   }\n\n// //   // üü¢ Active test page\n// //   const currentQ = questions[currentIdx];\n// //   const selectedAnswer = answers[currentQ._id] || \"\";\n\n// //   return (\n// //     <div className=\"test-container\">\n// //       <div className=\"card test-card\">\n// //         <div className=\"test-header\">\n// //           <div>\n// //             <h5 className=\"text-danger fw-bold\">Candidate: {fullName}</h5>\n// //             <small className=\"text-muted\">{email}</small>\n// //           </div>\n// //           <div>\n// //             <span className=\"badge bg-primary me-2\">\n// //               Question {currentIdx + 1} / {questions.length}\n// //             </span>\n// //             <span className=\"badge bg-danger\">\n// //               ‚è≥ {Math.floor(timeLeft / 60)}:\n// //               {(timeLeft % 60).toString().padStart(2, \"0\")}\n// //             </span>\n// //           </div>\n// //         </div>\n\n// //         <div className=\"test-body\">\n// //           <h6 className=\"question-text\">\n// //             <b>Q{currentIdx + 1}:</b> {currentQ.questionText}\n// //           </h6>\n\n// //           {currentQ.questionType === \"MCQ\" && currentQ.options?.length > 0 ? (\n// //             <div className=\"options-container\">\n// //               {currentQ.options.map((opt, i) => (\n// //                 <label\n// //                   key={i}\n// //                   className={`option-item ${\n// //                     selectedAnswer === opt ? \"selected\" : \"\"\n// //                   }`}\n// //                 >\n// //                   <input\n// //                     type=\"radio\"\n// //                     name={`question-${currentQ._id}`}\n// //                     value={opt}\n// //                     checked={selectedAnswer === opt}\n// //                     onChange={(e) => handleSelect(currentQ._id, e.target.value)}\n// //                   />\n// //                   {opt}\n// //                 </label>\n// //               ))}\n// //             </div>\n// //           ) : (\n// //             <textarea\n// //               className=\"theory-input\"\n// //               placeholder=\"Type your answer here...\"\n// //               value={selectedAnswer}\n// //               onChange={(e) => handleSelect(currentQ._id, e.target.value)}\n// //               rows={5}\n// //             ></textarea>\n// //           )}\n// //         </div>\n\n// //         <div className=\"test-footer\">\n// //           <div>\n// //             <button\n// //               className=\"btn btn-secondary me-3\"\n// //               onClick={goPrev}\n// //               disabled={currentIdx === 0}\n// //             >\n// //               Previous\n// //             </button>\n// //             <button\n// //               className=\"btn btn-secondary\"\n// //               onClick={goNext}\n// //               disabled={currentIdx === questions.length - 1}\n// //             >\n// //               Next\n// //             </button>\n// //           </div>\n\n// //           <div>\n// //             <button className=\"btn btn-success\" onClick={handleSubmit}>\n// //               Submit Test\n// //             </button>\n// //           </div>\n// //         </div>\n// //       </div>\n// //     </div>\n// //   );\n// // }\n\n// // import React, { useEffect, useState } from \"react\";\n// // import { useLocation, useNavigate } from \"react-router-dom\";\n// // import API from \"../services/api\";\n// // import \"../styles/TestPage.css\";\n\n// // function pickRandom(arr, n) {\n// //   const copy = [...arr];\n// //   const res = [];\n// //   while (res.length < n && copy.length > 0) {\n// //     const idx = Math.floor(Math.random() * copy.length);\n// //     res.push(copy.splice(idx, 1)[0]);\n// //   }\n// //   return res;\n// // }\n\n// // export default function TestPage() {\n// //   const location = useLocation();\n// //   const navigate = useNavigate();\n// //   const { fullName, email, numQ } = location.state || {};\n\n// //   const [allQuestions, setAllQuestions] = useState([]);\n// //   const [questions, setQuestions] = useState([]);\n// //   const [answers, setAnswers] = useState({});\n// //   const [currentIdx, setCurrentIdx] = useState(0);\n// //   const [loading, setLoading] = useState(true);\n// //   const [submitted, setSubmitted] = useState(false);\n// //   const [score, setScore] = useState(0);\n// //   const [resultSaved, setResultSaved] = useState(false);\n// //   const [testEnded, setTestEnded] = useState(false); // üÜï detect tab switch/reload\n// //   const [timeLeft, setTimeLeft] = useState(null);\n\n// //   // üü¢ Fetch questions\n// //   useEffect(() => {\n// //     if (!fullName || !email) {\n// //       navigate(\"/\");\n// //       return;\n// //     }\n\n// //     const fetchQuestions = async () => {\n// //   try {\n// //     const res = await API.questions.getAll();\n// //     if (res.data.error) {\n// //       alert(res.data.error);\n// //       navigate(\"/\");\n// //       return;\n// //     }\n\n// //     setQuestions(res.data.questions || []);\n// //     setTimeLeft(res.data.timeLimit * 60); // seconds\n// //   } catch (err) {\n// //     console.error(err);\n// //     alert(\"Failed to fetch questions. Please wait for admin to start the test.\");\n// //     navigate(\"/\");\n// //   } finally {\n// //     setLoading(false);\n// //   }\n// // };\n\n// //     fetchQuestions();\n// //   }, [fullName, email, navigate]);\n\n// //   // üü¢ Pick random questions\n// //   useEffect(() => {\n// //     if (!loading && allQuestions.length > 0) {\n// //       const selected = pickRandom(allQuestions, Math.min(numQ || 10, allQuestions.length));\n// //       setQuestions(selected);\n// //     }\n// //   }, [loading, allQuestions, numQ]);\n\n// //   // üõë Detect tab switch, reload, or page exit\n// //   useEffect(() => {\n// //     const handleBeforeUnload = (e) => {\n// //       e.preventDefault();\n// //       e.returnValue = \"\";\n// //       setTestEnded(true);\n// //     };\n\n// //     const handleVisibilityChange = () => {\n// //       if (document.hidden) {\n// //         setTestEnded(true);\n// //       }\n// //     };\n\n// //     window.addEventListener(\"beforeunload\", handleBeforeUnload);\n// //     document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n\n// //     return () => {\n// //       window.removeEventListener(\"beforeunload\", handleBeforeUnload);\n// //       document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n// //     };\n// //   }, []);\n\n// //   const handleSelect = (questionId, value) => {\n// //     setAnswers({ ...answers, [questionId]: value });\n// //   };\n\n// //   const goNext = () => {\n// //     if (currentIdx < questions.length - 1) setCurrentIdx(currentIdx + 1);\n// //   };\n// //   const goPrev = () => {\n// //     if (currentIdx > 0) setCurrentIdx(currentIdx - 1);\n// //   };\n\n// //   // üü¢ Submit handler\n// //   const handleSubmit = async () => {\n// //     if (Object.keys(answers).length < questions.length) {\n// //       if (!window.confirm(\"Some questions are unanswered. Submit anyway?\")) return;\n// //     }\n\n// //     // Calculate score only for MCQs\n// //     let s = 0;\n// //     questions.forEach((q) => {\n// //       if (q.questionType === \"MCQ\" && answers[q._id] === q.correctAnswer) s += 1;\n// //     });\n// //     setScore(s);\n// //     setSubmitted(true);\n\n// //     // Prepare formatted answers\n// //     const formattedAnswers = questions.map((q) => ({\n// //       question: q.questionText,\n// //       userAnswer: answers[q._id] || \"Not answered\",\n// //       correctAnswer: q.correctAnswer || \"\",\n// //       isCorrect: q.questionType === \"MCQ\" ? answers[q._id] === q.correctAnswer : null,\n// //       type: q.questionType || \"Theory\",\n// //     }));\n\n// //     try {\n// //       await API.tests.submit({\n// //         name: fullName,\n// //         email,\n// //         answers: formattedAnswers,\n// //         totalQuestions: questions.length,\n// //         correctAnswers: s,\n// //         scorePercent: ((s / questions.length) * 100).toFixed(2),\n// //       });\n// //       setResultSaved(true);\n// //     } catch (err) {\n// //       console.error(\"Error saving result:\", err);\n// //       alert(\"Failed to save result to server.\");\n// //     }\n// //   };\n\n// //   // üõë If test was ended (tab switch or reload)\n// //   if (testEnded) {\n// //     return (\n// //       <div className=\"container container-center\">\n// //         <div className=\"card card-clean p-4 text-center\">\n// //           <h3 className=\"text-danger\">‚ö†Ô∏è Test Ended</h3>\n// //           <p>Your test session has ended because you switched tabs, reloaded, or left the page.</p>\n// //           <h4 className=\"mt-3 text-success\">Thank you for your time!</h4>\n// //           <button\n// //             className=\"btn btn-primary mt-3\"\n// //             onClick={() => navigate(\"/\")}\n// //           >\n// //             Go to Home\n// //           </button>\n// //         </div>\n// //       </div>\n// //     );\n// //   }\n\n// //   if (loading) return <div className=\"container container-center\">Loading questions‚Ä¶</div>;\n// //   if (!questions || questions.length === 0)\n// //     return <div className=\"container container-center\">No questions available. Please try later.</div>;\n\n// //   if (submitted) {\n// //     return (\n// //       <div className=\"container container-center\">\n// //         <div className=\"card card-clean p-4\">\n// //           <h3 className=\"text-success\">Test Completed Successfully</h3>\n// //           <p><strong>{fullName}</strong> ({email})</p>\n// //           <h4>Your Score: {score} / {questions.length}</h4>\n\n// //           {resultSaved && (\n// //             <div className=\"alert alert-success mt-2\">\n// //               ‚úÖ Your result has been recorded successfully!\n// //             </div>\n// //           )}\n\n// //           <hr />\n// //           <h5>Review Answers</h5>\n// //           <div>\n// //             {questions.map((q, idx) => (\n// //               <div className=\"review-question\" key={q._id}>\n// //                 <b>Q{idx + 1}:</b> {q.questionText}\n// //                 <div>\n// //                   Your answer:{\" \"}\n// //                   <span\n// //                     className={\n// //                       q.questionType === \"MCQ\"\n// //                         ? answers[q._id] === q.correctAnswer\n// //                           ? \"text-success\"\n// //                           : \"text-danger\"\n// //                         : \"text-primary\"\n// //                     }\n// //                   >\n// //                     {answers[q._id] || \"Not answered\"}\n// //                   </span>\n// //                 </div>\n// //                 {q.questionType === \"MCQ\" && (\n// //                   <div>\n// //                     Correct answer:{\" \"}\n// //                     <span className=\"text-success\">{q.correctAnswer}</span>\n// //                   </div>\n// //                 )}\n// //               </div>\n// //             ))}\n// //           </div>\n\n// //           <div className=\"mt-4\">\n// //             <button className=\"btn btn-primary me-2\" onClick={() => navigate(\"/\")}>\n// //               Back to Home\n// //             </button>\n// //             <button className=\"btn btn-outline-secondary\" onClick={() => window.location.reload()}>\n// //               Retake Test\n// //             </button>\n// //           </div>\n// //         </div>\n// //       </div>\n// //     );\n// //   }\n\n// //   const currentQ = questions[currentIdx];\n// //   const selectedAnswer = answers[currentQ._id] || \"\";\n\n// //   return (\n// //     <div className=\"test-container\">\n// //       <div className=\"card test-card\">\n// //         <div className=\"test-header\">\n// //           <div>\n// //             <h5 className=\"text-danger fw-bold\">\n// //               Candidate: {fullName.toLowerCase()}\n// //             </h5>\n// //             <small className=\"text-muted\">{email}</small>\n// //           </div>\n// //           <div>\n// //             <span className=\"badge bg-primary\">\n// //               Question {currentIdx + 1} / {questions.length}\n// //             </span>\n// //           </div>\n// //         </div>\n\n// //         <div className=\"test-body\">\n// //           <h6 className=\"question-text\">\n// //             <b>Q{currentIdx + 1}:</b> {currentQ.questionText}\n// //           </h6>\n\n// //           {currentQ.questionType === \"MCQ\" && currentQ.options?.length > 0 ? (\n// //             <div className=\"options-container\">\n// //               {currentQ.options.map((opt, i) => (\n// //                 <label\n// //                   key={i}\n// //                   className={`option-item ${\n// //                     selectedAnswer === opt ? \"selected\" : \"\"\n// //                   }`}\n// //                 >\n// //                   <input\n// //                     type=\"radio\"\n// //                     name={`question-${currentQ._id}`}\n// //                     value={opt}\n// //                     checked={selectedAnswer === opt}\n// //                     onChange={(e) => handleSelect(currentQ._id, e.target.value)}\n// //                   />\n// //                   {opt}\n// //                 </label>\n// //               ))}\n// //             </div>\n// //           ) : (\n// //             <textarea\n// //               className=\"theory-input\"\n// //               placeholder=\"Type your answer here...\"\n// //               value={selectedAnswer}\n// //               onChange={(e) => handleSelect(currentQ._id, e.target.value)}\n// //               rows={5}\n// //             ></textarea>\n// //           )}\n// //         </div>\n\n// //         <div className=\"test-footer\">\n// //           <div>\n// //             <button\n// //               className=\"btn btn-secondary me-3\"\n// //               onClick={goPrev}\n// //               disabled={currentIdx === 0}\n// //             >\n// //               Previous\n// //             </button>\n// //             <button\n// //               className=\"btn btn-secondary\"\n// //               onClick={goNext}\n// //               disabled={currentIdx === questions.length - 1}\n// //             >\n// //               Next\n// //             </button>\n// //           </div>\n\n// //           <div>\n// //             <button className=\"btn btn-success\" onClick={handleSubmit}>\n// //               Submit Test\n// //             </button>\n// //           </div>\n// //         </div>\n// //       </div>\n// //     </div>\n// //   );\n// // }\n\n// // // import React, { useEffect, useState } from \"react\";\n// // // import { useLocation, useNavigate } from \"react-router-dom\";\n// // // import API from \"../services/api\";\n// // // import \"../styles/TestPage.css\";\n\n// // // function pickRandom(arr, n) {\n// // //   const copy = [...arr];\n// // //   const res = [];\n// // //   while (res.length < n && copy.length > 0) {\n// // //     const idx = Math.floor(Math.random() * copy.length);\n// // //     res.push(copy.splice(idx, 1)[0]);\n// // //   }\n// // //   return res;\n// // // }\n\n// // // export default function TestPage() {\n// // //   const location = useLocation();\n// // //   const navigate = useNavigate();\n// // //   const { fullName, email, numQ } = location.state || {};\n\n// // //   const [allQuestions, setAllQuestions] = useState([]);\n// // //   const [questions, setQuestions] = useState([]);\n// // //   const [answers, setAnswers] = useState({});\n// // //   const [currentIdx, setCurrentIdx] = useState(0);\n// // //   const [loading, setLoading] = useState(true);\n// // //   const [submitted, setSubmitted] = useState(false);\n// // //   const [score, setScore] = useState(0);\n// // //   const [resultSaved, setResultSaved] = useState(false);\n\n// // //   // üü¢ Fetch questions\n// // //   useEffect(() => {\n// // //     if (!fullName || !email) {\n// // //       navigate(\"/\");\n// // //       return;\n// // //     }\n\n// // //     const fetchQuestions = async () => {\n// // //       try {\n// // //         const res = await API.questions.getAll();\n// // //         setAllQuestions(res.data || []);\n// // //       } catch (err) {\n// // //         console.error(err);\n// // //         alert(\"Failed to fetch questions from server.\");\n// // //       } finally {\n// // //         setLoading(false);\n// // //       }\n// // //     };\n\n// // //     fetchQuestions();\n// // //   }, [fullName, email, navigate]);\n\n// // //   // üü¢ Pick random questions\n// // //   useEffect(() => {\n// // //     if (!loading && allQuestions.length > 0) {\n// // //       const selected = pickRandom(allQuestions, Math.min(numQ || 10, allQuestions.length));\n// // //       setQuestions(selected);\n// // //     }\n// // //   }, [loading, allQuestions, numQ]);\n\n// // //   const handleSelect = (questionId, value) => {\n// // //     setAnswers({ ...answers, [questionId]: value });\n// // //   };\n\n// // //   const goNext = () => {\n// // //     if (currentIdx < questions.length - 1) setCurrentIdx(currentIdx + 1);\n// // //   };\n// // //   const goPrev = () => {\n// // //     if (currentIdx > 0) setCurrentIdx(currentIdx - 1);\n// // //   };\n\n// // //   // üü¢ Submit handler\n// // //   const handleSubmit = async () => {\n// // //     if (Object.keys(answers).length < questions.length) {\n// // //       if (!window.confirm(\"Some questions are unanswered. Submit anyway?\")) return;\n// // //     }\n\n// // //     // Calculate score only for MCQs\n// // //     let s = 0;\n// // //     questions.forEach((q) => {\n// // //       if (q.questionType === \"MCQ\" && answers[q._id] === q.correctAnswer) s += 1;\n// // //     });\n// // //     setScore(s);\n// // //     setSubmitted(true);\n\n// // //     // Prepare formatted answers\n// // //     const formattedAnswers = questions.map((q) => ({\n// // //       question: q.questionText,\n// // //       userAnswer: answers[q._id] || \"Not answered\",\n// // //       correctAnswer: q.correctAnswer || \"\",\n// // //       isCorrect: q.questionType === \"MCQ\" ? answers[q._id] === q.correctAnswer : null,\n// // //       type: q.questionType || \"Theory\",\n// // //     }));\n\n// // //     try {\n// // //       await API.tests.submit({\n// // //         name: fullName,\n// // //         email,\n// // //         answers: formattedAnswers,\n// // //         totalQuestions: questions.length,\n// // //         correctAnswers: s,\n// // //         scorePercent: ((s / questions.length) * 100).toFixed(2),\n// // //       });\n// // //       setResultSaved(true);\n// // //     } catch (err) {\n// // //       console.error(\"Error saving result:\", err);\n// // //       alert(\"Failed to save result to server.\");\n// // //     }\n// // //   };\n\n// // //   if (loading) return <div className=\"container container-center\">Loading questions‚Ä¶</div>;\n// // //   if (!questions || questions.length === 0)\n// // //     return <div className=\"container container-center\">No questions available. Please try later.</div>;\n\n// // //   if (submitted) {\n// // //     return (\n// // //       <div className=\"container container-center\">\n// // //         <div className=\"card card-clean p-4\">\n// // //           <h3 className=\"text-success\">Test Completed Successfully</h3>\n// // //           <p><strong>{fullName}</strong> ({email})</p>\n// // //           <h4>Your Score: {score} / {questions.length}</h4>\n\n// // //           {resultSaved && (\n// // //             <div className=\"alert alert-success mt-2\">\n// // //               ‚úÖ Your result has been recorded successfully!\n// // //             </div>\n// // //           )}\n\n// // //           <hr />\n// // //           <h5>Review Answers</h5>\n// // //           <div>\n// // //             {questions.map((q, idx) => (\n// // //               <div className=\"review-question\" key={q._id}>\n// // //                 <b>Q{idx + 1}:</b> {q.questionText}\n// // //                 <div>\n// // //                   Your answer:{\" \"}\n// // //                   <span\n// // //                     className={\n// // //                       q.questionType === \"MCQ\"\n// // //                         ? answers[q._id] === q.correctAnswer\n// // //                           ? \"text-success\"\n// // //                           : \"text-danger\"\n// // //                         : \"text-primary\"\n// // //                     }\n// // //                   >\n// // //                     {answers[q._id] || \"Not answered\"}\n// // //                   </span>\n// // //                 </div>\n// // //                 {q.questionType === \"MCQ\" && (\n// // //                   <div>\n// // //                     Correct answer:{\" \"}\n// // //                     <span className=\"text-success\">{q.correctAnswer}</span>\n// // //                   </div>\n// // //                 )}\n// // //               </div>\n// // //             ))}\n// // //           </div>\n\n// // //           <div className=\"mt-4\">\n// // //             <button className=\"btn btn-primary me-2\" onClick={() => navigate(\"/\")}>\n// // //               Back to Home\n// // //             </button>\n// // //             <button className=\"btn btn-outline-secondary\" onClick={() => window.location.reload()}>\n// // //               Retake Test\n// // //             </button>\n// // //           </div>\n// // //         </div>\n// // //       </div>\n// // //     );\n// // //   }\n\n// // //   const currentQ = questions[currentIdx];\n// // //   const selectedAnswer = answers[currentQ._id] || \"\";\n\n// // //   return (\n// // //     <div className=\"test-container\">\n// // //       <div className=\"card test-card\">\n// // //         <div className=\"test-header\">\n// // //           <div>\n// // //             <h5 className=\"text-danger fw-bold\">\n// // //               Candidate: {fullName.toLowerCase()}\n// // //             </h5>\n// // //             <small className=\"text-muted\">{email}</small>\n// // //           </div>\n// // //           <div>\n// // //             <span className=\"badge bg-primary\">\n// // //               Question {currentIdx + 1} / {questions.length}\n// // //             </span>\n// // //           </div>\n// // //         </div>\n\n// // //         <div className=\"test-body\">\n// // //           <h6 className=\"question-text\">\n// // //              <b>Q{currentIdx + 1}:</b> {currentQ.questionText}\n// // //           </h6>\n\n// // //           {/* üß† Conditional rendering for MCQ / Theory */}\n// // //           {currentQ.questionType === \"MCQ\" && currentQ.options?.length > 0 ? (\n// // //             <div className=\"options-container\">\n// // //               {currentQ.options.map((opt, i) => (\n// // //                 <label\n// // //                   key={i}\n// // //                   className={`option-item ${\n// // //                     selectedAnswer === opt ? \"selected\" : \"\"\n// // //                   }`}\n// // //                 >\n// // //                   <input\n// // //                     type=\"radio\"\n// // //                     name={`question-${currentQ._id}`}\n// // //                     value={opt}\n// // //                     checked={selectedAnswer === opt}\n// // //                     onChange={(e) => handleSelect(currentQ._id, e.target.value)}\n// // //                   />\n// // //                   {opt}\n// // //                 </label>\n// // //               ))}\n// // //             </div>\n// // //           ) : (\n// // //             <textarea\n// // //               className=\"theory-input\"\n// // //               placeholder=\"Type your answer here...\"\n// // //               value={selectedAnswer}\n// // //               onChange={(e) => handleSelect(currentQ._id, e.target.value)}\n// // //               rows={5}\n// // //             ></textarea>\n// // //           )}\n// // //         </div>\n\n// // //         <div className=\"test-footer\">\n// // //           <div>\n// // //             <button\n// // //               className=\"btn btn-secondary me-3\"\n// // //               onClick={goPrev}\n// // //               disabled={currentIdx === 0}\n// // //             >\n// // //               Previous\n// // //             </button>\n// // //             <button\n// // //               className=\"btn btn-secondary\"\n// // //               onClick={goNext}\n// // //               disabled={currentIdx === questions.length - 1}\n// // //             >\n// // //               Next\n// // //             </button>\n// // //           </div>\n\n// // //           <div>\n// // //             {/* <button\n// // //               className=\"btn btn-danger me-2\"\n// // //               onClick={() => {\n// // //                 if (window.confirm(\"Are you sure you want to abandon this test?\"))\n// // //                   navigate(\"/\");\n// // //               }}\n// // //             >\n// // //               Abandon\n// // //             </button> */}\n// // //             <button className=\"btn btn-success\" onClick={handleSubmit}>\n// // //               Submit Test\n// // //             </button>\n// // //           </div>\n// // //         </div>\n// // //       </div>\n// // //     </div>\n// // //   );\n// // // }\n\n// // // import React, { useEffect, useState } from \"react\";\n// // // import { useLocation, useNavigate } from \"react-router-dom\";\n// // // import API from \"../services/api\";\n// // // import QuestionCard from \"../components/QuestionCard\";\n// // // import \"../styles/TestPage.css\";\n\n// // // function pickRandom(arr, n) {\n// // //   const copy = [...arr];\n// // //   const res = [];\n// // //   while (res.length < n && copy.length > 0) {\n// // //     const idx = Math.floor(Math.random() * copy.length);\n// // //     res.push(copy.splice(idx, 1)[0]);\n// // //   }\n// // //   return res;\n// // // }\n\n// // // export default function TestPage() {\n// // //   const location = useLocation();\n// // //   const navigate = useNavigate();\n// // //   const { fullName, email, numQ } = location.state || {};\n// // //   const [allQuestions, setAllQuestions] = useState([]);\n// // //   const [questions, setQuestions] = useState([]);\n// // //   const [answers, setAnswers] = useState({});\n// // //   const [currentIdx, setCurrentIdx] = useState(0);\n// // //   const [loading, setLoading] = useState(true);\n// // //   const [submitted, setSubmitted] = useState(false);\n// // //   const [score, setScore] = useState(0);\n// // //   const [resultSaved, setResultSaved] = useState(false);\n\n// // //   useEffect(() => {\n// // //     if (!fullName || !email) {\n// // //       navigate(\"/\");\n// // //       return;\n// // //     }\n\n// // //     const fetchQuestions = async () => {\n// // //       try {\n// // //         const res = await API.get(\"/questions\");\n// // //         setAllQuestions(res.data || []);\n// // //       } catch (err) {\n// // //         console.error(err);\n// // //         alert(\"Failed to fetch questions from server.\");\n// // //       } finally {\n// // //         setLoading(false);\n// // //       }\n// // //     };\n\n// // //     fetchQuestions();\n// // //   }, [fullName, email, navigate]);\n\n// // //   useEffect(() => {\n// // //     if (!loading && allQuestions.length > 0) {\n// // //       const selected = pickRandom(allQuestions, Math.min(numQ || 10, allQuestions.length));\n// // //       setQuestions(selected);\n// // //     }\n// // //   }, [loading, allQuestions, numQ]);\n\n// // //   const handleSelect = (opt) => {\n// // //     const q = questions[currentIdx];\n// // //     setAnswers({ ...answers, [q._id]: opt });\n// // //   };\n\n// // //   const goNext = () => {\n// // //     if (currentIdx < questions.length - 1) setCurrentIdx(currentIdx + 1);\n// // //   };\n// // //   const goPrev = () => {\n// // //     if (currentIdx > 0) setCurrentIdx(currentIdx - 1);\n// // //   };\n\n// // //   const handleSubmit = async () => {\n// // //     if (Object.keys(answers).length < questions.length) {\n// // //       if (!window.confirm(\"Some questions are unanswered. Submit anyway?\")) return;\n// // //     }\n\n// // //     // calculate score\n// // //     let s = 0;\n// // //     questions.forEach((q) => {\n// // //       if (answers[q._id] && answers[q._id] === q.correctAnswer) s += 1;\n// // //     });\n// // //     setScore(s);\n// // //     setSubmitted(true);\n\n// // //     // format answers for backend\n// // //     const formattedAnswers = questions.map((q) => ({\n// // //       question: q.questionText,\n// // //       userAnswer: answers[q._id] || \"Not answered\",\n// // //       correctAnswer: q.correctAnswer,\n// // //       isCorrect: answers[q._id] === q.correctAnswer,\n// // //     }));\n\n// // //     try {\n// // //       await API.post(\"/tests\", {\n// // //         name: fullName,\n// // //         email,\n// // //         answers: formattedAnswers,\n// // //       });\n// // //       setResultSaved(true);\n// // //     } catch (err) {\n// // //       console.error(\"Error saving result:\", err);\n// // //       alert(\"Failed to save result to server.\");\n// // //     }\n// // //   };\n\n// // //   if (loading) return <div className=\"container container-center\">Loading questions‚Ä¶</div>;\n// // //   if (!questions || questions.length === 0)\n// // //     return <div className=\"container container-center\">No questions available. Please try later.</div>;\n\n// // //   if (submitted) {\n// // //     return (\n// // //       <div className=\"container container-center\">\n// // //         <div className=\"card card-clean p-4\">\n// // //           <h3 className=\"text-success\">Test Completed Successfully</h3>\n// // //           <p><strong>{fullName}</strong> ({email})</p>\n// // //           <h4>Your Score: {score} / {questions.length}</h4>\n\n// // //           {resultSaved && (\n// // //             <div className=\"alert alert-success mt-2\">\n// // //               ‚úÖ Your result has been recorded successfully!\n// // //             </div>\n// // //           )}\n\n// // //           <hr />\n// // //           <h5>Review Answers</h5>\n// // //           <div>\n// // //             {questions.map((q, idx) => (\n// // //               <div className=\"mb-3\" key={q._id}>\n// // //                 <b>Q{idx + 1}:</b> {q.questionText}\n// // //                 <div>\n// // //                   Your answer:{\" \"}\n// // //                   <span\n// // //                     className={\n// // //                       answers[q._id] === q.correctAnswer\n// // //                         ? \"text-success\"\n// // //                         : \"text-danger\"\n// // //                     }\n// // //                   >\n// // //                     {answers[q._id] || \"Not answered\"}\n// // //                   </span>\n// // //                 </div>\n// // //                 <div>\n// // //                   Correct answer:{\" \"}\n// // //                   <span className=\"text-success\">{q.correctAnswer}</span>\n// // //                 </div>\n// // //               </div>\n// // //             ))}\n// // //           </div>\n\n// // //           <div className=\"mt-3\">\n// // //             <button className=\"btn btn-primary me-2\" onClick={() => navigate(\"/\")}>\n// // //               Back to Home\n// // //             </button>\n// // //             <button className=\"btn btn-outline-secondary\" onClick={() => window.location.reload()}>\n// // //               Retake Test\n// // //             </button>\n// // //           </div>\n// // //         </div>\n// // //       </div>\n// // //     );\n// // //   }\n\n// // //   const currentQ = questions[currentIdx];\n// // //   const selectedForCurrent = answers[currentQ._id];\n\n// // //   return (\n// // //     <div className=\"container container-center\">\n// // //       <div className=\"card card-clean p-4\">\n// // //         <div className=\"d-flex justify-content-between align-items-start\">\n// // //           <div>\n// // //             <h5 className=\"mb-0\">Candidate: {fullName}</h5>\n// // //             <small className=\"text-muted\">{email}</small>\n// // //           </div>\n// // //           <div>\n// // //             <span className=\"badge bg-primary\">\n// // //               Question {currentIdx + 1} / {questions.length}\n// // //             </span>\n// // //           </div>\n// // //         </div>\n\n// // //         <div className=\"mt-4\">\n// // //           <QuestionCard\n// // //             question={currentQ}\n// // //             selectedAnswer={selectedForCurrent}\n// // //             onSelect={handleSelect}\n// // //           />\n// // //         </div>\n\n// // //         <div className=\"mt-3 d-flex justify-content-between\">\n// // //           <div>\n// // //             <button\n// // //               className=\"btn btn-secondary me-2\"\n// // //               onClick={goPrev}\n// // //               disabled={currentIdx === 0}\n// // //             >\n// // //               Previous\n// // //             </button>\n// // //             <button\n// // //               className=\"btn btn-secondary\"\n// // //               onClick={goNext}\n// // //               disabled={currentIdx === questions.length - 1}\n// // //             >\n// // //               Next\n// // //             </button>\n// // //           </div>\n\n// // //           <div>\n// // //             <button\n// // //               className=\"btn btn-danger me-2\"\n// // //               onClick={() => {\n// // //                 if (window.confirm(\"Are you sure you want to abandon this test?\"))\n// // //                   navigate(\"/\");\n// // //               }}\n// // //             >\n// // //               Abandon\n// // //             </button>\n\n// // //             <button className=\"btn btn-success\" onClick={handleSubmit}>\n// // //               Submit Test\n// // //             </button>\n// // //           </div>\n// // //         </div>\n// // //       </div>\n// // //     </div>\n// // //   );\n// // // }\n\n// // // // import React, { useEffect, useState } from \"react\";\n// // // // import { useLocation, useNavigate } from \"react-router-dom\";\n// // // // import API from \"../services/api\";\n// // // // import QuestionCard from \"../components/QuestionCard\";\n// // // // import \"../styles/TestPage.css\";\n\n// // // // function pickRandom(arr, n) {\n// // // //   const copy = [...arr];\n// // // //   const res = [];\n// // // //   while (res.length < n && copy.length > 0) {\n// // // //     const idx = Math.floor(Math.random() * copy.length);\n// // // //     res.push(copy.splice(idx, 1)[0]);\n// // // //   }\n// // // //   return res;\n// // // // }\n\n// // // // export default function TestPage() {\n// // // //   const location = useLocation();\n// // // //   const navigate = useNavigate();\n// // // //   const { fullName, email, numQ } = location.state || {};\n// // // //   const [allQuestions, setAllQuestions] = useState([]);\n// // // //   const [questions, setQuestions] = useState([]);\n// // // //   const [answers, setAnswers] = useState({}); // { questionId: selectedOption }\n// // // //   const [currentIdx, setCurrentIdx] = useState(0);\n// // // //   const [loading, setLoading] = useState(true);\n// // // //   const [submitted, setSubmitted] = useState(false);\n// // // //   const [score, setScore] = useState(0);\n\n// // // //   useEffect(() => {\n// // // //     if (!fullName || !email) {\n// // // //       // if page opened without details -> back to home\n// // // //       navigate(\"/\");\n// // // //       return;\n// // // //     }\n\n// // // //     const fetchQuestions = async () => {\n// // // //       try {\n// // // //         const res = await API.get(\"/questions\");\n// // // //         setAllQuestions(res.data || []);\n// // // //       } catch (err) {\n// // // //         console.error(err);\n// // // //         alert(\"Failed to fetch questions from server.\");\n// // // //       } finally {\n// // // //         setLoading(false);\n// // // //       }\n// // // //     };\n\n// // // //     fetchQuestions();\n// // // //   }, [fullName, email, navigate]);\n\n// // // //   useEffect(() => {\n// // // //     if (!loading && allQuestions.length > 0) {\n// // // //       const chunk = pickRandom(allQuestions, Math.min(numQ || 10, allQuestions.length));\n// // // //       setQuestions(chunk);\n// // // //     }\n// // // //   }, [loading, allQuestions, numQ]);\n\n// // // //   const handleSelect = (opt) => {\n// // // //     const q = questions[currentIdx];\n// // // //     setAnswers({ ...answers, [q._id]: opt });\n// // // //   };\n\n// // // //   const goNext = () => {\n// // // //     if (currentIdx < questions.length - 1) setCurrentIdx(currentIdx + 1);\n// // // //   };\n// // // //   const goPrev = () => {\n// // // //     if (currentIdx > 0) setCurrentIdx(currentIdx - 1);\n// // // //   };\n\n// // // //   const handleSubmit = () => {\n// // // //     // ensure all answered\n// // // //     if (Object.keys(answers).length < questions.length) {\n// // // //       if (!window.confirm(\"Some questions are unanswered. Submit anyway?\")) return;\n// // // //     }\n\n// // // //     // compute score\n// // // //     let s = 0;\n// // // //     questions.forEach((q) => {\n// // // //       if (answers[q._id] && answers[q._id] === q.correctAnswer) s += 1;\n// // // //     });\n// // // //     setScore(s);\n// // // //     setSubmitted(true);\n// // // //   };\n\n// // // //   if (loading) return <div className=\"container container-center\">Loading questions‚Ä¶</div>;\n// // // //   if (!questions || questions.length === 0) return <div className=\"container container-center\">No questions available. Please try later.</div>;\n\n// // // //   if (submitted) {\n// // // //     return (\n// // // //       <div className=\"container container-center\">\n// // // //         <div className=\"card card-clean p-4\">\n// // // //           <h3>Test Completed</h3>\n// // // //           <p><strong>{fullName}</strong> ({email})</p>\n// // // //           <h4>Your score: {score} out of {questions.length}</h4>\n// // // //           <hr />\n// // // //           <h5>Review</h5>\n// // // //           <div>\n// // // //             {questions.map((q, idx) => (\n// // // //               <div className=\"mb-3\" key={q._id}>\n// // // //                 <b>Q{idx + 1}:</b> {q.questionText}\n// // // //                 <div>Your answer: <span className={answers[q._id] === q.correctAnswer ? \"text-success\" : \"text-danger\"}>{answers[q._id] || \"Not answered\"}</span></div>\n// // // //                 <div>Correct answer: <span className=\"text-success\">{q.correctAnswer}</span></div>\n// // // //               </div>\n// // // //             ))}\n// // // //           </div>\n\n// // // //           <div className=\"mt-3\">\n// // // //             <button className=\"btn btn-primary me-2\" onClick={() => navigate(\"/\")}>Back to Home</button>\n// // // //             <button className=\"btn btn-outline-secondary\" onClick={() => window.location.reload()}>Take New Test</button>\n// // // //           </div>\n// // // //         </div>\n// // // //       </div>\n// // // //     );\n// // // //   }\n\n// // // //   const currentQ = questions[currentIdx];\n// // // //   const selectedForCurrent = answers[currentQ._id];\n\n// // // //   return (\n// // // //     <div className=\"container container-center\">\n// // // //       <div className=\"card card-clean p-4\">\n// // // //         <div className=\"d-flex justify-content-between align-items-start\">\n// // // //           <div>\n// // // //             <h5 className=\"mb-0\">Candidate: {fullName}</h5>\n// // // //             <small className=\"text-muted\">{email}</small>\n// // // //           </div>\n// // // //           <div>\n// // // //             <span className=\"badge bg-primary\">Question {currentIdx + 1} / {questions.length}</span>\n// // // //           </div>\n// // // //         </div>\n\n// // // //         <div className=\"mt-4\">\n// // // //           <QuestionCard question={currentQ} selectedAnswer={selectedForCurrent} onSelect={handleSelect} />\n// // // //         </div>\n\n// // // //         <div className=\"mt-3 d-flex justify-content-between\">\n// // // //           <div>\n// // // //             <button className=\"btn btn-secondary me-2\" onClick={goPrev} disabled={currentIdx === 0}>Previous</button>\n// // // //             <button className=\"btn btn-secondary\" onClick={goNext} disabled={currentIdx === questions.length - 1}>Next</button>\n// // // //           </div>\n\n// // // //           <div>\n// // // //             <button className=\"btn btn-danger me-2\" onClick={() => {\n// // // //               if (window.confirm(\"Are you sure you want to abandon this test?\")) navigate(\"/\");\n// // // //             }}>Abandon</button>\n\n// // // //             <button className=\"btn btn-success\" onClick={handleSubmit}>Submit Test</button>\n// // // //           </div>\n// // // //         </div>\n// // // //       </div>\n// // // //     </div>\n// // // //   );\n// // // // }\n_s(TestPage, \"Ylksd7z7Z9qiSMWGUMCXltKXFm4=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = TestPage;\nvar _c;\n$RefreshReg$(_c, \"TestPage\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","useNavigate","API","jsxDEV","_jsxDEV","TestPage","_s","location","navigate","fullName","email","state","questions","setQuestions","answers","setAnswers","currentIdx","setCurrentIdx","loading","setLoading","submitted","setSubmitted","score","setScore","resultSaved","setResultSaved","testEnded","setTestEnded","testNotStarted","setTestNotStarted","timeLeft","setTimeLeft","initTest","_questionRes$data","controlRes","testcontrol","get","control","data","isActive","questionRes","getAll","error","allQuestions","Array","isArray","limited","slice","questionLimit","length","timeLimit","err","console","alert","handleSubmit","timer","setTimeout","clearTimeout","handleBeforeUnload","e","preventDefault","returnValue","handleVisibilityChange","document","hidden","window","addEventListener","removeEventListener","handleSelect","id","value","goNext","goPrev","Object","keys","confirm","s","forEach","q","questionType","_id","correctAnswer","formattedAnswers","map","question","questionText","userAnswer","isCorrect","type","tests","submit","name","totalQuestions","correctAnswers","scorePercent","toFixed","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","currentQ","selectedAnswer","Math","floor","toString","padStart","options","opt","i","checked","onChange","target","placeholder","rows","disabled","_c","$RefreshReg$"],"sources":["C:/Users/HP/Downloads/INTERVIEW PROCESS/INTERVIEW PROCESS/client/src/pages/TestPage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport API from \"../services/api\";\r\nimport \"../styles/TestPage.css\";\r\n\r\nexport default function TestPage() {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const { fullName, email } = location.state || {};\r\n\r\n  const [questions, setQuestions] = useState([]);\r\n  const [answers, setAnswers] = useState({});\r\n  const [currentIdx, setCurrentIdx] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [resultSaved, setResultSaved] = useState(false);\r\n  const [testEnded, setTestEnded] = useState(false);\r\n  const [testNotStarted, setTestNotStarted] = useState(false);\r\n  const [timeLeft, setTimeLeft] = useState(null);\r\n\r\n  // üß† Fetch test control first, then load questions\r\n  useEffect(() => {\r\n    if (!fullName || !email) {\r\n      navigate(\"/\");\r\n      return;\r\n    }\r\n\r\n    const initTest = async () => {\r\n      try {\r\n        // 1Ô∏è‚É£ Fetch test control (admin settings)\r\n        const controlRes = await API.testcontrol.get();\r\n        const control = controlRes.data;\r\n\r\n        if (!control || !control.isActive) {\r\n          setTestNotStarted(true);\r\n          setLoading(false);\r\n          return;\r\n        }\r\n\r\n        // 2Ô∏è‚É£ Now fetch questions only if test is active\r\n        const questionRes = await API.questions.getAll();\r\n        if (questionRes.data?.error) {\r\n          setTestNotStarted(true);\r\n          setLoading(false);\r\n          return;\r\n        }\r\n\r\n        const allQuestions = Array.isArray(questionRes.data.questions)\r\n          ? questionRes.data.questions\r\n          : [];\r\n\r\n        const limited = allQuestions.slice(0, control.questionLimit || allQuestions.length);\r\n\r\n        setQuestions(limited);\r\n        setTimeLeft((control.timeLimit || 10) * 60); // minutes ‚Üí seconds\r\n      } catch (err) {\r\n        console.error(\"‚ùå Error initializing test:\", err);\r\n        setTestNotStarted(true);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    initTest();\r\n  }, [fullName, email, navigate]);\r\n\r\n  // üïí Countdown\r\n  useEffect(() => {\r\n    if (timeLeft === null) return;\r\n    if (timeLeft <= 0) {\r\n      alert(\"‚è∞ Time‚Äôs up! Submitting your test automatically.\");\r\n      handleSubmit();\r\n      return;\r\n    }\r\n\r\n    const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r\n    return () => clearTimeout(timer);\r\n  }, [timeLeft]);\r\n\r\n  // üö´ Tab switch detection\r\n  useEffect(() => {\r\n    const handleBeforeUnload = (e) => {\r\n      e.preventDefault();\r\n      e.returnValue = \"\";\r\n      setTestEnded(true);\r\n    };\r\n    const handleVisibilityChange = () => {\r\n      if (document.hidden) setTestEnded(true);\r\n    };\r\n    window.addEventListener(\"beforeunload\", handleBeforeUnload);\r\n    document.addEventListener(\"visibilitychange\", handleVisibilityChange);\r\n    return () => {\r\n      window.removeEventListener(\"beforeunload\", handleBeforeUnload);\r\n      document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\r\n    };\r\n  }, []);\r\n\r\n  const handleSelect = (id, value) => {\r\n    setAnswers({ ...answers, [id]: value });\r\n  };\r\n\r\n  const goNext = () => currentIdx < questions.length - 1 && setCurrentIdx(currentIdx + 1);\r\n  const goPrev = () => currentIdx > 0 && setCurrentIdx(currentIdx - 1);\r\n\r\n  const handleSubmit = async () => {\r\n    if (submitted) return;\r\n    if (Object.keys(answers).length < questions.length) {\r\n      if (!window.confirm(\"Some questions are unanswered. Submit anyway?\")) return;\r\n    }\r\n\r\n    let s = 0;\r\n    questions.forEach((q) => {\r\n      if (q.questionType === \"MCQ\" && answers[q._id] === q.correctAnswer) s++;\r\n    });\r\n    setScore(s);\r\n    setSubmitted(true);\r\n\r\n    const formattedAnswers = questions.map((q) => ({\r\n      question: q.questionText,\r\n      userAnswer: answers[q._id] || \"Not answered\",\r\n      correctAnswer: q.correctAnswer || \"\",\r\n      isCorrect: q.questionType === \"MCQ\" ? answers[q._id] === q.correctAnswer : null,\r\n      type: q.questionType || \"Theory\",\r\n    }));\r\n\r\n    try {\r\n      await API.tests.submit({\r\n        name: fullName,\r\n        email,\r\n        answers: formattedAnswers,\r\n        totalQuestions: questions.length,\r\n        correctAnswers: s,\r\n        scorePercent: ((s / questions.length) * 100).toFixed(2),\r\n      });\r\n      setResultSaved(true);\r\n    } catch (err) {\r\n      console.error(\"Error saving result:\", err);\r\n      alert(\"Failed to save result to server.\");\r\n    }\r\n  };\r\n\r\n  // ‚õîÔ∏è If tab switched\r\n  if (testEnded)\r\n    return (\r\n      <div className=\"container container-center text-center\">\r\n        <h3 className=\"text-danger\">‚ö†Ô∏è Test Ended</h3>\r\n        <p>Your session ended because of a tab switch or reload.</p>\r\n        <button className=\"btn btn-primary mt-3\" onClick={() => navigate(\"/\")}>\r\n          Go Home\r\n        </button>\r\n      </div>\r\n    );\r\n\r\n  // ‚õîÔ∏è If test not started\r\n  if (testNotStarted)\r\n    return (\r\n      <div className=\"container container-center text-center\">\r\n        <h3 className=\"text-warning\">‚ö†Ô∏è Test Not Active</h3>\r\n        <p>Please wait for admin to start the test.</p>\r\n        <button className=\"btn btn-primary mt-3\" onClick={() => navigate(\"/\")}>\r\n          Back to Home\r\n        </button>\r\n      </div>\r\n    );\r\n\r\n  // ‚è≥ Loading\r\n  if (loading)\r\n    return <div className=\"container container-center\">Loading questions‚Ä¶</div>;\r\n\r\n  if (!questions.length)\r\n    return (\r\n      <div className=\"container container-center\">No questions available.</div>\r\n    );\r\n\r\n  // ‚úÖ Test UI\r\n  const currentQ = questions[currentIdx];\r\n  const selectedAnswer = answers[currentQ._id] || \"\";\r\n\r\n  return (\r\n    <div className=\"test-container\">\r\n      <div className=\"card test-card\">\r\n        <div className=\"test-header\">\r\n          <div>\r\n            <h5 className=\"text-danger fw-bold\">Candidate: {fullName}</h5>\r\n            <small className=\"text-muted\">{email}</small>\r\n          </div>\r\n          <div>\r\n            <span className=\"badge bg-primary me-2\">\r\n              Question {currentIdx + 1} / {questions.length}\r\n            </span>\r\n            <span className=\"badge bg-danger\">\r\n              ‚è≥ {Math.floor(timeLeft / 60)}:\r\n              {(timeLeft % 60).toString().padStart(2, \"0\")}\r\n            </span>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"test-body\">\r\n          <h6 className=\"question-text\">\r\n            <b>Q{currentIdx + 1}:</b> {currentQ.questionText}\r\n          </h6>\r\n\r\n          {currentQ.questionType === \"MCQ\" ? (\r\n            <div className=\"options-container\">\r\n              {currentQ.options.map((opt, i) => (\r\n                <label\r\n                  key={i}\r\n                  className={`option-item ${\r\n                    selectedAnswer === opt ? \"selected\" : \"\"\r\n                  }`}\r\n                >\r\n                  <input\r\n                    type=\"radio\"\r\n                    name={`question-${currentQ._id}`}\r\n                    value={opt}\r\n                    checked={selectedAnswer === opt}\r\n                    onChange={(e) => handleSelect(currentQ._id, e.target.value)}\r\n                  />\r\n                  {opt}\r\n                </label>\r\n              ))}\r\n            </div>\r\n          ) : (\r\n            <textarea\r\n              className=\"theory-input\"\r\n              placeholder=\"Type your answer...\"\r\n              value={selectedAnswer}\r\n              onChange={(e) => handleSelect(currentQ._id, e.target.value)}\r\n              rows={5}\r\n            ></textarea>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"test-footer d-flex justify-content-between\">\r\n          <div>\r\n            <button\r\n              className=\"btn btn-secondary me-2\"\r\n              onClick={goPrev}\r\n              disabled={currentIdx === 0}\r\n            >\r\n              Previous\r\n            </button>\r\n            <button\r\n              className=\"btn btn-secondary\"\r\n              onClick={goNext}\r\n              disabled={currentIdx === questions.length - 1}\r\n            >\r\n              Next\r\n            </button>\r\n          </div>\r\n          <button className=\"btn btn-success\" onClick={handleSubmit}>\r\n            Submit Test\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { useLocation, useNavigate } from \"react-router-dom\";\r\n// import API from \"../services/api\";\r\n// import \"../styles/TestPage.css\";\r\n\r\n// export default function TestPage() {\r\n//   const location = useLocation();\r\n//   const navigate = useNavigate();\r\n//   const { fullName, email } = location.state || {};\r\n\r\n//   const [questions, setQuestions] = useState([]);\r\n//   const [answers, setAnswers] = useState({});\r\n//   const [currentIdx, setCurrentIdx] = useState(0);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [submitted, setSubmitted] = useState(false);\r\n//   const [score, setScore] = useState(0);\r\n//   const [resultSaved, setResultSaved] = useState(false);\r\n//   const [testEnded, setTestEnded] = useState(false);\r\n//   const [testNotStarted, setTestNotStarted] = useState(false);\r\n//   const [timeLeft, setTimeLeft] = useState(null);\r\n\r\n//   // üü¢ Fetch test control and questions only when test is active\r\n//   useEffect(() => {\r\n//     if (!fullName || !email) {\r\n//       navigate(\"/\");\r\n//       return;\r\n//     }\r\n\r\n//     const initTest = async () => {\r\n//       try {\r\n//         // 1Ô∏è‚É£ Fetch test control first\r\n//         const controlRes = await API.testcontrol.get();\r\n//         const control = controlRes.data;\r\n\r\n//         if (!control || !control.isActive) {\r\n//           setTestNotStarted(true);\r\n//           setLoading(false);\r\n//           return;\r\n//         }\r\n\r\n//         // 2Ô∏è‚É£ Fetch all questions\r\n//         const questionRes = await API.questions.getAll();\r\n//         const allQuestions = Array.isArray(questionRes.data)\r\n//           ? questionRes.data\r\n//           : [];\r\n\r\n//         // 3Ô∏è‚É£ Limit number of questions from admin config\r\n//         const limitedQuestions = allQuestions.slice(0, control.questionLimit || allQuestions.length);\r\n\r\n//         setQuestions(limitedQuestions);\r\n//         setTimeLeft((control.timeLimit || 10) * 60); // Convert minutes to seconds\r\n//       } catch (err) {\r\n//         console.error(\"‚ùå Error initializing test:\", err);\r\n//         setTestNotStarted(true);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     initTest();\r\n//   }, [fullName, email, navigate]);\r\n\r\n//   // üïí Countdown timer\r\n//   useEffect(() => {\r\n//     if (timeLeft === null) return;\r\n//     if (timeLeft <= 0) {\r\n//       alert(\"‚è∞ Time‚Äôs up! Submitting your test automatically.\");\r\n//       handleSubmit();\r\n//       return;\r\n//     }\r\n\r\n//     const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r\n//     return () => clearTimeout(timer);\r\n//   }, [timeLeft]);\r\n\r\n//   // üõë Detect tab switch, reload, or page exit\r\n//   useEffect(() => {\r\n//     const handleBeforeUnload = (e) => {\r\n//       e.preventDefault();\r\n//       e.returnValue = \"\";\r\n//       setTestEnded(true);\r\n//     };\r\n\r\n//     const handleVisibilityChange = () => {\r\n//       if (document.hidden) {\r\n//         setTestEnded(true);\r\n//       }\r\n//     };\r\n\r\n//     window.addEventListener(\"beforeunload\", handleBeforeUnload);\r\n//     document.addEventListener(\"visibilitychange\", handleVisibilityChange);\r\n\r\n//     return () => {\r\n//       window.removeEventListener(\"beforeunload\", handleBeforeUnload);\r\n//       document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\r\n//     };\r\n//   }, []);\r\n\r\n//   const handleSelect = (questionId, value) => {\r\n//     setAnswers({ ...answers, [questionId]: value });\r\n//   };\r\n\r\n//   const goNext = () => {\r\n//     if (currentIdx < questions.length - 1) setCurrentIdx(currentIdx + 1);\r\n//   };\r\n//   const goPrev = () => {\r\n//     if (currentIdx > 0) setCurrentIdx(currentIdx - 1);\r\n//   };\r\n\r\n//   const handleSubmit = async () => {\r\n//     if (submitted) return;\r\n//     if (Object.keys(answers).length < questions.length) {\r\n//       if (!window.confirm(\"Some questions are unanswered. Submit anyway?\")) return;\r\n//     }\r\n\r\n//     let s = 0;\r\n//     questions.forEach((q) => {\r\n//       if (q.questionType === \"MCQ\" && answers[q._id] === q.correctAnswer) s += 1;\r\n//     });\r\n//     setScore(s);\r\n//     setSubmitted(true);\r\n\r\n//     const formattedAnswers = questions.map((q) => ({\r\n//       question: q.questionText,\r\n//       userAnswer: answers[q._id] || \"Not answered\",\r\n//       correctAnswer: q.correctAnswer || \"\",\r\n//       isCorrect: q.questionType === \"MCQ\" ? answers[q._id] === q.correctAnswer : null,\r\n//       type: q.questionType || \"Theory\",\r\n//     }));\r\n\r\n//     try {\r\n//       await API.tests.submit({\r\n//         name: fullName,\r\n//         email,\r\n//         answers: formattedAnswers,\r\n//         totalQuestions: questions.length,\r\n//         correctAnswers: s,\r\n//         scorePercent: ((s / questions.length) * 100).toFixed(2),\r\n//       });\r\n//       setResultSaved(true);\r\n//     } catch (err) {\r\n//       console.error(\"Error saving result:\", err);\r\n//       alert(\"Failed to save result to server.\");\r\n//     }\r\n//   };\r\n\r\n//   // üõë If user switched tab or reloaded\r\n//   if (testEnded) {\r\n//     return (\r\n//       <div className=\"container container-center\">\r\n//         <div className=\"card card-clean p-4 text-center\">\r\n//           <h3 className=\"text-danger\">‚ö†Ô∏è Test Ended</h3>\r\n//           <p>Your session ended because you switched tabs or reloaded.</p>\r\n//           <button className=\"btn btn-primary mt-3\" onClick={() => navigate(\"/\")}>\r\n//             Go to Home\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   // üõë If test not started\r\n//   if (testNotStarted) {\r\n//     return (\r\n//       <div className=\"container container-center\">\r\n//         <div className=\"card card-clean p-4 text-center\">\r\n//           <h3 className=\"text-warning\">‚ö†Ô∏è Test Not Active</h3>\r\n//           <p>The test has not been started by admin yet.</p>\r\n//           <button className=\"btn btn-primary mt-3\" onClick={() => navigate(\"/\")}>\r\n//             Back to Home\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   // üü¢ Loading\r\n//   if (loading)\r\n//     return <div className=\"container container-center\">Loading questions‚Ä¶</div>;\r\n\r\n//   if (!questions || questions.length === 0)\r\n//     return <div className=\"container container-center\">No questions available.</div>;\r\n\r\n//   // üü¢ After submit\r\n//   if (submitted) {\r\n//     return (\r\n//       <div className=\"container container-center\">\r\n//         <div className=\"card card-clean p-4\">\r\n//           <h3 className=\"text-success\">‚úÖ Test Completed</h3>\r\n//           <p>\r\n//             <strong>{fullName}</strong> ({email})\r\n//           </p>\r\n//           <h4>\r\n//             Your Score: {score} / {questions.length}\r\n//           </h4>\r\n\r\n//           {resultSaved && (\r\n//             <div className=\"alert alert-success mt-2\">\r\n//               ‚úÖ Your result has been recorded successfully!\r\n//             </div>\r\n//           )}\r\n\r\n//           <hr />\r\n//           <h5>Review Answers</h5>\r\n//           <div>\r\n//             {questions.map((q, idx) => (\r\n//               <div className=\"review-question\" key={q._id}>\r\n//                 <b>Q{idx + 1}:</b> {q.questionText}\r\n//                 <div>\r\n//                   Your answer:{\" \"}\r\n//                   <span\r\n//                     className={\r\n//                       q.questionType === \"MCQ\"\r\n//                         ? answers[q._id] === q.correctAnswer\r\n//                           ? \"text-success\"\r\n//                           : \"text-danger\"\r\n//                         : \"text-primary\"\r\n//                     }\r\n//                   >\r\n//                     {answers[q._id] || \"Not answered\"}\r\n//                   </span>\r\n//                 </div>\r\n//                 {q.questionType === \"MCQ\" && (\r\n//                   <div>\r\n//                     Correct answer:{\" \"}\r\n//                     <span className=\"text-success\">{q.correctAnswer}</span>\r\n//                   </div>\r\n//                 )}\r\n//               </div>\r\n//             ))}\r\n//           </div>\r\n\r\n//           <div className=\"mt-4\">\r\n//             <button className=\"btn btn-primary me-2\" onClick={() => navigate(\"/\")}>\r\n//               Back to Home\r\n//             </button>\r\n//             <button\r\n//               className=\"btn btn-outline-secondary\"\r\n//               onClick={() => window.location.reload()}\r\n//             >\r\n//               Retake Test\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   // üü¢ Active test page\r\n//   const currentQ = questions[currentIdx];\r\n//   const selectedAnswer = answers[currentQ._id] || \"\";\r\n\r\n//   return (\r\n//     <div className=\"test-container\">\r\n//       <div className=\"card test-card\">\r\n//         <div className=\"test-header\">\r\n//           <div>\r\n//             <h5 className=\"text-danger fw-bold\">Candidate: {fullName}</h5>\r\n//             <small className=\"text-muted\">{email}</small>\r\n//           </div>\r\n//           <div>\r\n//             <span className=\"badge bg-primary me-2\">\r\n//               Question {currentIdx + 1} / {questions.length}\r\n//             </span>\r\n//             <span className=\"badge bg-danger\">\r\n//               ‚è≥ {Math.floor(timeLeft / 60)}:\r\n//               {(timeLeft % 60).toString().padStart(2, \"0\")}\r\n//             </span>\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"test-body\">\r\n//           <h6 className=\"question-text\">\r\n//             <b>Q{currentIdx + 1}:</b> {currentQ.questionText}\r\n//           </h6>\r\n\r\n//           {currentQ.questionType === \"MCQ\" && currentQ.options?.length > 0 ? (\r\n//             <div className=\"options-container\">\r\n//               {currentQ.options.map((opt, i) => (\r\n//                 <label\r\n//                   key={i}\r\n//                   className={`option-item ${\r\n//                     selectedAnswer === opt ? \"selected\" : \"\"\r\n//                   }`}\r\n//                 >\r\n//                   <input\r\n//                     type=\"radio\"\r\n//                     name={`question-${currentQ._id}`}\r\n//                     value={opt}\r\n//                     checked={selectedAnswer === opt}\r\n//                     onChange={(e) => handleSelect(currentQ._id, e.target.value)}\r\n//                   />\r\n//                   {opt}\r\n//                 </label>\r\n//               ))}\r\n//             </div>\r\n//           ) : (\r\n//             <textarea\r\n//               className=\"theory-input\"\r\n//               placeholder=\"Type your answer here...\"\r\n//               value={selectedAnswer}\r\n//               onChange={(e) => handleSelect(currentQ._id, e.target.value)}\r\n//               rows={5}\r\n//             ></textarea>\r\n//           )}\r\n//         </div>\r\n\r\n//         <div className=\"test-footer\">\r\n//           <div>\r\n//             <button\r\n//               className=\"btn btn-secondary me-3\"\r\n//               onClick={goPrev}\r\n//               disabled={currentIdx === 0}\r\n//             >\r\n//               Previous\r\n//             </button>\r\n//             <button\r\n//               className=\"btn btn-secondary\"\r\n//               onClick={goNext}\r\n//               disabled={currentIdx === questions.length - 1}\r\n//             >\r\n//               Next\r\n//             </button>\r\n//           </div>\r\n\r\n//           <div>\r\n//             <button className=\"btn btn-success\" onClick={handleSubmit}>\r\n//               Submit Test\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// // import React, { useEffect, useState } from \"react\";\r\n// // import { useLocation, useNavigate } from \"react-router-dom\";\r\n// // import API from \"../services/api\";\r\n// // import \"../styles/TestPage.css\";\r\n\r\n// // export default function TestPage() {\r\n// //   const location = useLocation();\r\n// //   const navigate = useNavigate();\r\n// //   const { fullName, email } = location.state || {};\r\n\r\n// //   const [questions, setQuestions] = useState([]);\r\n// //   const [answers, setAnswers] = useState({});\r\n// //   const [currentIdx, setCurrentIdx] = useState(0);\r\n// //   const [loading, setLoading] = useState(true);\r\n// //   const [submitted, setSubmitted] = useState(false);\r\n// //   const [score, setScore] = useState(0);\r\n// //   const [resultSaved, setResultSaved] = useState(false);\r\n// //   const [testEnded, setTestEnded] = useState(false);\r\n// //   const [testNotStarted, setTestNotStarted] = useState(false);\r\n// //   const [timeLeft, setTimeLeft] = useState(null);\r\n\r\n// //   // üü¢ Fetch questions only when test is active\r\n// //   useEffect(() => {\r\n// //     if (!fullName || !email) {\r\n// //       navigate(\"/\");\r\n// //       return;\r\n// //     }\r\n\r\n// //     const fetchQuestions = async () => {\r\n// //       try {\r\n// //         const res = await API.questions.getAll();\r\n\r\n// //         // üõë If test is not active\r\n// //         if (res.data?.error || !res.data?.isActive) {\r\n// //           setTestNotStarted(true);\r\n// //           setLoading(false);\r\n// //           return;\r\n// //         }\r\n\r\n// //         const questionsArray = Array.isArray(res.data)\r\n// //           ? res.data\r\n// //           : res.data.questions || [];\r\n\r\n// //         setQuestions(questionsArray);\r\n// //         setTimeLeft((res.data.timeLimit || 10) * 60); // Convert minutes ‚Üí seconds\r\n// //       } catch (err) {\r\n// //         console.error(err);\r\n// //         alert(\"Failed to fetch questions. Please wait for admin to start the test.\");\r\n// //         setTestNotStarted(true);\r\n// //       } finally {\r\n// //         setLoading(false);\r\n// //       }\r\n// //     };\r\n\r\n// //     fetchQuestions();\r\n// //   }, [fullName, email, navigate]);\r\n\r\n// //   // üïí Countdown timer\r\n// //   useEffect(() => {\r\n// //     if (timeLeft === null) return;\r\n// //     if (timeLeft <= 0) {\r\n// //       alert(\"‚è∞ Time‚Äôs up! Submitting your test automatically.\");\r\n// //       handleSubmit();\r\n// //       return;\r\n// //     }\r\n\r\n// //     const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r\n// //     return () => clearTimeout(timer);\r\n// //   }, [timeLeft]);\r\n\r\n// //   // üõë Detect tab switch, reload, or page exit\r\n// //   useEffect(() => {\r\n// //     const handleBeforeUnload = (e) => {\r\n// //       e.preventDefault();\r\n// //       e.returnValue = \"\";\r\n// //       setTestEnded(true);\r\n// //     };\r\n\r\n// //     const handleVisibilityChange = () => {\r\n// //       if (document.hidden) {\r\n// //         setTestEnded(true);\r\n// //       }\r\n// //     };\r\n\r\n// //     window.addEventListener(\"beforeunload\", handleBeforeUnload);\r\n// //     document.addEventListener(\"visibilitychange\", handleVisibilityChange);\r\n\r\n// //     return () => {\r\n// //       window.removeEventListener(\"beforeunload\", handleBeforeUnload);\r\n// //       document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\r\n// //     };\r\n// //   }, []);\r\n\r\n// //   // üü¢ Select answer\r\n// //   const handleSelect = (questionId, value) => {\r\n// //     setAnswers({ ...answers, [questionId]: value });\r\n// //   };\r\n\r\n// //   // üü¢ Navigation\r\n// //   const goNext = () => {\r\n// //     if (currentIdx < questions.length - 1) setCurrentIdx(currentIdx + 1);\r\n// //   };\r\n// //   const goPrev = () => {\r\n// //     if (currentIdx > 0) setCurrentIdx(currentIdx - 1);\r\n// //   };\r\n\r\n// //   // üü¢ Submit handler\r\n// //   const handleSubmit = async () => {\r\n// //     if (submitted) return; // Prevent multiple submits\r\n// //     if (Object.keys(answers).length < questions.length) {\r\n// //       if (!window.confirm(\"Some questions are unanswered. Submit anyway?\")) return;\r\n// //     }\r\n\r\n// //     // Calculate score (for MCQs only)\r\n// //     let s = 0;\r\n// //     questions.forEach((q) => {\r\n// //       if (q.questionType === \"MCQ\" && answers[q._id] === q.correctAnswer) s += 1;\r\n// //     });\r\n\r\n// //     setScore(s);\r\n// //     setSubmitted(true);\r\n\r\n// //     const formattedAnswers = questions.map((q) => ({\r\n// //       question: q.questionText,\r\n// //       userAnswer: answers[q._id] || \"Not answered\",\r\n// //       correctAnswer: q.correctAnswer || \"\",\r\n// //       isCorrect: q.questionType === \"MCQ\" ? answers[q._id] === q.correctAnswer : null,\r\n// //       type: q.questionType || \"Theory\",\r\n// //     }));\r\n\r\n// //     try {\r\n// //       await API.tests.submit({\r\n// //         name: fullName,\r\n// //         email,\r\n// //         answers: formattedAnswers,\r\n// //         totalQuestions: questions.length,\r\n// //         correctAnswers: s,\r\n// //         scorePercent: ((s / questions.length) * 100).toFixed(2),\r\n// //       });\r\n// //       setResultSaved(true);\r\n// //     } catch (err) {\r\n// //       console.error(\"Error saving result:\", err);\r\n// //       alert(\"Failed to save result to server.\");\r\n// //     }\r\n// //   };\r\n\r\n// //   // üõë If user switched tab or reloaded\r\n// //   if (testEnded) {\r\n// //     return (\r\n// //       <div className=\"container container-center\">\r\n// //         <div className=\"card card-clean p-4 text-center\">\r\n// //           <h3 className=\"text-danger\">‚ö†Ô∏è Test Ended</h3>\r\n// //           <p>Your session ended because you switched tabs, reloaded, or left the page.</p>\r\n// //           <h4 className=\"mt-3 text-success\">Thank you for your time!</h4>\r\n// //           <button className=\"btn btn-primary mt-3\" onClick={() => navigate(\"/\")}>\r\n// //             Go to Home\r\n// //           </button>\r\n// //         </div>\r\n// //       </div>\r\n// //     );\r\n// //   }\r\n\r\n// //   // üõë If test not started\r\n// //   if (testNotStarted) {\r\n// //     return (\r\n// //       <div className=\"container container-center\">\r\n// //         <div className=\"card card-clean p-4 text-center\">\r\n// //           <h3 className=\"text-warning\">‚ö†Ô∏è Test Not Active</h3>\r\n// //           <p>The test has not been started by admin yet.</p>\r\n// //           <h5 className=\"mt-2\">Please contact the administrator to begin your test.</h5>\r\n// //           <button className=\"btn btn-primary mt-3\" onClick={() => navigate(\"/\")}>\r\n// //             Back to Home\r\n// //           </button>\r\n// //         </div>\r\n// //       </div>\r\n// //     );\r\n// //   }\r\n\r\n// //   // üü¢ Loading\r\n// //   if (loading) return <div className=\"container container-center\">Loading questions‚Ä¶</div>;\r\n// //   if (!questions || questions.length === 0)\r\n// //     return <div className=\"container container-center\">No questions available. Please try later.</div>;\r\n\r\n// //   // üü¢ After submit (Review screen)\r\n// //   if (submitted) {\r\n// //     return (\r\n// //       <div className=\"container container-center\">\r\n// //         <div className=\"card card-clean p-4\">\r\n// //           <h3 className=\"text-success\">Test Completed Successfully</h3>\r\n// //           <p>\r\n// //             <strong>{fullName}</strong> ({email})\r\n// //           </p>\r\n// //           <h4>\r\n// //             Your Score: {score} / {questions.length}\r\n// //           </h4>\r\n\r\n// //           {resultSaved && (\r\n// //             <div className=\"alert alert-success mt-2\">\r\n// //               ‚úÖ Your result has been recorded successfully!\r\n// //             </div>\r\n// //           )}\r\n\r\n// //           <hr />\r\n// //           <h5>Review Answers</h5>\r\n// //           <div>\r\n// //             {questions.map((q, idx) => (\r\n// //               <div className=\"review-question\" key={q._id}>\r\n// //                 <b>Q{idx + 1}:</b> {q.questionText}\r\n// //                 <div>\r\n// //                   Your answer:{\" \"}\r\n// //                   <span\r\n// //                     className={\r\n// //                       q.questionType === \"MCQ\"\r\n// //                         ? answers[q._id] === q.correctAnswer\r\n// //                           ? \"text-success\"\r\n// //                           : \"text-danger\"\r\n// //                         : \"text-primary\"\r\n// //                     }\r\n// //                   >\r\n// //                     {answers[q._id] || \"Not answered\"}\r\n// //                   </span>\r\n// //                 </div>\r\n// //                 {q.questionType === \"MCQ\" && (\r\n// //                   <div>\r\n// //                     Correct answer:{\" \"}\r\n// //                     <span className=\"text-success\">{q.correctAnswer}</span>\r\n// //                   </div>\r\n// //                 )}\r\n// //               </div>\r\n// //             ))}\r\n// //           </div>\r\n\r\n// //           <div className=\"mt-4\">\r\n// //             <button className=\"btn btn-primary me-2\" onClick={() => navigate(\"/\")}>\r\n// //               Back to Home\r\n// //             </button>\r\n// //             <button className=\"btn btn-outline-secondary\" onClick={() => window.location.reload()}>\r\n// //               Retake Test\r\n// //             </button>\r\n// //           </div>\r\n// //         </div>\r\n// //       </div>\r\n// //     );\r\n// //   }\r\n\r\n// //   // üü¢ Active test page\r\n// //   const currentQ = questions[currentIdx];\r\n// //   const selectedAnswer = answers[currentQ._id] || \"\";\r\n\r\n// //   return (\r\n// //     <div className=\"test-container\">\r\n// //       <div className=\"card test-card\">\r\n// //         <div className=\"test-header\">\r\n// //           <div>\r\n// //             <h5 className=\"text-danger fw-bold\">Candidate: {fullName}</h5>\r\n// //             <small className=\"text-muted\">{email}</small>\r\n// //           </div>\r\n// //           <div>\r\n// //             <span className=\"badge bg-primary me-2\">\r\n// //               Question {currentIdx + 1} / {questions.length}\r\n// //             </span>\r\n// //             <span className=\"badge bg-danger\">\r\n// //               ‚è≥ {Math.floor(timeLeft / 60)}:\r\n// //               {(timeLeft % 60).toString().padStart(2, \"0\")}\r\n// //             </span>\r\n// //           </div>\r\n// //         </div>\r\n\r\n// //         <div className=\"test-body\">\r\n// //           <h6 className=\"question-text\">\r\n// //             <b>Q{currentIdx + 1}:</b> {currentQ.questionText}\r\n// //           </h6>\r\n\r\n// //           {currentQ.questionType === \"MCQ\" && currentQ.options?.length > 0 ? (\r\n// //             <div className=\"options-container\">\r\n// //               {currentQ.options.map((opt, i) => (\r\n// //                 <label\r\n// //                   key={i}\r\n// //                   className={`option-item ${\r\n// //                     selectedAnswer === opt ? \"selected\" : \"\"\r\n// //                   }`}\r\n// //                 >\r\n// //                   <input\r\n// //                     type=\"radio\"\r\n// //                     name={`question-${currentQ._id}`}\r\n// //                     value={opt}\r\n// //                     checked={selectedAnswer === opt}\r\n// //                     onChange={(e) => handleSelect(currentQ._id, e.target.value)}\r\n// //                   />\r\n// //                   {opt}\r\n// //                 </label>\r\n// //               ))}\r\n// //             </div>\r\n// //           ) : (\r\n// //             <textarea\r\n// //               className=\"theory-input\"\r\n// //               placeholder=\"Type your answer here...\"\r\n// //               value={selectedAnswer}\r\n// //               onChange={(e) => handleSelect(currentQ._id, e.target.value)}\r\n// //               rows={5}\r\n// //             ></textarea>\r\n// //           )}\r\n// //         </div>\r\n\r\n// //         <div className=\"test-footer\">\r\n// //           <div>\r\n// //             <button\r\n// //               className=\"btn btn-secondary me-3\"\r\n// //               onClick={goPrev}\r\n// //               disabled={currentIdx === 0}\r\n// //             >\r\n// //               Previous\r\n// //             </button>\r\n// //             <button\r\n// //               className=\"btn btn-secondary\"\r\n// //               onClick={goNext}\r\n// //               disabled={currentIdx === questions.length - 1}\r\n// //             >\r\n// //               Next\r\n// //             </button>\r\n// //           </div>\r\n\r\n// //           <div>\r\n// //             <button className=\"btn btn-success\" onClick={handleSubmit}>\r\n// //               Submit Test\r\n// //             </button>\r\n// //           </div>\r\n// //         </div>\r\n// //       </div>\r\n// //     </div>\r\n// //   );\r\n// // }\r\n\r\n\r\n// // import React, { useEffect, useState } from \"react\";\r\n// // import { useLocation, useNavigate } from \"react-router-dom\";\r\n// // import API from \"../services/api\";\r\n// // import \"../styles/TestPage.css\";\r\n\r\n\r\n// // function pickRandom(arr, n) {\r\n// //   const copy = [...arr];\r\n// //   const res = [];\r\n// //   while (res.length < n && copy.length > 0) {\r\n// //     const idx = Math.floor(Math.random() * copy.length);\r\n// //     res.push(copy.splice(idx, 1)[0]);\r\n// //   }\r\n// //   return res;\r\n// // }\r\n\r\n// // export default function TestPage() {\r\n// //   const location = useLocation();\r\n// //   const navigate = useNavigate();\r\n// //   const { fullName, email, numQ } = location.state || {};\r\n\r\n// //   const [allQuestions, setAllQuestions] = useState([]);\r\n// //   const [questions, setQuestions] = useState([]);\r\n// //   const [answers, setAnswers] = useState({});\r\n// //   const [currentIdx, setCurrentIdx] = useState(0);\r\n// //   const [loading, setLoading] = useState(true);\r\n// //   const [submitted, setSubmitted] = useState(false);\r\n// //   const [score, setScore] = useState(0);\r\n// //   const [resultSaved, setResultSaved] = useState(false);\r\n// //   const [testEnded, setTestEnded] = useState(false); // üÜï detect tab switch/reload\r\n// //   const [timeLeft, setTimeLeft] = useState(null);\r\n\r\n// //   // üü¢ Fetch questions\r\n// //   useEffect(() => {\r\n// //     if (!fullName || !email) {\r\n// //       navigate(\"/\");\r\n// //       return;\r\n// //     }\r\n\r\n// //     const fetchQuestions = async () => {\r\n// //   try {\r\n// //     const res = await API.questions.getAll();\r\n// //     if (res.data.error) {\r\n// //       alert(res.data.error);\r\n// //       navigate(\"/\");\r\n// //       return;\r\n// //     }\r\n\r\n// //     setQuestions(res.data.questions || []);\r\n// //     setTimeLeft(res.data.timeLimit * 60); // seconds\r\n// //   } catch (err) {\r\n// //     console.error(err);\r\n// //     alert(\"Failed to fetch questions. Please wait for admin to start the test.\");\r\n// //     navigate(\"/\");\r\n// //   } finally {\r\n// //     setLoading(false);\r\n// //   }\r\n// // };\r\n\r\n\r\n// //     fetchQuestions();\r\n// //   }, [fullName, email, navigate]);\r\n\r\n// //   // üü¢ Pick random questions\r\n// //   useEffect(() => {\r\n// //     if (!loading && allQuestions.length > 0) {\r\n// //       const selected = pickRandom(allQuestions, Math.min(numQ || 10, allQuestions.length));\r\n// //       setQuestions(selected);\r\n// //     }\r\n// //   }, [loading, allQuestions, numQ]);\r\n\r\n// //   // üõë Detect tab switch, reload, or page exit\r\n// //   useEffect(() => {\r\n// //     const handleBeforeUnload = (e) => {\r\n// //       e.preventDefault();\r\n// //       e.returnValue = \"\";\r\n// //       setTestEnded(true);\r\n// //     };\r\n\r\n// //     const handleVisibilityChange = () => {\r\n// //       if (document.hidden) {\r\n// //         setTestEnded(true);\r\n// //       }\r\n// //     };\r\n\r\n// //     window.addEventListener(\"beforeunload\", handleBeforeUnload);\r\n// //     document.addEventListener(\"visibilitychange\", handleVisibilityChange);\r\n\r\n// //     return () => {\r\n// //       window.removeEventListener(\"beforeunload\", handleBeforeUnload);\r\n// //       document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\r\n// //     };\r\n// //   }, []);\r\n\r\n// //   const handleSelect = (questionId, value) => {\r\n// //     setAnswers({ ...answers, [questionId]: value });\r\n// //   };\r\n\r\n// //   const goNext = () => {\r\n// //     if (currentIdx < questions.length - 1) setCurrentIdx(currentIdx + 1);\r\n// //   };\r\n// //   const goPrev = () => {\r\n// //     if (currentIdx > 0) setCurrentIdx(currentIdx - 1);\r\n// //   };\r\n\r\n// //   // üü¢ Submit handler\r\n// //   const handleSubmit = async () => {\r\n// //     if (Object.keys(answers).length < questions.length) {\r\n// //       if (!window.confirm(\"Some questions are unanswered. Submit anyway?\")) return;\r\n// //     }\r\n\r\n// //     // Calculate score only for MCQs\r\n// //     let s = 0;\r\n// //     questions.forEach((q) => {\r\n// //       if (q.questionType === \"MCQ\" && answers[q._id] === q.correctAnswer) s += 1;\r\n// //     });\r\n// //     setScore(s);\r\n// //     setSubmitted(true);\r\n\r\n// //     // Prepare formatted answers\r\n// //     const formattedAnswers = questions.map((q) => ({\r\n// //       question: q.questionText,\r\n// //       userAnswer: answers[q._id] || \"Not answered\",\r\n// //       correctAnswer: q.correctAnswer || \"\",\r\n// //       isCorrect: q.questionType === \"MCQ\" ? answers[q._id] === q.correctAnswer : null,\r\n// //       type: q.questionType || \"Theory\",\r\n// //     }));\r\n\r\n// //     try {\r\n// //       await API.tests.submit({\r\n// //         name: fullName,\r\n// //         email,\r\n// //         answers: formattedAnswers,\r\n// //         totalQuestions: questions.length,\r\n// //         correctAnswers: s,\r\n// //         scorePercent: ((s / questions.length) * 100).toFixed(2),\r\n// //       });\r\n// //       setResultSaved(true);\r\n// //     } catch (err) {\r\n// //       console.error(\"Error saving result:\", err);\r\n// //       alert(\"Failed to save result to server.\");\r\n// //     }\r\n// //   };\r\n\r\n// //   // üõë If test was ended (tab switch or reload)\r\n// //   if (testEnded) {\r\n// //     return (\r\n// //       <div className=\"container container-center\">\r\n// //         <div className=\"card card-clean p-4 text-center\">\r\n// //           <h3 className=\"text-danger\">‚ö†Ô∏è Test Ended</h3>\r\n// //           <p>Your test session has ended because you switched tabs, reloaded, or left the page.</p>\r\n// //           <h4 className=\"mt-3 text-success\">Thank you for your time!</h4>\r\n// //           <button\r\n// //             className=\"btn btn-primary mt-3\"\r\n// //             onClick={() => navigate(\"/\")}\r\n// //           >\r\n// //             Go to Home\r\n// //           </button>\r\n// //         </div>\r\n// //       </div>\r\n// //     );\r\n// //   }\r\n\r\n// //   if (loading) return <div className=\"container container-center\">Loading questions‚Ä¶</div>;\r\n// //   if (!questions || questions.length === 0)\r\n// //     return <div className=\"container container-center\">No questions available. Please try later.</div>;\r\n\r\n// //   if (submitted) {\r\n// //     return (\r\n// //       <div className=\"container container-center\">\r\n// //         <div className=\"card card-clean p-4\">\r\n// //           <h3 className=\"text-success\">Test Completed Successfully</h3>\r\n// //           <p><strong>{fullName}</strong> ({email})</p>\r\n// //           <h4>Your Score: {score} / {questions.length}</h4>\r\n\r\n// //           {resultSaved && (\r\n// //             <div className=\"alert alert-success mt-2\">\r\n// //               ‚úÖ Your result has been recorded successfully!\r\n// //             </div>\r\n// //           )}\r\n\r\n// //           <hr />\r\n// //           <h5>Review Answers</h5>\r\n// //           <div>\r\n// //             {questions.map((q, idx) => (\r\n// //               <div className=\"review-question\" key={q._id}>\r\n// //                 <b>Q{idx + 1}:</b> {q.questionText}\r\n// //                 <div>\r\n// //                   Your answer:{\" \"}\r\n// //                   <span\r\n// //                     className={\r\n// //                       q.questionType === \"MCQ\"\r\n// //                         ? answers[q._id] === q.correctAnswer\r\n// //                           ? \"text-success\"\r\n// //                           : \"text-danger\"\r\n// //                         : \"text-primary\"\r\n// //                     }\r\n// //                   >\r\n// //                     {answers[q._id] || \"Not answered\"}\r\n// //                   </span>\r\n// //                 </div>\r\n// //                 {q.questionType === \"MCQ\" && (\r\n// //                   <div>\r\n// //                     Correct answer:{\" \"}\r\n// //                     <span className=\"text-success\">{q.correctAnswer}</span>\r\n// //                   </div>\r\n// //                 )}\r\n// //               </div>\r\n// //             ))}\r\n// //           </div>\r\n\r\n// //           <div className=\"mt-4\">\r\n// //             <button className=\"btn btn-primary me-2\" onClick={() => navigate(\"/\")}>\r\n// //               Back to Home\r\n// //             </button>\r\n// //             <button className=\"btn btn-outline-secondary\" onClick={() => window.location.reload()}>\r\n// //               Retake Test\r\n// //             </button>\r\n// //           </div>\r\n// //         </div>\r\n// //       </div>\r\n// //     );\r\n// //   }\r\n\r\n// //   const currentQ = questions[currentIdx];\r\n// //   const selectedAnswer = answers[currentQ._id] || \"\";\r\n\r\n// //   return (\r\n// //     <div className=\"test-container\">\r\n// //       <div className=\"card test-card\">\r\n// //         <div className=\"test-header\">\r\n// //           <div>\r\n// //             <h5 className=\"text-danger fw-bold\">\r\n// //               Candidate: {fullName.toLowerCase()}\r\n// //             </h5>\r\n// //             <small className=\"text-muted\">{email}</small>\r\n// //           </div>\r\n// //           <div>\r\n// //             <span className=\"badge bg-primary\">\r\n// //               Question {currentIdx + 1} / {questions.length}\r\n// //             </span>\r\n// //           </div>\r\n// //         </div>\r\n\r\n// //         <div className=\"test-body\">\r\n// //           <h6 className=\"question-text\">\r\n// //             <b>Q{currentIdx + 1}:</b> {currentQ.questionText}\r\n// //           </h6>\r\n\r\n// //           {currentQ.questionType === \"MCQ\" && currentQ.options?.length > 0 ? (\r\n// //             <div className=\"options-container\">\r\n// //               {currentQ.options.map((opt, i) => (\r\n// //                 <label\r\n// //                   key={i}\r\n// //                   className={`option-item ${\r\n// //                     selectedAnswer === opt ? \"selected\" : \"\"\r\n// //                   }`}\r\n// //                 >\r\n// //                   <input\r\n// //                     type=\"radio\"\r\n// //                     name={`question-${currentQ._id}`}\r\n// //                     value={opt}\r\n// //                     checked={selectedAnswer === opt}\r\n// //                     onChange={(e) => handleSelect(currentQ._id, e.target.value)}\r\n// //                   />\r\n// //                   {opt}\r\n// //                 </label>\r\n// //               ))}\r\n// //             </div>\r\n// //           ) : (\r\n// //             <textarea\r\n// //               className=\"theory-input\"\r\n// //               placeholder=\"Type your answer here...\"\r\n// //               value={selectedAnswer}\r\n// //               onChange={(e) => handleSelect(currentQ._id, e.target.value)}\r\n// //               rows={5}\r\n// //             ></textarea>\r\n// //           )}\r\n// //         </div>\r\n\r\n// //         <div className=\"test-footer\">\r\n// //           <div>\r\n// //             <button\r\n// //               className=\"btn btn-secondary me-3\"\r\n// //               onClick={goPrev}\r\n// //               disabled={currentIdx === 0}\r\n// //             >\r\n// //               Previous\r\n// //             </button>\r\n// //             <button\r\n// //               className=\"btn btn-secondary\"\r\n// //               onClick={goNext}\r\n// //               disabled={currentIdx === questions.length - 1}\r\n// //             >\r\n// //               Next\r\n// //             </button>\r\n// //           </div>\r\n\r\n// //           <div>\r\n// //             <button className=\"btn btn-success\" onClick={handleSubmit}>\r\n// //               Submit Test\r\n// //             </button>\r\n// //           </div>\r\n// //         </div>\r\n// //       </div>\r\n// //     </div>\r\n// //   );\r\n// // }\r\n\r\n// // // import React, { useEffect, useState } from \"react\";\r\n// // // import { useLocation, useNavigate } from \"react-router-dom\";\r\n// // // import API from \"../services/api\";\r\n// // // import \"../styles/TestPage.css\";\r\n\r\n// // // function pickRandom(arr, n) {\r\n// // //   const copy = [...arr];\r\n// // //   const res = [];\r\n// // //   while (res.length < n && copy.length > 0) {\r\n// // //     const idx = Math.floor(Math.random() * copy.length);\r\n// // //     res.push(copy.splice(idx, 1)[0]);\r\n// // //   }\r\n// // //   return res;\r\n// // // }\r\n\r\n// // // export default function TestPage() {\r\n// // //   const location = useLocation();\r\n// // //   const navigate = useNavigate();\r\n// // //   const { fullName, email, numQ } = location.state || {};\r\n\r\n// // //   const [allQuestions, setAllQuestions] = useState([]);\r\n// // //   const [questions, setQuestions] = useState([]);\r\n// // //   const [answers, setAnswers] = useState({});\r\n// // //   const [currentIdx, setCurrentIdx] = useState(0);\r\n// // //   const [loading, setLoading] = useState(true);\r\n// // //   const [submitted, setSubmitted] = useState(false);\r\n// // //   const [score, setScore] = useState(0);\r\n// // //   const [resultSaved, setResultSaved] = useState(false);\r\n\r\n// // //   // üü¢ Fetch questions\r\n// // //   useEffect(() => {\r\n// // //     if (!fullName || !email) {\r\n// // //       navigate(\"/\");\r\n// // //       return;\r\n// // //     }\r\n\r\n// // //     const fetchQuestions = async () => {\r\n// // //       try {\r\n// // //         const res = await API.questions.getAll();\r\n// // //         setAllQuestions(res.data || []);\r\n// // //       } catch (err) {\r\n// // //         console.error(err);\r\n// // //         alert(\"Failed to fetch questions from server.\");\r\n// // //       } finally {\r\n// // //         setLoading(false);\r\n// // //       }\r\n// // //     };\r\n\r\n// // //     fetchQuestions();\r\n// // //   }, [fullName, email, navigate]);\r\n\r\n// // //   // üü¢ Pick random questions\r\n// // //   useEffect(() => {\r\n// // //     if (!loading && allQuestions.length > 0) {\r\n// // //       const selected = pickRandom(allQuestions, Math.min(numQ || 10, allQuestions.length));\r\n// // //       setQuestions(selected);\r\n// // //     }\r\n// // //   }, [loading, allQuestions, numQ]);\r\n\r\n// // //   const handleSelect = (questionId, value) => {\r\n// // //     setAnswers({ ...answers, [questionId]: value });\r\n// // //   };\r\n\r\n// // //   const goNext = () => {\r\n// // //     if (currentIdx < questions.length - 1) setCurrentIdx(currentIdx + 1);\r\n// // //   };\r\n// // //   const goPrev = () => {\r\n// // //     if (currentIdx > 0) setCurrentIdx(currentIdx - 1);\r\n// // //   };\r\n\r\n// // //   // üü¢ Submit handler\r\n// // //   const handleSubmit = async () => {\r\n// // //     if (Object.keys(answers).length < questions.length) {\r\n// // //       if (!window.confirm(\"Some questions are unanswered. Submit anyway?\")) return;\r\n// // //     }\r\n\r\n// // //     // Calculate score only for MCQs\r\n// // //     let s = 0;\r\n// // //     questions.forEach((q) => {\r\n// // //       if (q.questionType === \"MCQ\" && answers[q._id] === q.correctAnswer) s += 1;\r\n// // //     });\r\n// // //     setScore(s);\r\n// // //     setSubmitted(true);\r\n\r\n// // //     // Prepare formatted answers\r\n// // //     const formattedAnswers = questions.map((q) => ({\r\n// // //       question: q.questionText,\r\n// // //       userAnswer: answers[q._id] || \"Not answered\",\r\n// // //       correctAnswer: q.correctAnswer || \"\",\r\n// // //       isCorrect: q.questionType === \"MCQ\" ? answers[q._id] === q.correctAnswer : null,\r\n// // //       type: q.questionType || \"Theory\",\r\n// // //     }));\r\n\r\n// // //     try {\r\n// // //       await API.tests.submit({\r\n// // //         name: fullName,\r\n// // //         email,\r\n// // //         answers: formattedAnswers,\r\n// // //         totalQuestions: questions.length,\r\n// // //         correctAnswers: s,\r\n// // //         scorePercent: ((s / questions.length) * 100).toFixed(2),\r\n// // //       });\r\n// // //       setResultSaved(true);\r\n// // //     } catch (err) {\r\n// // //       console.error(\"Error saving result:\", err);\r\n// // //       alert(\"Failed to save result to server.\");\r\n// // //     }\r\n// // //   };\r\n\r\n// // //   if (loading) return <div className=\"container container-center\">Loading questions‚Ä¶</div>;\r\n// // //   if (!questions || questions.length === 0)\r\n// // //     return <div className=\"container container-center\">No questions available. Please try later.</div>;\r\n\r\n// // //   if (submitted) {\r\n// // //     return (\r\n// // //       <div className=\"container container-center\">\r\n// // //         <div className=\"card card-clean p-4\">\r\n// // //           <h3 className=\"text-success\">Test Completed Successfully</h3>\r\n// // //           <p><strong>{fullName}</strong> ({email})</p>\r\n// // //           <h4>Your Score: {score} / {questions.length}</h4>\r\n\r\n// // //           {resultSaved && (\r\n// // //             <div className=\"alert alert-success mt-2\">\r\n// // //               ‚úÖ Your result has been recorded successfully!\r\n// // //             </div>\r\n// // //           )}\r\n\r\n// // //           <hr />\r\n// // //           <h5>Review Answers</h5>\r\n// // //           <div>\r\n// // //             {questions.map((q, idx) => (\r\n// // //               <div className=\"review-question\" key={q._id}>\r\n// // //                 <b>Q{idx + 1}:</b> {q.questionText}\r\n// // //                 <div>\r\n// // //                   Your answer:{\" \"}\r\n// // //                   <span\r\n// // //                     className={\r\n// // //                       q.questionType === \"MCQ\"\r\n// // //                         ? answers[q._id] === q.correctAnswer\r\n// // //                           ? \"text-success\"\r\n// // //                           : \"text-danger\"\r\n// // //                         : \"text-primary\"\r\n// // //                     }\r\n// // //                   >\r\n// // //                     {answers[q._id] || \"Not answered\"}\r\n// // //                   </span>\r\n// // //                 </div>\r\n// // //                 {q.questionType === \"MCQ\" && (\r\n// // //                   <div>\r\n// // //                     Correct answer:{\" \"}\r\n// // //                     <span className=\"text-success\">{q.correctAnswer}</span>\r\n// // //                   </div>\r\n// // //                 )}\r\n// // //               </div>\r\n// // //             ))}\r\n// // //           </div>\r\n\r\n// // //           <div className=\"mt-4\">\r\n// // //             <button className=\"btn btn-primary me-2\" onClick={() => navigate(\"/\")}>\r\n// // //               Back to Home\r\n// // //             </button>\r\n// // //             <button className=\"btn btn-outline-secondary\" onClick={() => window.location.reload()}>\r\n// // //               Retake Test\r\n// // //             </button>\r\n// // //           </div>\r\n// // //         </div>\r\n// // //       </div>\r\n// // //     );\r\n// // //   }\r\n\r\n// // //   const currentQ = questions[currentIdx];\r\n// // //   const selectedAnswer = answers[currentQ._id] || \"\";\r\n\r\n// // //   return (\r\n// // //     <div className=\"test-container\">\r\n// // //       <div className=\"card test-card\">\r\n// // //         <div className=\"test-header\">\r\n// // //           <div>\r\n// // //             <h5 className=\"text-danger fw-bold\">\r\n// // //               Candidate: {fullName.toLowerCase()}\r\n// // //             </h5>\r\n// // //             <small className=\"text-muted\">{email}</small>\r\n// // //           </div>\r\n// // //           <div>\r\n// // //             <span className=\"badge bg-primary\">\r\n// // //               Question {currentIdx + 1} / {questions.length}\r\n// // //             </span>\r\n// // //           </div>\r\n// // //         </div>\r\n\r\n// // //         <div className=\"test-body\">\r\n// // //           <h6 className=\"question-text\">\r\n// // //              <b>Q{currentIdx + 1}:</b> {currentQ.questionText}\r\n// // //           </h6>\r\n\r\n// // //           {/* üß† Conditional rendering for MCQ / Theory */}\r\n// // //           {currentQ.questionType === \"MCQ\" && currentQ.options?.length > 0 ? (\r\n// // //             <div className=\"options-container\">\r\n// // //               {currentQ.options.map((opt, i) => (\r\n// // //                 <label\r\n// // //                   key={i}\r\n// // //                   className={`option-item ${\r\n// // //                     selectedAnswer === opt ? \"selected\" : \"\"\r\n// // //                   }`}\r\n// // //                 >\r\n// // //                   <input\r\n// // //                     type=\"radio\"\r\n// // //                     name={`question-${currentQ._id}`}\r\n// // //                     value={opt}\r\n// // //                     checked={selectedAnswer === opt}\r\n// // //                     onChange={(e) => handleSelect(currentQ._id, e.target.value)}\r\n// // //                   />\r\n// // //                   {opt}\r\n// // //                 </label>\r\n// // //               ))}\r\n// // //             </div>\r\n// // //           ) : (\r\n// // //             <textarea\r\n// // //               className=\"theory-input\"\r\n// // //               placeholder=\"Type your answer here...\"\r\n// // //               value={selectedAnswer}\r\n// // //               onChange={(e) => handleSelect(currentQ._id, e.target.value)}\r\n// // //               rows={5}\r\n// // //             ></textarea>\r\n// // //           )}\r\n// // //         </div>\r\n\r\n// // //         <div className=\"test-footer\">\r\n// // //           <div>\r\n// // //             <button\r\n// // //               className=\"btn btn-secondary me-3\"\r\n// // //               onClick={goPrev}\r\n// // //               disabled={currentIdx === 0}\r\n// // //             >\r\n// // //               Previous\r\n// // //             </button>\r\n// // //             <button\r\n// // //               className=\"btn btn-secondary\"\r\n// // //               onClick={goNext}\r\n// // //               disabled={currentIdx === questions.length - 1}\r\n// // //             >\r\n// // //               Next\r\n// // //             </button>\r\n// // //           </div>\r\n\r\n// // //           <div>\r\n// // //             {/* <button\r\n// // //               className=\"btn btn-danger me-2\"\r\n// // //               onClick={() => {\r\n// // //                 if (window.confirm(\"Are you sure you want to abandon this test?\"))\r\n// // //                   navigate(\"/\");\r\n// // //               }}\r\n// // //             >\r\n// // //               Abandon\r\n// // //             </button> */}\r\n// // //             <button className=\"btn btn-success\" onClick={handleSubmit}>\r\n// // //               Submit Test\r\n// // //             </button>\r\n// // //           </div>\r\n// // //         </div>\r\n// // //       </div>\r\n// // //     </div>\r\n// // //   );\r\n// // // }\r\n\r\n// // // import React, { useEffect, useState } from \"react\";\r\n// // // import { useLocation, useNavigate } from \"react-router-dom\";\r\n// // // import API from \"../services/api\";\r\n// // // import QuestionCard from \"../components/QuestionCard\";\r\n// // // import \"../styles/TestPage.css\";\r\n\r\n// // // function pickRandom(arr, n) {\r\n// // //   const copy = [...arr];\r\n// // //   const res = [];\r\n// // //   while (res.length < n && copy.length > 0) {\r\n// // //     const idx = Math.floor(Math.random() * copy.length);\r\n// // //     res.push(copy.splice(idx, 1)[0]);\r\n// // //   }\r\n// // //   return res;\r\n// // // }\r\n\r\n// // // export default function TestPage() {\r\n// // //   const location = useLocation();\r\n// // //   const navigate = useNavigate();\r\n// // //   const { fullName, email, numQ } = location.state || {};\r\n// // //   const [allQuestions, setAllQuestions] = useState([]);\r\n// // //   const [questions, setQuestions] = useState([]);\r\n// // //   const [answers, setAnswers] = useState({});\r\n// // //   const [currentIdx, setCurrentIdx] = useState(0);\r\n// // //   const [loading, setLoading] = useState(true);\r\n// // //   const [submitted, setSubmitted] = useState(false);\r\n// // //   const [score, setScore] = useState(0);\r\n// // //   const [resultSaved, setResultSaved] = useState(false);\r\n\r\n// // //   useEffect(() => {\r\n// // //     if (!fullName || !email) {\r\n// // //       navigate(\"/\");\r\n// // //       return;\r\n// // //     }\r\n\r\n// // //     const fetchQuestions = async () => {\r\n// // //       try {\r\n// // //         const res = await API.get(\"/questions\");\r\n// // //         setAllQuestions(res.data || []);\r\n// // //       } catch (err) {\r\n// // //         console.error(err);\r\n// // //         alert(\"Failed to fetch questions from server.\");\r\n// // //       } finally {\r\n// // //         setLoading(false);\r\n// // //       }\r\n// // //     };\r\n\r\n// // //     fetchQuestions();\r\n// // //   }, [fullName, email, navigate]);\r\n\r\n// // //   useEffect(() => {\r\n// // //     if (!loading && allQuestions.length > 0) {\r\n// // //       const selected = pickRandom(allQuestions, Math.min(numQ || 10, allQuestions.length));\r\n// // //       setQuestions(selected);\r\n// // //     }\r\n// // //   }, [loading, allQuestions, numQ]);\r\n\r\n// // //   const handleSelect = (opt) => {\r\n// // //     const q = questions[currentIdx];\r\n// // //     setAnswers({ ...answers, [q._id]: opt });\r\n// // //   };\r\n\r\n// // //   const goNext = () => {\r\n// // //     if (currentIdx < questions.length - 1) setCurrentIdx(currentIdx + 1);\r\n// // //   };\r\n// // //   const goPrev = () => {\r\n// // //     if (currentIdx > 0) setCurrentIdx(currentIdx - 1);\r\n// // //   };\r\n\r\n// // //   const handleSubmit = async () => {\r\n// // //     if (Object.keys(answers).length < questions.length) {\r\n// // //       if (!window.confirm(\"Some questions are unanswered. Submit anyway?\")) return;\r\n// // //     }\r\n\r\n// // //     // calculate score\r\n// // //     let s = 0;\r\n// // //     questions.forEach((q) => {\r\n// // //       if (answers[q._id] && answers[q._id] === q.correctAnswer) s += 1;\r\n// // //     });\r\n// // //     setScore(s);\r\n// // //     setSubmitted(true);\r\n\r\n// // //     // format answers for backend\r\n// // //     const formattedAnswers = questions.map((q) => ({\r\n// // //       question: q.questionText,\r\n// // //       userAnswer: answers[q._id] || \"Not answered\",\r\n// // //       correctAnswer: q.correctAnswer,\r\n// // //       isCorrect: answers[q._id] === q.correctAnswer,\r\n// // //     }));\r\n\r\n// // //     try {\r\n// // //       await API.post(\"/tests\", {\r\n// // //         name: fullName,\r\n// // //         email,\r\n// // //         answers: formattedAnswers,\r\n// // //       });\r\n// // //       setResultSaved(true);\r\n// // //     } catch (err) {\r\n// // //       console.error(\"Error saving result:\", err);\r\n// // //       alert(\"Failed to save result to server.\");\r\n// // //     }\r\n// // //   };\r\n\r\n// // //   if (loading) return <div className=\"container container-center\">Loading questions‚Ä¶</div>;\r\n// // //   if (!questions || questions.length === 0)\r\n// // //     return <div className=\"container container-center\">No questions available. Please try later.</div>;\r\n\r\n// // //   if (submitted) {\r\n// // //     return (\r\n// // //       <div className=\"container container-center\">\r\n// // //         <div className=\"card card-clean p-4\">\r\n// // //           <h3 className=\"text-success\">Test Completed Successfully</h3>\r\n// // //           <p><strong>{fullName}</strong> ({email})</p>\r\n// // //           <h4>Your Score: {score} / {questions.length}</h4>\r\n\r\n// // //           {resultSaved && (\r\n// // //             <div className=\"alert alert-success mt-2\">\r\n// // //               ‚úÖ Your result has been recorded successfully!\r\n// // //             </div>\r\n// // //           )}\r\n\r\n// // //           <hr />\r\n// // //           <h5>Review Answers</h5>\r\n// // //           <div>\r\n// // //             {questions.map((q, idx) => (\r\n// // //               <div className=\"mb-3\" key={q._id}>\r\n// // //                 <b>Q{idx + 1}:</b> {q.questionText}\r\n// // //                 <div>\r\n// // //                   Your answer:{\" \"}\r\n// // //                   <span\r\n// // //                     className={\r\n// // //                       answers[q._id] === q.correctAnswer\r\n// // //                         ? \"text-success\"\r\n// // //                         : \"text-danger\"\r\n// // //                     }\r\n// // //                   >\r\n// // //                     {answers[q._id] || \"Not answered\"}\r\n// // //                   </span>\r\n// // //                 </div>\r\n// // //                 <div>\r\n// // //                   Correct answer:{\" \"}\r\n// // //                   <span className=\"text-success\">{q.correctAnswer}</span>\r\n// // //                 </div>\r\n// // //               </div>\r\n// // //             ))}\r\n// // //           </div>\r\n\r\n// // //           <div className=\"mt-3\">\r\n// // //             <button className=\"btn btn-primary me-2\" onClick={() => navigate(\"/\")}>\r\n// // //               Back to Home\r\n// // //             </button>\r\n// // //             <button className=\"btn btn-outline-secondary\" onClick={() => window.location.reload()}>\r\n// // //               Retake Test\r\n// // //             </button>\r\n// // //           </div>\r\n// // //         </div>\r\n// // //       </div>\r\n// // //     );\r\n// // //   }\r\n\r\n// // //   const currentQ = questions[currentIdx];\r\n// // //   const selectedForCurrent = answers[currentQ._id];\r\n\r\n// // //   return (\r\n// // //     <div className=\"container container-center\">\r\n// // //       <div className=\"card card-clean p-4\">\r\n// // //         <div className=\"d-flex justify-content-between align-items-start\">\r\n// // //           <div>\r\n// // //             <h5 className=\"mb-0\">Candidate: {fullName}</h5>\r\n// // //             <small className=\"text-muted\">{email}</small>\r\n// // //           </div>\r\n// // //           <div>\r\n// // //             <span className=\"badge bg-primary\">\r\n// // //               Question {currentIdx + 1} / {questions.length}\r\n// // //             </span>\r\n// // //           </div>\r\n// // //         </div>\r\n\r\n// // //         <div className=\"mt-4\">\r\n// // //           <QuestionCard\r\n// // //             question={currentQ}\r\n// // //             selectedAnswer={selectedForCurrent}\r\n// // //             onSelect={handleSelect}\r\n// // //           />\r\n// // //         </div>\r\n\r\n// // //         <div className=\"mt-3 d-flex justify-content-between\">\r\n// // //           <div>\r\n// // //             <button\r\n// // //               className=\"btn btn-secondary me-2\"\r\n// // //               onClick={goPrev}\r\n// // //               disabled={currentIdx === 0}\r\n// // //             >\r\n// // //               Previous\r\n// // //             </button>\r\n// // //             <button\r\n// // //               className=\"btn btn-secondary\"\r\n// // //               onClick={goNext}\r\n// // //               disabled={currentIdx === questions.length - 1}\r\n// // //             >\r\n// // //               Next\r\n// // //             </button>\r\n// // //           </div>\r\n\r\n// // //           <div>\r\n// // //             <button\r\n// // //               className=\"btn btn-danger me-2\"\r\n// // //               onClick={() => {\r\n// // //                 if (window.confirm(\"Are you sure you want to abandon this test?\"))\r\n// // //                   navigate(\"/\");\r\n// // //               }}\r\n// // //             >\r\n// // //               Abandon\r\n// // //             </button>\r\n\r\n// // //             <button className=\"btn btn-success\" onClick={handleSubmit}>\r\n// // //               Submit Test\r\n// // //             </button>\r\n// // //           </div>\r\n// // //         </div>\r\n// // //       </div>\r\n// // //     </div>\r\n// // //   );\r\n// // // }\r\n\r\n// // // // import React, { useEffect, useState } from \"react\";\r\n// // // // import { useLocation, useNavigate } from \"react-router-dom\";\r\n// // // // import API from \"../services/api\";\r\n// // // // import QuestionCard from \"../components/QuestionCard\";\r\n// // // // import \"../styles/TestPage.css\";\r\n\r\n// // // // function pickRandom(arr, n) {\r\n// // // //   const copy = [...arr];\r\n// // // //   const res = [];\r\n// // // //   while (res.length < n && copy.length > 0) {\r\n// // // //     const idx = Math.floor(Math.random() * copy.length);\r\n// // // //     res.push(copy.splice(idx, 1)[0]);\r\n// // // //   }\r\n// // // //   return res;\r\n// // // // }\r\n\r\n// // // // export default function TestPage() {\r\n// // // //   const location = useLocation();\r\n// // // //   const navigate = useNavigate();\r\n// // // //   const { fullName, email, numQ } = location.state || {};\r\n// // // //   const [allQuestions, setAllQuestions] = useState([]);\r\n// // // //   const [questions, setQuestions] = useState([]);\r\n// // // //   const [answers, setAnswers] = useState({}); // { questionId: selectedOption }\r\n// // // //   const [currentIdx, setCurrentIdx] = useState(0);\r\n// // // //   const [loading, setLoading] = useState(true);\r\n// // // //   const [submitted, setSubmitted] = useState(false);\r\n// // // //   const [score, setScore] = useState(0);\r\n\r\n// // // //   useEffect(() => {\r\n// // // //     if (!fullName || !email) {\r\n// // // //       // if page opened without details -> back to home\r\n// // // //       navigate(\"/\");\r\n// // // //       return;\r\n// // // //     }\r\n\r\n// // // //     const fetchQuestions = async () => {\r\n// // // //       try {\r\n// // // //         const res = await API.get(\"/questions\");\r\n// // // //         setAllQuestions(res.data || []);\r\n// // // //       } catch (err) {\r\n// // // //         console.error(err);\r\n// // // //         alert(\"Failed to fetch questions from server.\");\r\n// // // //       } finally {\r\n// // // //         setLoading(false);\r\n// // // //       }\r\n// // // //     };\r\n\r\n// // // //     fetchQuestions();\r\n// // // //   }, [fullName, email, navigate]);\r\n\r\n// // // //   useEffect(() => {\r\n// // // //     if (!loading && allQuestions.length > 0) {\r\n// // // //       const chunk = pickRandom(allQuestions, Math.min(numQ || 10, allQuestions.length));\r\n// // // //       setQuestions(chunk);\r\n// // // //     }\r\n// // // //   }, [loading, allQuestions, numQ]);\r\n\r\n// // // //   const handleSelect = (opt) => {\r\n// // // //     const q = questions[currentIdx];\r\n// // // //     setAnswers({ ...answers, [q._id]: opt });\r\n// // // //   };\r\n\r\n// // // //   const goNext = () => {\r\n// // // //     if (currentIdx < questions.length - 1) setCurrentIdx(currentIdx + 1);\r\n// // // //   };\r\n// // // //   const goPrev = () => {\r\n// // // //     if (currentIdx > 0) setCurrentIdx(currentIdx - 1);\r\n// // // //   };\r\n\r\n// // // //   const handleSubmit = () => {\r\n// // // //     // ensure all answered\r\n// // // //     if (Object.keys(answers).length < questions.length) {\r\n// // // //       if (!window.confirm(\"Some questions are unanswered. Submit anyway?\")) return;\r\n// // // //     }\r\n\r\n// // // //     // compute score\r\n// // // //     let s = 0;\r\n// // // //     questions.forEach((q) => {\r\n// // // //       if (answers[q._id] && answers[q._id] === q.correctAnswer) s += 1;\r\n// // // //     });\r\n// // // //     setScore(s);\r\n// // // //     setSubmitted(true);\r\n// // // //   };\r\n\r\n// // // //   if (loading) return <div className=\"container container-center\">Loading questions‚Ä¶</div>;\r\n// // // //   if (!questions || questions.length === 0) return <div className=\"container container-center\">No questions available. Please try later.</div>;\r\n\r\n// // // //   if (submitted) {\r\n// // // //     return (\r\n// // // //       <div className=\"container container-center\">\r\n// // // //         <div className=\"card card-clean p-4\">\r\n// // // //           <h3>Test Completed</h3>\r\n// // // //           <p><strong>{fullName}</strong> ({email})</p>\r\n// // // //           <h4>Your score: {score} out of {questions.length}</h4>\r\n// // // //           <hr />\r\n// // // //           <h5>Review</h5>\r\n// // // //           <div>\r\n// // // //             {questions.map((q, idx) => (\r\n// // // //               <div className=\"mb-3\" key={q._id}>\r\n// // // //                 <b>Q{idx + 1}:</b> {q.questionText}\r\n// // // //                 <div>Your answer: <span className={answers[q._id] === q.correctAnswer ? \"text-success\" : \"text-danger\"}>{answers[q._id] || \"Not answered\"}</span></div>\r\n// // // //                 <div>Correct answer: <span className=\"text-success\">{q.correctAnswer}</span></div>\r\n// // // //               </div>\r\n// // // //             ))}\r\n// // // //           </div>\r\n\r\n// // // //           <div className=\"mt-3\">\r\n// // // //             <button className=\"btn btn-primary me-2\" onClick={() => navigate(\"/\")}>Back to Home</button>\r\n// // // //             <button className=\"btn btn-outline-secondary\" onClick={() => window.location.reload()}>Take New Test</button>\r\n// // // //           </div>\r\n// // // //         </div>\r\n// // // //       </div>\r\n// // // //     );\r\n// // // //   }\r\n\r\n// // // //   const currentQ = questions[currentIdx];\r\n// // // //   const selectedForCurrent = answers[currentQ._id];\r\n\r\n// // // //   return (\r\n// // // //     <div className=\"container container-center\">\r\n// // // //       <div className=\"card card-clean p-4\">\r\n// // // //         <div className=\"d-flex justify-content-between align-items-start\">\r\n// // // //           <div>\r\n// // // //             <h5 className=\"mb-0\">Candidate: {fullName}</h5>\r\n// // // //             <small className=\"text-muted\">{email}</small>\r\n// // // //           </div>\r\n// // // //           <div>\r\n// // // //             <span className=\"badge bg-primary\">Question {currentIdx + 1} / {questions.length}</span>\r\n// // // //           </div>\r\n// // // //         </div>\r\n\r\n// // // //         <div className=\"mt-4\">\r\n// // // //           <QuestionCard question={currentQ} selectedAnswer={selectedForCurrent} onSelect={handleSelect} />\r\n// // // //         </div>\r\n\r\n// // // //         <div className=\"mt-3 d-flex justify-content-between\">\r\n// // // //           <div>\r\n// // // //             <button className=\"btn btn-secondary me-2\" onClick={goPrev} disabled={currentIdx === 0}>Previous</button>\r\n// // // //             <button className=\"btn btn-secondary\" onClick={goNext} disabled={currentIdx === questions.length - 1}>Next</button>\r\n// // // //           </div>\r\n\r\n// // // //           <div>\r\n// // // //             <button className=\"btn btn-danger me-2\" onClick={() => {\r\n// // // //               if (window.confirm(\"Are you sure you want to abandon this test?\")) navigate(\"/\");\r\n// // // //             }}>Abandon</button>\r\n\r\n// // // //             <button className=\"btn btn-success\" onClick={handleSubmit}>Submit Test</button>\r\n// // // //           </div>\r\n// // // //         </div>\r\n// // // //       </div>\r\n// // // //     </div>\r\n// // // //   );\r\n// // // // }\r\n"],"mappings":"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ACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA/F,EAAA,CAp1DwBD,QAAQ;EAAA,QACbL,WAAW,EACXC,WAAW;AAAA;AAAAqH,EAAA,GAFNjH,QAAQ;AAAA,IAAAiH,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}